import pandas as pd

# Datos del vocabulario
datos = {
    "Inglés": [
        "Variable", "Function", "Loop", "List", "Tuple", "Dictionary",
        "String", "Integer", "Float", "Boolean", "If statement", "Else",
        "Elif", "Import", "Module", "Package", "Class", "Object",
        "Method", "Attribute", "Exception", "Try", "Except", "Finally",
        "While loop", "For loop", "Break", "Continue", "Pass", "Lambda",
        "Decorator", "Generator", "Comprehension", "Indentation",
        "Syntax", "Argument", "Parameter", "Return", "Namespace",
        "Scope", "Global variable", "Local variable", "Docstring",
        "IDE", "REPL", "PEP", "Iterable", "Iterator", "List comprehension",
        "Slice", "Index", "Key", "Value", "Set", "Immutable", "Mutable",
        "Binary", "Conditional", "Expression", "Statement", "Operator",
        "Operand", "String formatting", "Importing modules", "File I/O",
        "Recursion", "Stack", "Queue", "Linked list", "Binary tree",
        "Algorithm", "Complexity", "Big O notation"
    ],
    "Español": [
        "Variable", "Función", "Bucle / Ciclo", "Lista", "Tupla", "Diccionario",
        "Cadena de caracteres", "Entero", "Flotante", "Booleano", "Sentencia if", "Else / De lo contrario",
        "Elif / Sino si", "Importar", "Módulo", "Paquete", "Clase", "Objeto",
        "Método", "Atributo", "Excepción", "Try", "Except / Excepto", "Finally / Finalmente",
        "Bucle while", "Bucle for", "Break / Romper", "Continue / Continuar", "Pass / Pasar", "Lambda",
        "Decorador", "Generador", "Comprensión", "Sangría",
        "Sintaxis", "Argumento", "Parámetro", "Retorno / Devolver", "Espacio de nombres",
        "Ámbito", "Variable global", "Variable local", "Cadena de documentación",
        "Entorno de Desarrollo Integrado (IDE)", "REPL (Read-Eval-Print Loop)", "PEP (Python Enhancement Proposal)", "Iterable", "Iterador", "Comprensión de listas",
        "Rebanada / Corte", "Índice", "Clave", "Valor", "Conjunto", "Inmutable", "Mutable",
        "Binario", "Condicional", "Expresión", "Sentencia", "Operador",
        "Operando", "Formateo de cadenas", "Importando módulos", "Entrada/Salida de archivos",
        "Recursión", "Pila", "Cola", "Lista enlazada", "Árbol binario",
        "Algoritmo", "Complejidad", "Notación Big O"
    ],
    "Descripción": [
        "Almacena datos que pueden cambiar durante la ejecución del programa.",
        "Bloque de código reutilizable que realiza una tarea específica.",
        "Estructura que repite un bloque de código mientras se cumpla una condición.",
        "Colección ordenada y mutable de elementos.",
        "Colección ordenada e inmutable de elementos.",
        "Colección de pares clave-valor, desordenada y mutable.",
        "Secuencia de caracteres utilizados para representar texto.",
        "Tipo de dato que representa números sin parte decimal.",
        "Tipo de dato que representa números con parte decimal.",
        "Tipo de dato que representa `True` (Verdadero) o `False` (Falso).",
        "Estructura condicional que ejecuta código si se cumple una condición.",
        "Parte de una estructura condicional que se ejecuta si la condición anterior no se cumple.",
        "Combina \"else\" e \"if\" para múltiples condiciones en estructuras condicionales.",
        "Instrucción para incluir módulos o librerías en el programa.",
        "Archivo que contiene definiciones y declaraciones de Python.",
        "Colección de módulos relacionados.",
        "Plantilla para crear objetos, definiendo atributos y métodos.",
        "Instancia de una clase que contiene datos y funcionalidades.",
        "Función definida dentro de una clase.",
        "Variable que pertenece a una clase o un objeto.",
        "Evento que ocurre durante la ejecución del programa que interrumpe el flujo normal de instrucciones.",
        "Bloque de código para intentar ejecutar instrucciones que pueden causar excepciones.",
        "Maneja las excepciones que ocurren en el bloque `try`.",
        "Bloque de código que se ejecuta después de `try` y `except`, independientemente del resultado.",
        "Bucle que continúa ejecutándose mientras una condición sea verdadera.",
        "Bucle que itera sobre una secuencia de elementos.",
        "Termina la ejecución del bucle actual.",
        "Salta el resto del código en la iteración actual y continúa con la siguiente.",
        "Instrucción nula que no hace nada, usada como marcador de posición.",
        "Función anónima pequeña y rápida.",
        "Función que modifica el comportamiento de otra función.",
        "Función que retorna un iterador que produce una secuencia de resultados.",
        "Sintaxis para crear colecciones de manera concisa, como listas, diccionarios, etc.",
        "Espacios al inicio de una línea que definen bloques de código.",
        "Reglas que definen la estructura correcta del código.",
        "Valor que se pasa a una función cuando se la llama.",
        "Variable en la definición de una función que recibe el argumento.",
        "Instrucción que devuelve un valor desde una función.",
        "Contexto que contiene nombres y evita conflictos entre identificadores.",
        "Alcance donde una variable es accesible (local, global, etc.).",
        "Variable accesible desde cualquier parte del programa.",
        "Variable accesible solo dentro de una función o bloque específico.",
        "Cadena de texto que describe el propósito de un módulo, clase o función.",
        "Aplicación que proporciona herramientas para programar, como editores de código y depuradores.",
        "Entorno interactivo para ejecutar código Python línea por línea.",
        "Documento que describe nuevas características o mejoras para Python.",
        "Objeto que puede ser recorrido elemento a elemento (listas, tuplas, etc.).",
        "Objeto que permite iterar sobre un iterable.",
        "Sintaxis para crear listas de manera concisa.",
        "Selección de una parte de una secuencia (listas, cadenas, etc.).",
        "Posición de un elemento dentro de una secuencia.",
        "Identificador único en un diccionario para acceder a un valor.",
        "Datos asociados a una clave en un diccionario.",
        "Colección desordenada y sin elementos duplicados.",
        "Objeto que no puede ser modificado después de su creación.",
        "Objeto que puede ser modificado después de su creación.",
        "Sistema numérico basado en dos dígitos: 0 y 1.",
        "Expresión que ejecuta código basado en una condición.",
        "Combinación de operadores y operandos que produce un valor.",
        "Instrucción completa en el código (como una asignación o una llamada a función).",
        "Símbolo que realiza operaciones sobre valores (como `+`, `-`, `*`, `/`).",
        "Valores sobre los cuales los operadores realizan operaciones.",
        "Técnica para insertar valores dentro de cadenas de texto.",
        "Instrucción para incluir módulos en el programa.",
        "Operaciones para leer y escribir archivos.",
        "Técnica donde una función se llama a sí misma para resolver un problema.",
        "Estructura de datos que sigue el principio LIFO (último en entrar, primero en salir).",
        "Estructura de datos que sigue el principio FIFO (primero en entrar, primero en salir).",
        "Estructura de datos donde cada elemento apunta al siguiente.",
        "Estructura de datos en forma de árbol donde cada nodo tiene como máximo dos hijos.",
        "Conjunto de pasos para resolver un problema o realizar una tarea.",
        "Medida de la eficiencia de un algoritmo, generalmente en términos de tiempo o espacio.",
        "Forma de describir la complejidad de un algoritmo en función del tamaño de la entrada."
    ]
}

# Crear el DataFrame
df = pd.DataFrame(datos)

# Exportar a un archivo Excel
df.to_excel("Vocabulario_Python.xlsx", index=False)

print("El archivo 'Vocabulario_Python.xlsx' ha sido creado exitosamente.")
