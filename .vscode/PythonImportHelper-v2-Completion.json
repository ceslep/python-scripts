[
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "preguntas",
        "importPath": "preguntas",
        "description": "preguntas",
        "isExtraImport": true,
        "detail": "preguntas",
        "documentation": {}
    },
    {
        "label": "constantes",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "constantes",
        "description": "constantes",
        "detail": "constantes",
        "documentation": {}
    },
    {
        "label": "turtle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "turtle",
        "description": "turtle",
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "docx",
        "description": "docx",
        "isExtraImport": true,
        "detail": "docx",
        "documentation": {}
    },
    {
        "label": "Inches",
        "importPath": "docx.shared",
        "description": "docx.shared",
        "isExtraImport": true,
        "detail": "docx.shared",
        "documentation": {}
    },
    {
        "label": "Pt",
        "importPath": "docx.shared",
        "description": "docx.shared",
        "isExtraImport": true,
        "detail": "docx.shared",
        "documentation": {}
    },
    {
        "label": "WD_ROW_HEIGHT_RULE",
        "importPath": "docx.enum.table",
        "description": "docx.enum.table",
        "isExtraImport": true,
        "detail": "docx.enum.table",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "ANCHO",
        "kind": 5,
        "importPath": "constantes",
        "description": "constantes",
        "peekOfCode": "ANCHO = 800\nALTO = 600\nJUGADOR_TAMANO = 90\nJUGADOR_SPEED = 9\nDELTA=10\nVELOCIDAD=100",
        "detail": "constantes",
        "documentation": {}
    },
    {
        "label": "ALTO",
        "kind": 5,
        "importPath": "constantes",
        "description": "constantes",
        "peekOfCode": "ALTO = 600\nJUGADOR_TAMANO = 90\nJUGADOR_SPEED = 9\nDELTA=10\nVELOCIDAD=100",
        "detail": "constantes",
        "documentation": {}
    },
    {
        "label": "JUGADOR_TAMANO",
        "kind": 5,
        "importPath": "constantes",
        "description": "constantes",
        "peekOfCode": "JUGADOR_TAMANO = 90\nJUGADOR_SPEED = 9\nDELTA=10\nVELOCIDAD=100",
        "detail": "constantes",
        "documentation": {}
    },
    {
        "label": "JUGADOR_SPEED",
        "kind": 5,
        "importPath": "constantes",
        "description": "constantes",
        "peekOfCode": "JUGADOR_SPEED = 9\nDELTA=10\nVELOCIDAD=100",
        "detail": "constantes",
        "documentation": {}
    },
    {
        "label": "Cell",
        "kind": 6,
        "importPath": "mazes",
        "description": "mazes",
        "peekOfCode": "class Cell:\n    def __init__(self, row, col):\n        self.row = row\n        self.col = col\n        self.walls = {'top': True, 'right': True, 'bottom': True, 'left': True}\n        self.visited = False\nclass Maze:\n    def __init__(self, rows, cols):\n        self.rows = rows\n        self.cols = cols",
        "detail": "mazes",
        "documentation": {}
    },
    {
        "label": "Maze",
        "kind": 6,
        "importPath": "mazes",
        "description": "mazes",
        "peekOfCode": "class Maze:\n    def __init__(self, rows, cols):\n        self.rows = rows\n        self.cols = cols\n        self.grid = [[Cell(row, col) for col in range(cols)] for row in range(rows)]\n        self.generate()\n    def generate(self):\n        stack = []\n        current = self.grid[0][0]\n        current.visited = True",
        "detail": "mazes",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "mazes",
        "description": "mazes",
        "peekOfCode": "class Player:\n    def __init__(self, row, col):\n        self.row = row\n        self.col = col\n        self.size = CELL_SIZE // 2\n        self.x = col * CELL_SIZE + (CELL_SIZE - self.size) // 2\n        self.y = row * CELL_SIZE + (CELL_SIZE - self.size) // 2\n    def move(self, direction, maze):\n        current_cell = maze.grid[self.row][self.col]\n        new_row, new_col = self.row, self.col",
        "detail": "mazes",
        "documentation": {}
    },
    {
        "label": "draw_exit",
        "kind": 2,
        "importPath": "mazes",
        "description": "mazes",
        "peekOfCode": "def draw_exit(surface, row, col):\n    x = col * CELL_SIZE + (CELL_SIZE - 20) // 2\n    y = row * CELL_SIZE + (CELL_SIZE - 20) // 2\n    pygame.draw.rect(surface, GREEN, (x, y, 20, 20))\ndef game():\n    current_level = 1\n    total_score = 0\n    max_levels = 10\n    while current_level <= max_levels:\n        maze = Maze(MAZE_ROWS, MAZE_COLS)",
        "detail": "mazes",
        "documentation": {}
    },
    {
        "label": "game",
        "kind": 2,
        "importPath": "mazes",
        "description": "mazes",
        "peekOfCode": "def game():\n    current_level = 1\n    total_score = 0\n    max_levels = 10\n    while current_level <= max_levels:\n        maze = Maze(MAZE_ROWS, MAZE_COLS)\n        player = Player(0, 0)\n        exit_row = MAZE_ROWS - 1\n        exit_col = MAZE_COLS - 1\n        running = True",
        "detail": "mazes",
        "documentation": {}
    },
    {
        "label": "SCREEN_WIDTH",
        "kind": 5,
        "importPath": "mazes",
        "description": "mazes",
        "peekOfCode": "SCREEN_WIDTH = 800\nSCREEN_HEIGHT = 600\nCELL_SIZE = 40\nMAZE_ROWS = SCREEN_HEIGHT // CELL_SIZE\nMAZE_COLS = SCREEN_WIDTH // CELL_SIZE\n# Colores\nBLACK = (0, 0, 0)\nWHITE = (255, 255, 255)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)",
        "detail": "mazes",
        "documentation": {}
    },
    {
        "label": "SCREEN_HEIGHT",
        "kind": 5,
        "importPath": "mazes",
        "description": "mazes",
        "peekOfCode": "SCREEN_HEIGHT = 600\nCELL_SIZE = 40\nMAZE_ROWS = SCREEN_HEIGHT // CELL_SIZE\nMAZE_COLS = SCREEN_WIDTH // CELL_SIZE\n# Colores\nBLACK = (0, 0, 0)\nWHITE = (255, 255, 255)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nBLUE = (0, 0, 255)",
        "detail": "mazes",
        "documentation": {}
    },
    {
        "label": "CELL_SIZE",
        "kind": 5,
        "importPath": "mazes",
        "description": "mazes",
        "peekOfCode": "CELL_SIZE = 40\nMAZE_ROWS = SCREEN_HEIGHT // CELL_SIZE\nMAZE_COLS = SCREEN_WIDTH // CELL_SIZE\n# Colores\nBLACK = (0, 0, 0)\nWHITE = (255, 255, 255)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nBLUE = (0, 0, 255)\n# Inicializar pantalla",
        "detail": "mazes",
        "documentation": {}
    },
    {
        "label": "MAZE_ROWS",
        "kind": 5,
        "importPath": "mazes",
        "description": "mazes",
        "peekOfCode": "MAZE_ROWS = SCREEN_HEIGHT // CELL_SIZE\nMAZE_COLS = SCREEN_WIDTH // CELL_SIZE\n# Colores\nBLACK = (0, 0, 0)\nWHITE = (255, 255, 255)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nBLUE = (0, 0, 255)\n# Inicializar pantalla\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))",
        "detail": "mazes",
        "documentation": {}
    },
    {
        "label": "MAZE_COLS",
        "kind": 5,
        "importPath": "mazes",
        "description": "mazes",
        "peekOfCode": "MAZE_COLS = SCREEN_WIDTH // CELL_SIZE\n# Colores\nBLACK = (0, 0, 0)\nWHITE = (255, 255, 255)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nBLUE = (0, 0, 255)\n# Inicializar pantalla\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption(\"Laberinto de 10 Niveles\")",
        "detail": "mazes",
        "documentation": {}
    },
    {
        "label": "BLACK",
        "kind": 5,
        "importPath": "mazes",
        "description": "mazes",
        "peekOfCode": "BLACK = (0, 0, 0)\nWHITE = (255, 255, 255)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nBLUE = (0, 0, 255)\n# Inicializar pantalla\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption(\"Laberinto de 10 Niveles\")\nclock = pygame.time.Clock()\nclass Cell:",
        "detail": "mazes",
        "documentation": {}
    },
    {
        "label": "WHITE",
        "kind": 5,
        "importPath": "mazes",
        "description": "mazes",
        "peekOfCode": "WHITE = (255, 255, 255)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nBLUE = (0, 0, 255)\n# Inicializar pantalla\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption(\"Laberinto de 10 Niveles\")\nclock = pygame.time.Clock()\nclass Cell:\n    def __init__(self, row, col):",
        "detail": "mazes",
        "documentation": {}
    },
    {
        "label": "RED",
        "kind": 5,
        "importPath": "mazes",
        "description": "mazes",
        "peekOfCode": "RED = (255, 0, 0)\nGREEN = (0, 255, 0)\nBLUE = (0, 0, 255)\n# Inicializar pantalla\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption(\"Laberinto de 10 Niveles\")\nclock = pygame.time.Clock()\nclass Cell:\n    def __init__(self, row, col):\n        self.row = row",
        "detail": "mazes",
        "documentation": {}
    },
    {
        "label": "GREEN",
        "kind": 5,
        "importPath": "mazes",
        "description": "mazes",
        "peekOfCode": "GREEN = (0, 255, 0)\nBLUE = (0, 0, 255)\n# Inicializar pantalla\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption(\"Laberinto de 10 Niveles\")\nclock = pygame.time.Clock()\nclass Cell:\n    def __init__(self, row, col):\n        self.row = row\n        self.col = col",
        "detail": "mazes",
        "documentation": {}
    },
    {
        "label": "BLUE",
        "kind": 5,
        "importPath": "mazes",
        "description": "mazes",
        "peekOfCode": "BLUE = (0, 0, 255)\n# Inicializar pantalla\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption(\"Laberinto de 10 Niveles\")\nclock = pygame.time.Clock()\nclass Cell:\n    def __init__(self, row, col):\n        self.row = row\n        self.col = col\n        self.walls = {'top': True, 'right': True, 'bottom': True, 'left': True}",
        "detail": "mazes",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "mazes",
        "description": "mazes",
        "peekOfCode": "screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption(\"Laberinto de 10 Niveles\")\nclock = pygame.time.Clock()\nclass Cell:\n    def __init__(self, row, col):\n        self.row = row\n        self.col = col\n        self.walls = {'top': True, 'right': True, 'bottom': True, 'left': True}\n        self.visited = False\nclass Maze:",
        "detail": "mazes",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "mazes",
        "description": "mazes",
        "peekOfCode": "clock = pygame.time.Clock()\nclass Cell:\n    def __init__(self, row, col):\n        self.row = row\n        self.col = col\n        self.walls = {'top': True, 'right': True, 'bottom': True, 'left': True}\n        self.visited = False\nclass Maze:\n    def __init__(self, rows, cols):\n        self.rows = rows",
        "detail": "mazes",
        "documentation": {}
    },
    {
        "label": "draw_text",
        "kind": 2,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "def draw_text(text, font, color, surface, x, y):\n    \"\"\"Dibuja texto centrado en (x, y).\"\"\"\n    render_text = font.render(text, True, color)\n    rect = render_text.get_rect()\n    rect.center = (x, y)\n    surface.blit(render_text, rect)\ndef mostrar_marcador(score1, score2, turno):\n    \"\"\"Dibuja el marcador de puntajes y el turno actual.\"\"\"\n    marcador_text = f\"Equipo 1: {score1}  |  Equipo 2: {score2}\"\n    turno_text = f\"Turno de: Equipo {turno}\"",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "mostrar_marcador",
        "kind": 2,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "def mostrar_marcador(score1, score2, turno):\n    \"\"\"Dibuja el marcador de puntajes y el turno actual.\"\"\"\n    marcador_text = f\"Equipo 1: {score1}  |  Equipo 2: {score2}\"\n    turno_text = f\"Turno de: Equipo {turno}\"\n    text_surface_marcador = FONT_SCORE.render(marcador_text, True, BLACK)\n    SCREEN.blit(text_surface_marcador, (20, 10))\n    text_surface_turno = FONT_SCORE.render(turno_text, True, BLACK)\n    SCREEN.blit(text_surface_turno, (WIDTH - 180, 10))\ndef mostrar_pregunta(pregunta_dict, hovered_index, turno):\n    \"\"\"",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "mostrar_pregunta",
        "kind": 2,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "def mostrar_pregunta(pregunta_dict, hovered_index, turno):\n    \"\"\"\n    Muestra la pregunta y sus opciones (enumeradas) en pantalla y retorna\n    la lista de rectángulos correspondientes a cada opción.\n    \"\"\"\n    # Dibujar imagen de fondo y aclararla\n    if background:\n        SCREEN.blit(background, (0, 0))\n        overlay = pygame.Surface((WIDTH, HEIGHT), pygame.SRCALPHA)\n        overlay.fill((255, 255, 255, 90))  # Ajusta el valor para aclarar la imagen",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "mostrar_resultado_final",
        "kind": 2,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "def mostrar_resultado_final(score1, score2, total_preguntas):\n    \"\"\"Muestra la pantalla final con los resultados.\"\"\"\n    if background:\n        SCREEN.blit(background, (0, 0))\n    else:\n        SCREEN.fill(WHITE)\n    draw_text(\"¡Fin de la Trivia!\", FONT_TITLE, PURPLE, SCREEN, WIDTH // 2, HEIGHT // 2 - 50)\n    resultado_text = f\"Equipo 1: {score1} puntos  |  Equipo 2: {score2} puntos\"\n    draw_text(resultado_text, FONT, BLACK, SCREEN, WIDTH // 2, HEIGHT // 2)\n    final_msg = \"Gracias por participar y conmemorar el Día Internacional de la Mujer.\"",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "def main():\n    global indice_pregunta, score_team1, score_team2, turno_equipo, game_over\n    clock = pygame.time.Clock()\n    hovered_index = -1\n    # Mapeo de teclas para las opciones: a->0, b->1, c->2, d->3\n    key_mapping = {\n        pygame.K_a: 0,\n        pygame.K_b: 1,\n        pygame.K_c: 2,\n        pygame.K_d: 3",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "procesar_respuesta",
        "kind": 2,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "def procesar_respuesta(current_question, respuesta):\n    \"\"\"\n    Procesa la respuesta (ya sea por mouse o teclado), reproduce el sonido\n    correspondiente, actualiza la puntuación, cambia el turno y avanza la pregunta.\n    \"\"\"\n    global indice_pregunta, score_team1, score_team2, turno_equipo, hovered_index\n    if respuesta == current_question[\"respuesta_correcta\"]:\n        if turno_equipo == 1:\n            score_team1 += 1\n        else:",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "SCREEN",
        "kind": 5,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "SCREEN = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption(\"Trivia - Día Internacional de la Mujer\")\n# -------------------------\n#  Colores\n# -------------------------\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\nPURPLE = (128, 0, 128)\nGRAY = (200, 200, 200)\nHOVER_COLOR = (150, 150, 150)   # Color al pasar el mouse",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "WHITE",
        "kind": 5,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "WHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\nPURPLE = (128, 0, 128)\nGRAY = (200, 200, 200)\nHOVER_COLOR = (150, 150, 150)   # Color al pasar el mouse\n# -------------------------\n#  Fuentes de texto\n# -------------------------\nFONT = pygame.font.SysFont(\"Arial\", 24)\nFONT_TITLE = pygame.font.SysFont(\"Arial\", 36, bold=True)",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "BLACK",
        "kind": 5,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "BLACK = (0, 0, 0)\nPURPLE = (128, 0, 128)\nGRAY = (200, 200, 200)\nHOVER_COLOR = (150, 150, 150)   # Color al pasar el mouse\n# -------------------------\n#  Fuentes de texto\n# -------------------------\nFONT = pygame.font.SysFont(\"Arial\", 24)\nFONT_TITLE = pygame.font.SysFont(\"Arial\", 36, bold=True)\nFONT_SCORE = pygame.font.SysFont(\"Arial\", 20, bold=True)",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "PURPLE",
        "kind": 5,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "PURPLE = (128, 0, 128)\nGRAY = (200, 200, 200)\nHOVER_COLOR = (150, 150, 150)   # Color al pasar el mouse\n# -------------------------\n#  Fuentes de texto\n# -------------------------\nFONT = pygame.font.SysFont(\"Arial\", 24)\nFONT_TITLE = pygame.font.SysFont(\"Arial\", 36, bold=True)\nFONT_SCORE = pygame.font.SysFont(\"Arial\", 20, bold=True)\n# -------------------------",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "GRAY",
        "kind": 5,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "GRAY = (200, 200, 200)\nHOVER_COLOR = (150, 150, 150)   # Color al pasar el mouse\n# -------------------------\n#  Fuentes de texto\n# -------------------------\nFONT = pygame.font.SysFont(\"Arial\", 24)\nFONT_TITLE = pygame.font.SysFont(\"Arial\", 36, bold=True)\nFONT_SCORE = pygame.font.SysFont(\"Arial\", 20, bold=True)\n# -------------------------\n#  Cargar sonidos",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "HOVER_COLOR",
        "kind": 5,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "HOVER_COLOR = (150, 150, 150)   # Color al pasar el mouse\n# -------------------------\n#  Fuentes de texto\n# -------------------------\nFONT = pygame.font.SysFont(\"Arial\", 24)\nFONT_TITLE = pygame.font.SysFont(\"Arial\", 36, bold=True)\nFONT_SCORE = pygame.font.SysFont(\"Arial\", 20, bold=True)\n# -------------------------\n#  Cargar sonidos\n# -------------------------",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "FONT",
        "kind": 5,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "FONT = pygame.font.SysFont(\"Arial\", 24)\nFONT_TITLE = pygame.font.SysFont(\"Arial\", 36, bold=True)\nFONT_SCORE = pygame.font.SysFont(\"Arial\", 20, bold=True)\n# -------------------------\n#  Cargar sonidos\n# -------------------------\ntry:\n    correct_sound = pygame.mixer.Sound(\"assets/correct.mp3\")\n    incorrect_sound = pygame.mixer.Sound(\"assets/incorrect.mp3\")\nexcept pygame.error:",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "FONT_TITLE",
        "kind": 5,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "FONT_TITLE = pygame.font.SysFont(\"Arial\", 36, bold=True)\nFONT_SCORE = pygame.font.SysFont(\"Arial\", 20, bold=True)\n# -------------------------\n#  Cargar sonidos\n# -------------------------\ntry:\n    correct_sound = pygame.mixer.Sound(\"assets/correct.mp3\")\n    incorrect_sound = pygame.mixer.Sound(\"assets/incorrect.mp3\")\nexcept pygame.error:\n    correct_sound = None",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "FONT_SCORE",
        "kind": 5,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "FONT_SCORE = pygame.font.SysFont(\"Arial\", 20, bold=True)\n# -------------------------\n#  Cargar sonidos\n# -------------------------\ntry:\n    correct_sound = pygame.mixer.Sound(\"assets/correct.mp3\")\n    incorrect_sound = pygame.mixer.Sound(\"assets/incorrect.mp3\")\nexcept pygame.error:\n    correct_sound = None\n    incorrect_sound = None",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "indice_pregunta",
        "kind": 5,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "indice_pregunta = 0  # Índice de la pregunta actual\nscore_team1 = 0\nscore_team2 = 0\nturno_equipo = 1  # Comienza el Equipo 1\ngame_over = False\ndef draw_text(text, font, color, surface, x, y):\n    \"\"\"Dibuja texto centrado en (x, y).\"\"\"\n    render_text = font.render(text, True, color)\n    rect = render_text.get_rect()\n    rect.center = (x, y)",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "score_team1",
        "kind": 5,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "score_team1 = 0\nscore_team2 = 0\nturno_equipo = 1  # Comienza el Equipo 1\ngame_over = False\ndef draw_text(text, font, color, surface, x, y):\n    \"\"\"Dibuja texto centrado en (x, y).\"\"\"\n    render_text = font.render(text, True, color)\n    rect = render_text.get_rect()\n    rect.center = (x, y)\n    surface.blit(render_text, rect)",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "score_team2",
        "kind": 5,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "score_team2 = 0\nturno_equipo = 1  # Comienza el Equipo 1\ngame_over = False\ndef draw_text(text, font, color, surface, x, y):\n    \"\"\"Dibuja texto centrado en (x, y).\"\"\"\n    render_text = font.render(text, True, color)\n    rect = render_text.get_rect()\n    rect.center = (x, y)\n    surface.blit(render_text, rect)\ndef mostrar_marcador(score1, score2, turno):",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "turno_equipo",
        "kind": 5,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "turno_equipo = 1  # Comienza el Equipo 1\ngame_over = False\ndef draw_text(text, font, color, surface, x, y):\n    \"\"\"Dibuja texto centrado en (x, y).\"\"\"\n    render_text = font.render(text, True, color)\n    rect = render_text.get_rect()\n    rect.center = (x, y)\n    surface.blit(render_text, rect)\ndef mostrar_marcador(score1, score2, turno):\n    \"\"\"Dibuja el marcador de puntajes y el turno actual.\"\"\"",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "game_over",
        "kind": 5,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "game_over = False\ndef draw_text(text, font, color, surface, x, y):\n    \"\"\"Dibuja texto centrado en (x, y).\"\"\"\n    render_text = font.render(text, True, color)\n    rect = render_text.get_rect()\n    rect.center = (x, y)\n    surface.blit(render_text, rect)\ndef mostrar_marcador(score1, score2, turno):\n    \"\"\"Dibuja el marcador de puntajes y el turno actual.\"\"\"\n    marcador_text = f\"Equipo 1: {score1}  |  Equipo 2: {score2}\"",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "screen = pygame.display.set_mode((constantes.ANCHO, constantes.ALTO))\nclock = pygame.time.Clock()\n# Cargar y escalar los sprites correctamente\nplayer_sprites = []\nfor i in range(6):  # Suponiendo que tienes 6 imágenes\n    img = pygame.image.load(\n        f\"assets/Walking/0_Fallen_Angels_Walking_00{i}.png\").convert_alpha()\n    img = pygame.transform.scale(\n        img, (constantes.JUGADOR_TAMANO, constantes.JUGADOR_TAMANO))  # Escalar correctamente\n    player_sprites.append(img)  # Guardar imagen escalada en la lista",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "clock = pygame.time.Clock()\n# Cargar y escalar los sprites correctamente\nplayer_sprites = []\nfor i in range(6):  # Suponiendo que tienes 6 imágenes\n    img = pygame.image.load(\n        f\"assets/Walking/0_Fallen_Angels_Walking_00{i}.png\").convert_alpha()\n    img = pygame.transform.scale(\n        img, (constantes.JUGADOR_TAMANO, constantes.JUGADOR_TAMANO))  # Escalar correctamente\n    player_sprites.append(img)  # Guardar imagen escalada en la lista\n# 🎯 **Centrar el jugador en la pantalla**",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "player_sprites",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "player_sprites = []\nfor i in range(6):  # Suponiendo que tienes 6 imágenes\n    img = pygame.image.load(\n        f\"assets/Walking/0_Fallen_Angels_Walking_00{i}.png\").convert_alpha()\n    img = pygame.transform.scale(\n        img, (constantes.JUGADOR_TAMANO, constantes.JUGADOR_TAMANO))  # Escalar correctamente\n    player_sprites.append(img)  # Guardar imagen escalada en la lista\n# 🎯 **Centrar el jugador en la pantalla**\nplayer_pos = pygame.Vector2(\n    (constantes.ANCHO - constantes.JUGADOR_TAMANO) // 2,",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "player_pos",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "player_pos = pygame.Vector2(\n    (constantes.ANCHO - constantes.JUGADOR_TAMANO) // 2,\n    (constantes.ALTO - constantes.JUGADOR_TAMANO) // 2\n)\nvelocidad = constantes.VELOCIDAD\nframe_index = 0\nanimation_speed = constantes.JUGADOR_SPEED\nframe_counter = 0\nmirando_izquierda = False\n# 📌 **Generar obstáculos asegurando que no aparezcan cerca del jugador**",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "velocidad",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "velocidad = constantes.VELOCIDAD\nframe_index = 0\nanimation_speed = constantes.JUGADOR_SPEED\nframe_counter = 0\nmirando_izquierda = False\n# 📌 **Generar obstáculos asegurando que no aparezcan cerca del jugador**\njugador_radio_seguro = 150  # Distancia mínima desde el jugador\nobstaculos = []\nfor _ in range(5):  # Número de obstáculos\n    while True:",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "frame_index",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "frame_index = 0\nanimation_speed = constantes.JUGADOR_SPEED\nframe_counter = 0\nmirando_izquierda = False\n# 📌 **Generar obstáculos asegurando que no aparezcan cerca del jugador**\njugador_radio_seguro = 150  # Distancia mínima desde el jugador\nobstaculos = []\nfor _ in range(5):  # Número de obstáculos\n    while True:\n        obs_x = random.randint(50, constantes.ANCHO - 50)",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "animation_speed",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "animation_speed = constantes.JUGADOR_SPEED\nframe_counter = 0\nmirando_izquierda = False\n# 📌 **Generar obstáculos asegurando que no aparezcan cerca del jugador**\njugador_radio_seguro = 150  # Distancia mínima desde el jugador\nobstaculos = []\nfor _ in range(5):  # Número de obstáculos\n    while True:\n        obs_x = random.randint(50, constantes.ANCHO - 50)\n        obs_y = random.randint(50, constantes.ALTO - 50)",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "frame_counter",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "frame_counter = 0\nmirando_izquierda = False\n# 📌 **Generar obstáculos asegurando que no aparezcan cerca del jugador**\njugador_radio_seguro = 150  # Distancia mínima desde el jugador\nobstaculos = []\nfor _ in range(5):  # Número de obstáculos\n    while True:\n        obs_x = random.randint(50, constantes.ANCHO - 50)\n        obs_y = random.randint(50, constantes.ALTO - 50)\n        # Calcular distancia al jugador",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "mirando_izquierda",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "mirando_izquierda = False\n# 📌 **Generar obstáculos asegurando que no aparezcan cerca del jugador**\njugador_radio_seguro = 150  # Distancia mínima desde el jugador\nobstaculos = []\nfor _ in range(5):  # Número de obstáculos\n    while True:\n        obs_x = random.randint(50, constantes.ANCHO - 50)\n        obs_y = random.randint(50, constantes.ALTO - 50)\n        # Calcular distancia al jugador\n        distancia = ((obs_x - player_pos.x) ** 2 + (obs_y - player_pos.y) ** 2) ** 0.5",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "jugador_radio_seguro",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "jugador_radio_seguro = 150  # Distancia mínima desde el jugador\nobstaculos = []\nfor _ in range(5):  # Número de obstáculos\n    while True:\n        obs_x = random.randint(50, constantes.ANCHO - 50)\n        obs_y = random.randint(50, constantes.ALTO - 50)\n        # Calcular distancia al jugador\n        distancia = ((obs_x - player_pos.x) ** 2 + (obs_y - player_pos.y) ** 2) ** 0.5\n        if distancia > jugador_radio_seguro:  # Si el obstáculo está suficientemente lejos\n            if random.choice([True, False]):",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "obstaculos",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "obstaculos = []\nfor _ in range(5):  # Número de obstáculos\n    while True:\n        obs_x = random.randint(50, constantes.ANCHO - 50)\n        obs_y = random.randint(50, constantes.ALTO - 50)\n        # Calcular distancia al jugador\n        distancia = ((obs_x - player_pos.x) ** 2 + (obs_y - player_pos.y) ** 2) ** 0.5\n        if distancia > jugador_radio_seguro:  # Si el obstáculo está suficientemente lejos\n            if random.choice([True, False]):\n                ancho = random.randint(50, 120)",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "obstaculo_masks",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "obstaculo_masks = [pygame.mask.Mask((obs[1].width, obs[1].height), fill=True) if obs[0] == \"rect\" else None for obs in obstaculos]\nrunning = True\nwhile running:\n    dt = clock.tick(60) / 1000.0  # Control de FPS\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n    # Lógica de movimiento\n    keys = pygame.key.get_pressed()\n    moving = False",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "running = True\nwhile running:\n    dt = clock.tick(60) / 1000.0  # Control de FPS\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n    # Lógica de movimiento\n    keys = pygame.key.get_pressed()\n    moving = False\n    nueva_pos = player_pos.copy()",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "ANCHO",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "ANCHO = 800\nALTO = 600\n# Crear la ventana\nventana = pygame.display.set_mode((ANCHO, ALTO))\npygame.display.set_caption(\"Evita los Obstáculos\")\n# Colores\nBLANCO = (255, 255, 255)\nNEGRO = (0, 0, 0)\nROJO = (255, 0, 0)\nVERDE = (0, 255, 0)",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "ALTO",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "ALTO = 600\n# Crear la ventana\nventana = pygame.display.set_mode((ANCHO, ALTO))\npygame.display.set_caption(\"Evita los Obstáculos\")\n# Colores\nBLANCO = (255, 255, 255)\nNEGRO = (0, 0, 0)\nROJO = (255, 0, 0)\nVERDE = (0, 255, 0)\nAZUL = (0, 0, 255)",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "ventana",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "ventana = pygame.display.set_mode((ANCHO, ALTO))\npygame.display.set_caption(\"Evita los Obstáculos\")\n# Colores\nBLANCO = (255, 255, 255)\nNEGRO = (0, 0, 0)\nROJO = (255, 0, 0)\nVERDE = (0, 255, 0)\nAZUL = (0, 0, 255)\n# Bucle principal del juego\nreloj = pygame.time.Clock()",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "BLANCO",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "BLANCO = (255, 255, 255)\nNEGRO = (0, 0, 0)\nROJO = (255, 0, 0)\nVERDE = (0, 255, 0)\nAZUL = (0, 0, 255)\n# Bucle principal del juego\nreloj = pygame.time.Clock()\n# Variables del jugador\njugador_tamano = 50\njugador_x = ANCHO // 2 - jugador_tamano // 2",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "NEGRO",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "NEGRO = (0, 0, 0)\nROJO = (255, 0, 0)\nVERDE = (0, 255, 0)\nAZUL = (0, 0, 255)\n# Bucle principal del juego\nreloj = pygame.time.Clock()\n# Variables del jugador\njugador_tamano = 50\njugador_x = ANCHO // 2 - jugador_tamano // 2\njugador_y = ALTO - jugador_tamano - 10",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "ROJO",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "ROJO = (255, 0, 0)\nVERDE = (0, 255, 0)\nAZUL = (0, 0, 255)\n# Bucle principal del juego\nreloj = pygame.time.Clock()\n# Variables del jugador\njugador_tamano = 50\njugador_x = ANCHO // 2 - jugador_tamano // 2\njugador_y = ALTO - jugador_tamano - 10\nvelocidad_jugador = 5",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "VERDE",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "VERDE = (0, 255, 0)\nAZUL = (0, 0, 255)\n# Bucle principal del juego\nreloj = pygame.time.Clock()\n# Variables del jugador\njugador_tamano = 50\njugador_x = ANCHO // 2 - jugador_tamano // 2\njugador_y = ALTO - jugador_tamano - 10\nvelocidad_jugador = 5\n# Lista de obstáculos",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "AZUL",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "AZUL = (0, 0, 255)\n# Bucle principal del juego\nreloj = pygame.time.Clock()\n# Variables del jugador\njugador_tamano = 50\njugador_x = ANCHO // 2 - jugador_tamano // 2\njugador_y = ALTO - jugador_tamano - 10\nvelocidad_jugador = 5\n# Lista de obstáculos\nobstaculos = []",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "reloj",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "reloj = pygame.time.Clock()\n# Variables del jugador\njugador_tamano = 50\njugador_x = ANCHO // 2 - jugador_tamano // 2\njugador_y = ALTO - jugador_tamano - 10\nvelocidad_jugador = 5\n# Lista de obstáculos\nobstaculos = []\nvelocidad_obstaculo = 5\nfrecuencia_obstaculos = 50  # Controla la frecuencia de aparición",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "jugador_tamano",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "jugador_tamano = 50\njugador_x = ANCHO // 2 - jugador_tamano // 2\njugador_y = ALTO - jugador_tamano - 10\nvelocidad_jugador = 5\n# Lista de obstáculos\nobstaculos = []\nvelocidad_obstaculo = 5\nfrecuencia_obstaculos = 50  # Controla la frecuencia de aparición\n# Puntuación\npuntuacion = 0",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "jugador_x",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "jugador_x = ANCHO // 2 - jugador_tamano // 2\njugador_y = ALTO - jugador_tamano - 10\nvelocidad_jugador = 5\n# Lista de obstáculos\nobstaculos = []\nvelocidad_obstaculo = 5\nfrecuencia_obstaculos = 50  # Controla la frecuencia de aparición\n# Puntuación\npuntuacion = 0\nfuente = pygame.font.SysFont(None, 36)",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "jugador_y",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "jugador_y = ALTO - jugador_tamano - 10\nvelocidad_jugador = 5\n# Lista de obstáculos\nobstaculos = []\nvelocidad_obstaculo = 5\nfrecuencia_obstaculos = 50  # Controla la frecuencia de aparición\n# Puntuación\npuntuacion = 0\nfuente = pygame.font.SysFont(None, 36)\n# Bucle principal",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "velocidad_jugador",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "velocidad_jugador = 5\n# Lista de obstáculos\nobstaculos = []\nvelocidad_obstaculo = 5\nfrecuencia_obstaculos = 50  # Controla la frecuencia de aparición\n# Puntuación\npuntuacion = 0\nfuente = pygame.font.SysFont(None, 36)\n# Bucle principal\ncorriendo = True",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "obstaculos",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "obstaculos = []\nvelocidad_obstaculo = 5\nfrecuencia_obstaculos = 50  # Controla la frecuencia de aparición\n# Puntuación\npuntuacion = 0\nfuente = pygame.font.SysFont(None, 36)\n# Bucle principal\ncorriendo = True\ncontador_frames = 0\nwhile corriendo:",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "velocidad_obstaculo",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "velocidad_obstaculo = 5\nfrecuencia_obstaculos = 50  # Controla la frecuencia de aparición\n# Puntuación\npuntuacion = 0\nfuente = pygame.font.SysFont(None, 36)\n# Bucle principal\ncorriendo = True\ncontador_frames = 0\nwhile corriendo:\n    # Manejar eventos",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "frecuencia_obstaculos",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "frecuencia_obstaculos = 50  # Controla la frecuencia de aparición\n# Puntuación\npuntuacion = 0\nfuente = pygame.font.SysFont(None, 36)\n# Bucle principal\ncorriendo = True\ncontador_frames = 0\nwhile corriendo:\n    # Manejar eventos\n    for evento in pygame.event.get():",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "puntuacion",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "puntuacion = 0\nfuente = pygame.font.SysFont(None, 36)\n# Bucle principal\ncorriendo = True\ncontador_frames = 0\nwhile corriendo:\n    # Manejar eventos\n    for evento in pygame.event.get():\n        if evento.type == pygame.QUIT:\n            corriendo = False",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "fuente",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "fuente = pygame.font.SysFont(None, 36)\n# Bucle principal\ncorriendo = True\ncontador_frames = 0\nwhile corriendo:\n    # Manejar eventos\n    for evento in pygame.event.get():\n        if evento.type == pygame.QUIT:\n            corriendo = False\n    # Obtener todas las teclas presionadas",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "corriendo",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "corriendo = True\ncontador_frames = 0\nwhile corriendo:\n    # Manejar eventos\n    for evento in pygame.event.get():\n        if evento.type == pygame.QUIT:\n            corriendo = False\n    # Obtener todas las teclas presionadas\n    teclas = pygame.key.get_pressed()\n    if teclas[pygame.K_LEFT] or teclas[pygame.K_a]:",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "contador_frames",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "contador_frames = 0\nwhile corriendo:\n    # Manejar eventos\n    for evento in pygame.event.get():\n        if evento.type == pygame.QUIT:\n            corriendo = False\n    # Obtener todas las teclas presionadas\n    teclas = pygame.key.get_pressed()\n    if teclas[pygame.K_LEFT] or teclas[pygame.K_a]:\n        jugador_x -= velocidad_jugador",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "texto_fin",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "texto_fin = fuente.render(\"¡Juego Terminado!\", True, NEGRO)\ntexto_puntuacion_final = fuente.render(f\"Puntuación Final: {puntuacion}\", True, NEGRO)\nventana.blit(texto_fin, (ANCHO // 2 - texto_fin.get_width() // 2, ALTO // 2 - 50))\nventana.blit(texto_puntuacion_final, (ANCHO // 2 - texto_puntuacion_final.get_width() // 2, ALTO // 2))\npygame.display.flip()\n# Esperar unos segundos antes de cerrar\npygame.time.wait(3000)\n# Finalizar Pygame\npygame.quit()\nsys.exit()",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "texto_puntuacion_final",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "texto_puntuacion_final = fuente.render(f\"Puntuación Final: {puntuacion}\", True, NEGRO)\nventana.blit(texto_fin, (ANCHO // 2 - texto_fin.get_width() // 2, ALTO // 2 - 50))\nventana.blit(texto_puntuacion_final, (ANCHO // 2 - texto_puntuacion_final.get_width() // 2, ALTO // 2))\npygame.display.flip()\n# Esperar unos segundos antes de cerrar\npygame.time.wait(3000)\n# Finalizar Pygame\npygame.quit()\nsys.exit()",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "preguntas",
        "kind": 5,
        "importPath": "preguntas",
        "description": "preguntas",
        "peekOfCode": "preguntas = [\n    {\n        \"pregunta\": \"1) ¿En qué año la ONU oficializó el Día Internacional de la Mujer?\",\n        \"opciones\": [\"1945\", \"1975\", \"1980\", \"2000\"],\n        \"respuesta_correcta\": 1,\n        \"explicacion\": \"La ONU oficializó el Día Internacional de la Mujer en 1975.\"\n    },\n    {\n        \"pregunta\": \"2) ¿Cuál es la capital del departamento de Risaralda?\",\n        \"opciones\": [\"Manizales\", \"Armenia\", \"Pereira\", \"Dosquebradas\"],",
        "detail": "preguntas",
        "documentation": {}
    },
    {
        "label": "pantalla",
        "kind": 5,
        "importPath": "pturtle",
        "description": "pturtle",
        "peekOfCode": "pantalla = turtle.Screen()\npantalla.title(\"Polígono con líneas al centro\")\ntortuga = turtle.Turtle()\ntortuga.speed(3)          # Velocidad de la tortuga (1 = lento, 10 = rápido, 0 = sin animación)\ntortuga.color(\"blue\")     # Color para dibujar el polígono\n# Parámetros del polígono\nn_lados = 5               # Cambia este valor para probar con distintos polígonos (3=triángulo, 4=cuadrado, etc.)\ndistancia = 100           # Longitud de cada lado\nangulo = 360 / n_lados    # Ángulo de giro para un polígono regular\n# Lista para guardar los vértices",
        "detail": "pturtle",
        "documentation": {}
    },
    {
        "label": "tortuga",
        "kind": 5,
        "importPath": "pturtle",
        "description": "pturtle",
        "peekOfCode": "tortuga = turtle.Turtle()\ntortuga.speed(3)          # Velocidad de la tortuga (1 = lento, 10 = rápido, 0 = sin animación)\ntortuga.color(\"blue\")     # Color para dibujar el polígono\n# Parámetros del polígono\nn_lados = 5               # Cambia este valor para probar con distintos polígonos (3=triángulo, 4=cuadrado, etc.)\ndistancia = 100           # Longitud de cada lado\nangulo = 360 / n_lados    # Ángulo de giro para un polígono regular\n# Lista para guardar los vértices\nvertices = []\n# DIBUJAR EL POLÍGONO",
        "detail": "pturtle",
        "documentation": {}
    },
    {
        "label": "n_lados",
        "kind": 5,
        "importPath": "pturtle",
        "description": "pturtle",
        "peekOfCode": "n_lados = 5               # Cambia este valor para probar con distintos polígonos (3=triángulo, 4=cuadrado, etc.)\ndistancia = 100           # Longitud de cada lado\nangulo = 360 / n_lados    # Ángulo de giro para un polígono regular\n# Lista para guardar los vértices\nvertices = []\n# DIBUJAR EL POLÍGONO\nfor _ in range(n_lados):\n    # Guardamos la posición actual (vértice)\n    vertices.append(tortuga.pos())\n    # Avanzamos y giramos para dibujar el siguiente lado",
        "detail": "pturtle",
        "documentation": {}
    },
    {
        "label": "distancia",
        "kind": 5,
        "importPath": "pturtle",
        "description": "pturtle",
        "peekOfCode": "distancia = 100           # Longitud de cada lado\nangulo = 360 / n_lados    # Ángulo de giro para un polígono regular\n# Lista para guardar los vértices\nvertices = []\n# DIBUJAR EL POLÍGONO\nfor _ in range(n_lados):\n    # Guardamos la posición actual (vértice)\n    vertices.append(tortuga.pos())\n    # Avanzamos y giramos para dibujar el siguiente lado\n    tortuga.forward(distancia)",
        "detail": "pturtle",
        "documentation": {}
    },
    {
        "label": "angulo",
        "kind": 5,
        "importPath": "pturtle",
        "description": "pturtle",
        "peekOfCode": "angulo = 360 / n_lados    # Ángulo de giro para un polígono regular\n# Lista para guardar los vértices\nvertices = []\n# DIBUJAR EL POLÍGONO\nfor _ in range(n_lados):\n    # Guardamos la posición actual (vértice)\n    vertices.append(tortuga.pos())\n    # Avanzamos y giramos para dibujar el siguiente lado\n    tortuga.forward(distancia)\n    tortuga.right(angulo)",
        "detail": "pturtle",
        "documentation": {}
    },
    {
        "label": "vertices",
        "kind": 5,
        "importPath": "pturtle",
        "description": "pturtle",
        "peekOfCode": "vertices = []\n# DIBUJAR EL POLÍGONO\nfor _ in range(n_lados):\n    # Guardamos la posición actual (vértice)\n    vertices.append(tortuga.pos())\n    # Avanzamos y giramos para dibujar el siguiente lado\n    tortuga.forward(distancia)\n    tortuga.right(angulo)\n# CAMBIAMOS DE COLOR PARA LAS LÍNEAS AL CENTRO\ntortuga.color(\"red\")",
        "detail": "pturtle",
        "documentation": {}
    },
    {
        "label": "document",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "document = Document()\n# Configurar tamaño de página y márgenes para tamaño carta (8.5 x 11 pulgadas)\nsection = document.sections[0]\nsection.page_width = Inches(8.5)\nsection.page_height = Inches(11)\nsection.top_margin = Inches(0.5)\nsection.bottom_margin = Inches(0.5)\nsection.left_margin = Inches(0.5)\nsection.right_margin = Inches(0.5)\n# Agregar la imagen en la parte superior izquierda",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "section",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "section = document.sections[0]\nsection.page_width = Inches(8.5)\nsection.page_height = Inches(11)\nsection.top_margin = Inches(0.5)\nsection.bottom_margin = Inches(0.5)\nsection.left_margin = Inches(0.5)\nsection.right_margin = Inches(0.5)\n# Agregar la imagen en la parte superior izquierda\nimg_paragraph = document.add_paragraph()\nimg_paragraph.alignment = 0  # Alineación izquierda",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "section.page_width",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "section.page_width = Inches(8.5)\nsection.page_height = Inches(11)\nsection.top_margin = Inches(0.5)\nsection.bottom_margin = Inches(0.5)\nsection.left_margin = Inches(0.5)\nsection.right_margin = Inches(0.5)\n# Agregar la imagen en la parte superior izquierda\nimg_paragraph = document.add_paragraph()\nimg_paragraph.alignment = 0  # Alineación izquierda\nimg_run = img_paragraph.add_run()",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "section.page_height",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "section.page_height = Inches(11)\nsection.top_margin = Inches(0.5)\nsection.bottom_margin = Inches(0.5)\nsection.left_margin = Inches(0.5)\nsection.right_margin = Inches(0.5)\n# Agregar la imagen en la parte superior izquierda\nimg_paragraph = document.add_paragraph()\nimg_paragraph.alignment = 0  # Alineación izquierda\nimg_run = img_paragraph.add_run()\nimg_run.add_picture('assets/pollo.jpg', width=Inches(1))  # Ajusta el tamaño según necesites",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "section.top_margin",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "section.top_margin = Inches(0.5)\nsection.bottom_margin = Inches(0.5)\nsection.left_margin = Inches(0.5)\nsection.right_margin = Inches(0.5)\n# Agregar la imagen en la parte superior izquierda\nimg_paragraph = document.add_paragraph()\nimg_paragraph.alignment = 0  # Alineación izquierda\nimg_run = img_paragraph.add_run()\nimg_run.add_picture('assets/pollo.jpg', width=Inches(1))  # Ajusta el tamaño según necesites\n# Agregar el encabezado centrado",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "section.bottom_margin",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "section.bottom_margin = Inches(0.5)\nsection.left_margin = Inches(0.5)\nsection.right_margin = Inches(0.5)\n# Agregar la imagen en la parte superior izquierda\nimg_paragraph = document.add_paragraph()\nimg_paragraph.alignment = 0  # Alineación izquierda\nimg_run = img_paragraph.add_run()\nimg_run.add_picture('assets/pollo.jpg', width=Inches(1))  # Ajusta el tamaño según necesites\n# Agregar el encabezado centrado\nheader_paragraph = document.add_paragraph()",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "section.left_margin",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "section.left_margin = Inches(0.5)\nsection.right_margin = Inches(0.5)\n# Agregar la imagen en la parte superior izquierda\nimg_paragraph = document.add_paragraph()\nimg_paragraph.alignment = 0  # Alineación izquierda\nimg_run = img_paragraph.add_run()\nimg_run.add_picture('assets/pollo.jpg', width=Inches(1))  # Ajusta el tamaño según necesites\n# Agregar el encabezado centrado\nheader_paragraph = document.add_paragraph()\nheader_paragraph.alignment = 1  # 0=izquierda, 1=centrado, 2=derecha",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "section.right_margin",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "section.right_margin = Inches(0.5)\n# Agregar la imagen en la parte superior izquierda\nimg_paragraph = document.add_paragraph()\nimg_paragraph.alignment = 0  # Alineación izquierda\nimg_run = img_paragraph.add_run()\nimg_run.add_picture('assets/pollo.jpg', width=Inches(1))  # Ajusta el tamaño según necesites\n# Agregar el encabezado centrado\nheader_paragraph = document.add_paragraph()\nheader_paragraph.alignment = 1  # 0=izquierda, 1=centrado, 2=derecha\nheader_run = header_paragraph.add_run(",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "img_paragraph",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "img_paragraph = document.add_paragraph()\nimg_paragraph.alignment = 0  # Alineación izquierda\nimg_run = img_paragraph.add_run()\nimg_run.add_picture('assets/pollo.jpg', width=Inches(1))  # Ajusta el tamaño según necesites\n# Agregar el encabezado centrado\nheader_paragraph = document.add_paragraph()\nheader_paragraph.alignment = 1  # 0=izquierda, 1=centrado, 2=derecha\nheader_run = header_paragraph.add_run(\n    \"Los estudiantes de grado 1102 del Instituto Guática hacen una rifa con el fin de recaudar fondos para las actividades de finalización de estudios\"\n)",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "img_paragraph.alignment",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "img_paragraph.alignment = 0  # Alineación izquierda\nimg_run = img_paragraph.add_run()\nimg_run.add_picture('assets/pollo.jpg', width=Inches(1))  # Ajusta el tamaño según necesites\n# Agregar el encabezado centrado\nheader_paragraph = document.add_paragraph()\nheader_paragraph.alignment = 1  # 0=izquierda, 1=centrado, 2=derecha\nheader_run = header_paragraph.add_run(\n    \"Los estudiantes de grado 1102 del Instituto Guática hacen una rifa con el fin de recaudar fondos para las actividades de finalización de estudios\"\n)\nheader_run.bold = True",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "img_run",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "img_run = img_paragraph.add_run()\nimg_run.add_picture('assets/pollo.jpg', width=Inches(1))  # Ajusta el tamaño según necesites\n# Agregar el encabezado centrado\nheader_paragraph = document.add_paragraph()\nheader_paragraph.alignment = 1  # 0=izquierda, 1=centrado, 2=derecha\nheader_run = header_paragraph.add_run(\n    \"Los estudiantes de grado 1102 del Instituto Guática hacen una rifa con el fin de recaudar fondos para las actividades de finalización de estudios\"\n)\nheader_run.bold = True\nheader_run.font.size = Pt(14)",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "header_paragraph",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "header_paragraph = document.add_paragraph()\nheader_paragraph.alignment = 1  # 0=izquierda, 1=centrado, 2=derecha\nheader_run = header_paragraph.add_run(\n    \"Los estudiantes de grado 1102 del Instituto Guática hacen una rifa con el fin de recaudar fondos para las actividades de finalización de estudios\"\n)\nheader_run.bold = True\nheader_run.font.size = Pt(14)\n# Resto del código original...\n# Agregar información del premio centrada\nprize_paragraph = document.add_paragraph()",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "header_paragraph.alignment",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "header_paragraph.alignment = 1  # 0=izquierda, 1=centrado, 2=derecha\nheader_run = header_paragraph.add_run(\n    \"Los estudiantes de grado 1102 del Instituto Guática hacen una rifa con el fin de recaudar fondos para las actividades de finalización de estudios\"\n)\nheader_run.bold = True\nheader_run.font.size = Pt(14)\n# Resto del código original...\n# Agregar información del premio centrada\nprize_paragraph = document.add_paragraph()\nprize_paragraph.alignment = 1",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "header_run",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "header_run = header_paragraph.add_run(\n    \"Los estudiantes de grado 1102 del Instituto Guática hacen una rifa con el fin de recaudar fondos para las actividades de finalización de estudios\"\n)\nheader_run.bold = True\nheader_run.font.size = Pt(14)\n# Resto del código original...\n# Agregar información del premio centrada\nprize_paragraph = document.add_paragraph()\nprize_paragraph.alignment = 1\nprize_run = prize_paragraph.add_run(\"Premio: Combo de Pollo frito Frisby\")",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "header_run.bold",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "header_run.bold = True\nheader_run.font.size = Pt(14)\n# Resto del código original...\n# Agregar información del premio centrada\nprize_paragraph = document.add_paragraph()\nprize_paragraph.alignment = 1\nprize_run = prize_paragraph.add_run(\"Premio: Combo de Pollo frito Frisby\")\nprize_run.bold = True\nprize_run.font.size = Pt(12)\n# Agregar un párrafo en blanco para separar",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "header_run.font.size",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "header_run.font.size = Pt(14)\n# Resto del código original...\n# Agregar información del premio centrada\nprize_paragraph = document.add_paragraph()\nprize_paragraph.alignment = 1\nprize_run = prize_paragraph.add_run(\"Premio: Combo de Pollo frito Frisby\")\nprize_run.bold = True\nprize_run.font.size = Pt(12)\n# Agregar un párrafo en blanco para separar\ndocument.add_paragraph()",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "prize_paragraph",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "prize_paragraph = document.add_paragraph()\nprize_paragraph.alignment = 1\nprize_run = prize_paragraph.add_run(\"Premio: Combo de Pollo frito Frisby\")\nprize_run.bold = True\nprize_run.font.size = Pt(12)\n# Agregar un párrafo en blanco para separar\ndocument.add_paragraph()\n# ---------------------------------------------------------------------------\n# Calcular la altura de cada fila para que la tabla ocupe el espacio restante.\n# Se asume:",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "prize_paragraph.alignment",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "prize_paragraph.alignment = 1\nprize_run = prize_paragraph.add_run(\"Premio: Combo de Pollo frito Frisby\")\nprize_run.bold = True\nprize_run.font.size = Pt(12)\n# Agregar un párrafo en blanco para separar\ndocument.add_paragraph()\n# ---------------------------------------------------------------------------\n# Calcular la altura de cada fila para que la tabla ocupe el espacio restante.\n# Se asume:\n# - Página: 11\" de alto",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "prize_run",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "prize_run = prize_paragraph.add_run(\"Premio: Combo de Pollo frito Frisby\")\nprize_run.bold = True\nprize_run.font.size = Pt(12)\n# Agregar un párrafo en blanco para separar\ndocument.add_paragraph()\n# ---------------------------------------------------------------------------\n# Calcular la altura de cada fila para que la tabla ocupe el espacio restante.\n# Se asume:\n# - Página: 11\" de alto\n# - Márgenes superior e inferior: 0.5\" cada uno  --> espacio vertical total: 11 - 1 = 10\"",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "prize_run.bold",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "prize_run.bold = True\nprize_run.font.size = Pt(12)\n# Agregar un párrafo en blanco para separar\ndocument.add_paragraph()\n# ---------------------------------------------------------------------------\n# Calcular la altura de cada fila para que la tabla ocupe el espacio restante.\n# Se asume:\n# - Página: 11\" de alto\n# - Márgenes superior e inferior: 0.5\" cada uno  --> espacio vertical total: 11 - 1 = 10\"\n# - Espacio usado por los párrafos de encabezado y premio (aproximado): 1.5\"",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "prize_run.font.size",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "prize_run.font.size = Pt(12)\n# Agregar un párrafo en blanco para separar\ndocument.add_paragraph()\n# ---------------------------------------------------------------------------\n# Calcular la altura de cada fila para que la tabla ocupe el espacio restante.\n# Se asume:\n# - Página: 11\" de alto\n# - Márgenes superior e inferior: 0.5\" cada uno  --> espacio vertical total: 11 - 1 = 10\"\n# - Espacio usado por los párrafos de encabezado y premio (aproximado): 1.5\"\n# Entonces, espacio disponible para la tabla: 10 - 1.5 = 8.5\" ",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "row_height",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "row_height = Inches(8.5 / 21)\n# Crear la tabla: 21 filas y 3 columnas\ntable = document.add_table(rows=21, cols=3)\ntable.style = 'Table Grid'\n# Rellenar la primera fila (encabezados de la tabla)\nhdr_cells = table.rows[0].cells\nhdr_cells[0].text = 'N°'\nhdr_cells[1].text = 'Nombre'\nhdr_cells[2].text = 'Teléfono'\n# Configurar la altura de cada fila de la tabla de forma fija (exacta)",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "table",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "table = document.add_table(rows=21, cols=3)\ntable.style = 'Table Grid'\n# Rellenar la primera fila (encabezados de la tabla)\nhdr_cells = table.rows[0].cells\nhdr_cells[0].text = 'N°'\nhdr_cells[1].text = 'Nombre'\nhdr_cells[2].text = 'Teléfono'\n# Configurar la altura de cada fila de la tabla de forma fija (exacta)\nfor row in table.rows:\n    row.height = row_height",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "table.style",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "table.style = 'Table Grid'\n# Rellenar la primera fila (encabezados de la tabla)\nhdr_cells = table.rows[0].cells\nhdr_cells[0].text = 'N°'\nhdr_cells[1].text = 'Nombre'\nhdr_cells[2].text = 'Teléfono'\n# Configurar la altura de cada fila de la tabla de forma fija (exacta)\nfor row in table.rows:\n    row.height = row_height\n    row.height_rule = WD_ROW_HEIGHT_RULE.EXACTLY",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "hdr_cells",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "hdr_cells = table.rows[0].cells\nhdr_cells[0].text = 'N°'\nhdr_cells[1].text = 'Nombre'\nhdr_cells[2].text = 'Teléfono'\n# Configurar la altura de cada fila de la tabla de forma fija (exacta)\nfor row in table.rows:\n    row.height = row_height\n    row.height_rule = WD_ROW_HEIGHT_RULE.EXACTLY\n# Rellenar la primera columna de las filas de participantes (filas 2 a 21)\nfor i in range(1, 21):",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "hdr_cells[0].text",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "hdr_cells[0].text = 'N°'\nhdr_cells[1].text = 'Nombre'\nhdr_cells[2].text = 'Teléfono'\n# Configurar la altura de cada fila de la tabla de forma fija (exacta)\nfor row in table.rows:\n    row.height = row_height\n    row.height_rule = WD_ROW_HEIGHT_RULE.EXACTLY\n# Rellenar la primera columna de las filas de participantes (filas 2 a 21)\nfor i in range(1, 21):\n    row_cells = table.rows[i].cells",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "hdr_cells[1].text",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "hdr_cells[1].text = 'Nombre'\nhdr_cells[2].text = 'Teléfono'\n# Configurar la altura de cada fila de la tabla de forma fija (exacta)\nfor row in table.rows:\n    row.height = row_height\n    row.height_rule = WD_ROW_HEIGHT_RULE.EXACTLY\n# Rellenar la primera columna de las filas de participantes (filas 2 a 21)\nfor i in range(1, 21):\n    row_cells = table.rows[i].cells\n    row_cells[0].text = str(i)",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "hdr_cells[2].text",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "hdr_cells[2].text = 'Teléfono'\n# Configurar la altura de cada fila de la tabla de forma fija (exacta)\nfor row in table.rows:\n    row.height = row_height\n    row.height_rule = WD_ROW_HEIGHT_RULE.EXACTLY\n# Rellenar la primera columna de las filas de participantes (filas 2 a 21)\nfor i in range(1, 21):\n    row_cells = table.rows[i].cells\n    row_cells[0].text = str(i)\n    # Las celdas \"Nombre\" y \"Teléfono\" se dejan en blanco para completarlas manualmente",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "datos",
        "kind": 5,
        "importPath": "vocabulario",
        "description": "vocabulario",
        "peekOfCode": "datos = {\n    \"Inglés\": [\n        \"Variable\", \"Function\", \"Loop\", \"List\", \"Tuple\", \"Dictionary\",\n        \"String\", \"Integer\", \"Float\", \"Boolean\", \"If statement\", \"Else\",\n        \"Elif\", \"Import\", \"Module\", \"Package\", \"Class\", \"Object\",\n        \"Method\", \"Attribute\", \"Exception\", \"Try\", \"Except\", \"Finally\",\n        \"While loop\", \"For loop\", \"Break\", \"Continue\", \"Pass\", \"Lambda\",\n        \"Decorator\", \"Generator\", \"Comprehension\", \"Indentation\",\n        \"Syntax\", \"Argument\", \"Parameter\", \"Return\", \"Namespace\",\n        \"Scope\", \"Global variable\", \"Local variable\", \"Docstring\",",
        "detail": "vocabulario",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "vocabulario",
        "description": "vocabulario",
        "peekOfCode": "df = pd.DataFrame(datos)\n# Exportar a un archivo Excel\ndf.to_excel(\"Vocabulario_Python.xlsx\", index=False)\nprint(\"El archivo 'Vocabulario_Python.xlsx' ha sido creado exitosamente.\")",
        "detail": "vocabulario",
        "documentation": {}
    }
]