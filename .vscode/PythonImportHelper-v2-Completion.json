[
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "constantes",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "constantes",
        "description": "constantes",
        "detail": "constantes",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "turtle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "turtle",
        "description": "turtle",
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "ANCHO",
        "kind": 5,
        "importPath": "constantes",
        "description": "constantes",
        "peekOfCode": "ANCHO = 800\nALTO = 600\nJUGADOR_TAMANO = 90\nJUGADOR_SPEED = 9\nDELTA=10\nVELOCIDAD=100",
        "detail": "constantes",
        "documentation": {}
    },
    {
        "label": "ALTO",
        "kind": 5,
        "importPath": "constantes",
        "description": "constantes",
        "peekOfCode": "ALTO = 600\nJUGADOR_TAMANO = 90\nJUGADOR_SPEED = 9\nDELTA=10\nVELOCIDAD=100",
        "detail": "constantes",
        "documentation": {}
    },
    {
        "label": "JUGADOR_TAMANO",
        "kind": 5,
        "importPath": "constantes",
        "description": "constantes",
        "peekOfCode": "JUGADOR_TAMANO = 90\nJUGADOR_SPEED = 9\nDELTA=10\nVELOCIDAD=100",
        "detail": "constantes",
        "documentation": {}
    },
    {
        "label": "JUGADOR_SPEED",
        "kind": 5,
        "importPath": "constantes",
        "description": "constantes",
        "peekOfCode": "JUGADOR_SPEED = 9\nDELTA=10\nVELOCIDAD=100",
        "detail": "constantes",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "screen = pygame.display.set_mode((constantes.ANCHO, constantes.ALTO))\nclock = pygame.time.Clock()\n# Cargar y escalar los sprites correctamente\nplayer_sprites = []\nfor i in range(6):  # Suponiendo que tienes 6 im치genes\n    img = pygame.image.load(\n        f\"assets/Walking/0_Fallen_Angels_Walking_00{i}.png\").convert_alpha()\n    img = pygame.transform.scale(\n        img, (constantes.JUGADOR_TAMANO, constantes.JUGADOR_TAMANO))  # Escalar correctamente\n    player_sprites.append(img)  # Guardar imagen escalada en la lista",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "clock = pygame.time.Clock()\n# Cargar y escalar los sprites correctamente\nplayer_sprites = []\nfor i in range(6):  # Suponiendo que tienes 6 im치genes\n    img = pygame.image.load(\n        f\"assets/Walking/0_Fallen_Angels_Walking_00{i}.png\").convert_alpha()\n    img = pygame.transform.scale(\n        img, (constantes.JUGADOR_TAMANO, constantes.JUGADOR_TAMANO))  # Escalar correctamente\n    player_sprites.append(img)  # Guardar imagen escalada en la lista\n# 游꿢 **Centrar el jugador en la pantalla**",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "player_sprites",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "player_sprites = []\nfor i in range(6):  # Suponiendo que tienes 6 im치genes\n    img = pygame.image.load(\n        f\"assets/Walking/0_Fallen_Angels_Walking_00{i}.png\").convert_alpha()\n    img = pygame.transform.scale(\n        img, (constantes.JUGADOR_TAMANO, constantes.JUGADOR_TAMANO))  # Escalar correctamente\n    player_sprites.append(img)  # Guardar imagen escalada en la lista\n# 游꿢 **Centrar el jugador en la pantalla**\nplayer_pos = pygame.Vector2(\n    (constantes.ANCHO - constantes.JUGADOR_TAMANO) // 2,",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "player_pos",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "player_pos = pygame.Vector2(\n    (constantes.ANCHO - constantes.JUGADOR_TAMANO) // 2,\n    (constantes.ALTO - constantes.JUGADOR_TAMANO) // 2\n)\nvelocidad = constantes.VELOCIDAD\nframe_index = 0\nanimation_speed = constantes.JUGADOR_SPEED\nframe_counter = 0\nmirando_izquierda = False\n# 游늷 **Generar obst치culos asegurando que no aparezcan cerca del jugador**",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "velocidad",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "velocidad = constantes.VELOCIDAD\nframe_index = 0\nanimation_speed = constantes.JUGADOR_SPEED\nframe_counter = 0\nmirando_izquierda = False\n# 游늷 **Generar obst치culos asegurando que no aparezcan cerca del jugador**\njugador_radio_seguro = 150  # Distancia m칤nima desde el jugador\nobstaculos = []\nfor _ in range(5):  # N칰mero de obst치culos\n    while True:",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "frame_index",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "frame_index = 0\nanimation_speed = constantes.JUGADOR_SPEED\nframe_counter = 0\nmirando_izquierda = False\n# 游늷 **Generar obst치culos asegurando que no aparezcan cerca del jugador**\njugador_radio_seguro = 150  # Distancia m칤nima desde el jugador\nobstaculos = []\nfor _ in range(5):  # N칰mero de obst치culos\n    while True:\n        obs_x = random.randint(50, constantes.ANCHO - 50)",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "animation_speed",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "animation_speed = constantes.JUGADOR_SPEED\nframe_counter = 0\nmirando_izquierda = False\n# 游늷 **Generar obst치culos asegurando que no aparezcan cerca del jugador**\njugador_radio_seguro = 150  # Distancia m칤nima desde el jugador\nobstaculos = []\nfor _ in range(5):  # N칰mero de obst치culos\n    while True:\n        obs_x = random.randint(50, constantes.ANCHO - 50)\n        obs_y = random.randint(50, constantes.ALTO - 50)",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "frame_counter",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "frame_counter = 0\nmirando_izquierda = False\n# 游늷 **Generar obst치culos asegurando que no aparezcan cerca del jugador**\njugador_radio_seguro = 150  # Distancia m칤nima desde el jugador\nobstaculos = []\nfor _ in range(5):  # N칰mero de obst치culos\n    while True:\n        obs_x = random.randint(50, constantes.ANCHO - 50)\n        obs_y = random.randint(50, constantes.ALTO - 50)\n        # Calcular distancia al jugador",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "mirando_izquierda",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "mirando_izquierda = False\n# 游늷 **Generar obst치culos asegurando que no aparezcan cerca del jugador**\njugador_radio_seguro = 150  # Distancia m칤nima desde el jugador\nobstaculos = []\nfor _ in range(5):  # N칰mero de obst치culos\n    while True:\n        obs_x = random.randint(50, constantes.ANCHO - 50)\n        obs_y = random.randint(50, constantes.ALTO - 50)\n        # Calcular distancia al jugador\n        distancia = ((obs_x - player_pos.x) ** 2 + (obs_y - player_pos.y) ** 2) ** 0.5",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "jugador_radio_seguro",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "jugador_radio_seguro = 150  # Distancia m칤nima desde el jugador\nobstaculos = []\nfor _ in range(5):  # N칰mero de obst치culos\n    while True:\n        obs_x = random.randint(50, constantes.ANCHO - 50)\n        obs_y = random.randint(50, constantes.ALTO - 50)\n        # Calcular distancia al jugador\n        distancia = ((obs_x - player_pos.x) ** 2 + (obs_y - player_pos.y) ** 2) ** 0.5\n        if distancia > jugador_radio_seguro:  # Si el obst치culo est치 suficientemente lejos\n            if random.choice([True, False]):",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "obstaculos",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "obstaculos = []\nfor _ in range(5):  # N칰mero de obst치culos\n    while True:\n        obs_x = random.randint(50, constantes.ANCHO - 50)\n        obs_y = random.randint(50, constantes.ALTO - 50)\n        # Calcular distancia al jugador\n        distancia = ((obs_x - player_pos.x) ** 2 + (obs_y - player_pos.y) ** 2) ** 0.5\n        if distancia > jugador_radio_seguro:  # Si el obst치culo est치 suficientemente lejos\n            if random.choice([True, False]):\n                ancho = random.randint(50, 120)",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "obstaculo_masks",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "obstaculo_masks = [pygame.mask.Mask((obs[1].width, obs[1].height), fill=True) if obs[0] == \"rect\" else None for obs in obstaculos]\nrunning = True\nwhile running:\n    dt = clock.tick(60) / 1000.0  # Control de FPS\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n    # L칩gica de movimiento\n    keys = pygame.key.get_pressed()\n    moving = False",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "running = True\nwhile running:\n    dt = clock.tick(60) / 1000.0  # Control de FPS\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n    # L칩gica de movimiento\n    keys = pygame.key.get_pressed()\n    moving = False\n    nueva_pos = player_pos.copy()",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "ANCHO",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "ANCHO = 800\nALTO = 600\n# Crear la ventana\nventana = pygame.display.set_mode((ANCHO, ALTO))\npygame.display.set_caption(\"Evita los Obst치culos\")\n# Colores\nBLANCO = (255, 255, 255)\nNEGRO = (0, 0, 0)\nROJO = (255, 0, 0)\nVERDE = (0, 255, 0)",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "ALTO",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "ALTO = 600\n# Crear la ventana\nventana = pygame.display.set_mode((ANCHO, ALTO))\npygame.display.set_caption(\"Evita los Obst치culos\")\n# Colores\nBLANCO = (255, 255, 255)\nNEGRO = (0, 0, 0)\nROJO = (255, 0, 0)\nVERDE = (0, 255, 0)\nAZUL = (0, 0, 255)",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "ventana",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "ventana = pygame.display.set_mode((ANCHO, ALTO))\npygame.display.set_caption(\"Evita los Obst치culos\")\n# Colores\nBLANCO = (255, 255, 255)\nNEGRO = (0, 0, 0)\nROJO = (255, 0, 0)\nVERDE = (0, 255, 0)\nAZUL = (0, 0, 255)\n# Bucle principal del juego\nreloj = pygame.time.Clock()",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "BLANCO",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "BLANCO = (255, 255, 255)\nNEGRO = (0, 0, 0)\nROJO = (255, 0, 0)\nVERDE = (0, 255, 0)\nAZUL = (0, 0, 255)\n# Bucle principal del juego\nreloj = pygame.time.Clock()\n# Variables del jugador\njugador_tamano = 50\njugador_x = ANCHO // 2 - jugador_tamano // 2",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "NEGRO",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "NEGRO = (0, 0, 0)\nROJO = (255, 0, 0)\nVERDE = (0, 255, 0)\nAZUL = (0, 0, 255)\n# Bucle principal del juego\nreloj = pygame.time.Clock()\n# Variables del jugador\njugador_tamano = 50\njugador_x = ANCHO // 2 - jugador_tamano // 2\njugador_y = ALTO - jugador_tamano - 10",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "ROJO",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "ROJO = (255, 0, 0)\nVERDE = (0, 255, 0)\nAZUL = (0, 0, 255)\n# Bucle principal del juego\nreloj = pygame.time.Clock()\n# Variables del jugador\njugador_tamano = 50\njugador_x = ANCHO // 2 - jugador_tamano // 2\njugador_y = ALTO - jugador_tamano - 10\nvelocidad_jugador = 5",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "VERDE",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "VERDE = (0, 255, 0)\nAZUL = (0, 0, 255)\n# Bucle principal del juego\nreloj = pygame.time.Clock()\n# Variables del jugador\njugador_tamano = 50\njugador_x = ANCHO // 2 - jugador_tamano // 2\njugador_y = ALTO - jugador_tamano - 10\nvelocidad_jugador = 5\n# Lista de obst치culos",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "AZUL",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "AZUL = (0, 0, 255)\n# Bucle principal del juego\nreloj = pygame.time.Clock()\n# Variables del jugador\njugador_tamano = 50\njugador_x = ANCHO // 2 - jugador_tamano // 2\njugador_y = ALTO - jugador_tamano - 10\nvelocidad_jugador = 5\n# Lista de obst치culos\nobstaculos = []",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "reloj",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "reloj = pygame.time.Clock()\n# Variables del jugador\njugador_tamano = 50\njugador_x = ANCHO // 2 - jugador_tamano // 2\njugador_y = ALTO - jugador_tamano - 10\nvelocidad_jugador = 5\n# Lista de obst치culos\nobstaculos = []\nvelocidad_obstaculo = 5\nfrecuencia_obstaculos = 50  # Controla la frecuencia de aparici칩n",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "jugador_tamano",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "jugador_tamano = 50\njugador_x = ANCHO // 2 - jugador_tamano // 2\njugador_y = ALTO - jugador_tamano - 10\nvelocidad_jugador = 5\n# Lista de obst치culos\nobstaculos = []\nvelocidad_obstaculo = 5\nfrecuencia_obstaculos = 50  # Controla la frecuencia de aparici칩n\n# Puntuaci칩n\npuntuacion = 0",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "jugador_x",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "jugador_x = ANCHO // 2 - jugador_tamano // 2\njugador_y = ALTO - jugador_tamano - 10\nvelocidad_jugador = 5\n# Lista de obst치culos\nobstaculos = []\nvelocidad_obstaculo = 5\nfrecuencia_obstaculos = 50  # Controla la frecuencia de aparici칩n\n# Puntuaci칩n\npuntuacion = 0\nfuente = pygame.font.SysFont(None, 36)",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "jugador_y",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "jugador_y = ALTO - jugador_tamano - 10\nvelocidad_jugador = 5\n# Lista de obst치culos\nobstaculos = []\nvelocidad_obstaculo = 5\nfrecuencia_obstaculos = 50  # Controla la frecuencia de aparici칩n\n# Puntuaci칩n\npuntuacion = 0\nfuente = pygame.font.SysFont(None, 36)\n# Bucle principal",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "velocidad_jugador",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "velocidad_jugador = 5\n# Lista de obst치culos\nobstaculos = []\nvelocidad_obstaculo = 5\nfrecuencia_obstaculos = 50  # Controla la frecuencia de aparici칩n\n# Puntuaci칩n\npuntuacion = 0\nfuente = pygame.font.SysFont(None, 36)\n# Bucle principal\ncorriendo = True",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "obstaculos",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "obstaculos = []\nvelocidad_obstaculo = 5\nfrecuencia_obstaculos = 50  # Controla la frecuencia de aparici칩n\n# Puntuaci칩n\npuntuacion = 0\nfuente = pygame.font.SysFont(None, 36)\n# Bucle principal\ncorriendo = True\ncontador_frames = 0\nwhile corriendo:",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "velocidad_obstaculo",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "velocidad_obstaculo = 5\nfrecuencia_obstaculos = 50  # Controla la frecuencia de aparici칩n\n# Puntuaci칩n\npuntuacion = 0\nfuente = pygame.font.SysFont(None, 36)\n# Bucle principal\ncorriendo = True\ncontador_frames = 0\nwhile corriendo:\n    # Manejar eventos",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "frecuencia_obstaculos",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "frecuencia_obstaculos = 50  # Controla la frecuencia de aparici칩n\n# Puntuaci칩n\npuntuacion = 0\nfuente = pygame.font.SysFont(None, 36)\n# Bucle principal\ncorriendo = True\ncontador_frames = 0\nwhile corriendo:\n    # Manejar eventos\n    for evento in pygame.event.get():",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "puntuacion",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "puntuacion = 0\nfuente = pygame.font.SysFont(None, 36)\n# Bucle principal\ncorriendo = True\ncontador_frames = 0\nwhile corriendo:\n    # Manejar eventos\n    for evento in pygame.event.get():\n        if evento.type == pygame.QUIT:\n            corriendo = False",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "fuente",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "fuente = pygame.font.SysFont(None, 36)\n# Bucle principal\ncorriendo = True\ncontador_frames = 0\nwhile corriendo:\n    # Manejar eventos\n    for evento in pygame.event.get():\n        if evento.type == pygame.QUIT:\n            corriendo = False\n    # Obtener todas las teclas presionadas",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "corriendo",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "corriendo = True\ncontador_frames = 0\nwhile corriendo:\n    # Manejar eventos\n    for evento in pygame.event.get():\n        if evento.type == pygame.QUIT:\n            corriendo = False\n    # Obtener todas las teclas presionadas\n    teclas = pygame.key.get_pressed()\n    if teclas[pygame.K_LEFT] or teclas[pygame.K_a]:",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "contador_frames",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "contador_frames = 0\nwhile corriendo:\n    # Manejar eventos\n    for evento in pygame.event.get():\n        if evento.type == pygame.QUIT:\n            corriendo = False\n    # Obtener todas las teclas presionadas\n    teclas = pygame.key.get_pressed()\n    if teclas[pygame.K_LEFT] or teclas[pygame.K_a]:\n        jugador_x -= velocidad_jugador",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "texto_fin",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "texto_fin = fuente.render(\"춰Juego Terminado!\", True, NEGRO)\ntexto_puntuacion_final = fuente.render(f\"Puntuaci칩n Final: {puntuacion}\", True, NEGRO)\nventana.blit(texto_fin, (ANCHO // 2 - texto_fin.get_width() // 2, ALTO // 2 - 50))\nventana.blit(texto_puntuacion_final, (ANCHO // 2 - texto_puntuacion_final.get_width() // 2, ALTO // 2))\npygame.display.flip()\n# Esperar unos segundos antes de cerrar\npygame.time.wait(3000)\n# Finalizar Pygame\npygame.quit()\nsys.exit()",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "texto_puntuacion_final",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "texto_puntuacion_final = fuente.render(f\"Puntuaci칩n Final: {puntuacion}\", True, NEGRO)\nventana.blit(texto_fin, (ANCHO // 2 - texto_fin.get_width() // 2, ALTO // 2 - 50))\nventana.blit(texto_puntuacion_final, (ANCHO // 2 - texto_puntuacion_final.get_width() // 2, ALTO // 2))\npygame.display.flip()\n# Esperar unos segundos antes de cerrar\npygame.time.wait(3000)\n# Finalizar Pygame\npygame.quit()\nsys.exit()",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "pantalla",
        "kind": 5,
        "importPath": "pturtle",
        "description": "pturtle",
        "peekOfCode": "pantalla = turtle.Screen()\npantalla.title(\"Pol칤gono con l칤neas al centro\")\ntortuga = turtle.Turtle()\ntortuga.speed(3)          # Velocidad de la tortuga (1 = lento, 10 = r치pido, 0 = sin animaci칩n)\ntortuga.color(\"blue\")     # Color para dibujar el pol칤gono\n# Par치metros del pol칤gono\nn_lados = 5               # Cambia este valor para probar con distintos pol칤gonos (3=tri치ngulo, 4=cuadrado, etc.)\ndistancia = 100           # Longitud de cada lado\nangulo = 360 / n_lados    # 츼ngulo de giro para un pol칤gono regular\n# Lista para guardar los v칠rtices",
        "detail": "pturtle",
        "documentation": {}
    },
    {
        "label": "tortuga",
        "kind": 5,
        "importPath": "pturtle",
        "description": "pturtle",
        "peekOfCode": "tortuga = turtle.Turtle()\ntortuga.speed(3)          # Velocidad de la tortuga (1 = lento, 10 = r치pido, 0 = sin animaci칩n)\ntortuga.color(\"blue\")     # Color para dibujar el pol칤gono\n# Par치metros del pol칤gono\nn_lados = 5               # Cambia este valor para probar con distintos pol칤gonos (3=tri치ngulo, 4=cuadrado, etc.)\ndistancia = 100           # Longitud de cada lado\nangulo = 360 / n_lados    # 츼ngulo de giro para un pol칤gono regular\n# Lista para guardar los v칠rtices\nvertices = []\n# DIBUJAR EL POL칈GONO",
        "detail": "pturtle",
        "documentation": {}
    },
    {
        "label": "n_lados",
        "kind": 5,
        "importPath": "pturtle",
        "description": "pturtle",
        "peekOfCode": "n_lados = 5               # Cambia este valor para probar con distintos pol칤gonos (3=tri치ngulo, 4=cuadrado, etc.)\ndistancia = 100           # Longitud de cada lado\nangulo = 360 / n_lados    # 츼ngulo de giro para un pol칤gono regular\n# Lista para guardar los v칠rtices\nvertices = []\n# DIBUJAR EL POL칈GONO\nfor _ in range(n_lados):\n    # Guardamos la posici칩n actual (v칠rtice)\n    vertices.append(tortuga.pos())\n    # Avanzamos y giramos para dibujar el siguiente lado",
        "detail": "pturtle",
        "documentation": {}
    },
    {
        "label": "distancia",
        "kind": 5,
        "importPath": "pturtle",
        "description": "pturtle",
        "peekOfCode": "distancia = 100           # Longitud de cada lado\nangulo = 360 / n_lados    # 츼ngulo de giro para un pol칤gono regular\n# Lista para guardar los v칠rtices\nvertices = []\n# DIBUJAR EL POL칈GONO\nfor _ in range(n_lados):\n    # Guardamos la posici칩n actual (v칠rtice)\n    vertices.append(tortuga.pos())\n    # Avanzamos y giramos para dibujar el siguiente lado\n    tortuga.forward(distancia)",
        "detail": "pturtle",
        "documentation": {}
    },
    {
        "label": "angulo",
        "kind": 5,
        "importPath": "pturtle",
        "description": "pturtle",
        "peekOfCode": "angulo = 360 / n_lados    # 츼ngulo de giro para un pol칤gono regular\n# Lista para guardar los v칠rtices\nvertices = []\n# DIBUJAR EL POL칈GONO\nfor _ in range(n_lados):\n    # Guardamos la posici칩n actual (v칠rtice)\n    vertices.append(tortuga.pos())\n    # Avanzamos y giramos para dibujar el siguiente lado\n    tortuga.forward(distancia)\n    tortuga.right(angulo)",
        "detail": "pturtle",
        "documentation": {}
    },
    {
        "label": "vertices",
        "kind": 5,
        "importPath": "pturtle",
        "description": "pturtle",
        "peekOfCode": "vertices = []\n# DIBUJAR EL POL칈GONO\nfor _ in range(n_lados):\n    # Guardamos la posici칩n actual (v칠rtice)\n    vertices.append(tortuga.pos())\n    # Avanzamos y giramos para dibujar el siguiente lado\n    tortuga.forward(distancia)\n    tortuga.right(angulo)\n# CAMBIAMOS DE COLOR PARA LAS L칈NEAS AL CENTRO\ntortuga.color(\"red\")",
        "detail": "pturtle",
        "documentation": {}
    },
    {
        "label": "datos",
        "kind": 5,
        "importPath": "vocabulario",
        "description": "vocabulario",
        "peekOfCode": "datos = {\n    \"Ingl칠s\": [\n        \"Variable\", \"Function\", \"Loop\", \"List\", \"Tuple\", \"Dictionary\",\n        \"String\", \"Integer\", \"Float\", \"Boolean\", \"If statement\", \"Else\",\n        \"Elif\", \"Import\", \"Module\", \"Package\", \"Class\", \"Object\",\n        \"Method\", \"Attribute\", \"Exception\", \"Try\", \"Except\", \"Finally\",\n        \"While loop\", \"For loop\", \"Break\", \"Continue\", \"Pass\", \"Lambda\",\n        \"Decorator\", \"Generator\", \"Comprehension\", \"Indentation\",\n        \"Syntax\", \"Argument\", \"Parameter\", \"Return\", \"Namespace\",\n        \"Scope\", \"Global variable\", \"Local variable\", \"Docstring\",",
        "detail": "vocabulario",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "vocabulario",
        "description": "vocabulario",
        "peekOfCode": "df = pd.DataFrame(datos)\n# Exportar a un archivo Excel\ndf.to_excel(\"Vocabulario_Python.xlsx\", index=False)\nprint(\"El archivo 'Vocabulario_Python.xlsx' ha sido creado exitosamente.\")",
        "detail": "vocabulario",
        "documentation": {}
    }
]