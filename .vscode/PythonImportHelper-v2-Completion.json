[
    {
        "label": "turtle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "turtle",
        "description": "turtle",
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Back",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Back",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Back",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "system",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "system",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "turtle,random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "turtle.random",
        "description": "turtle.random",
        "detail": "turtle.random",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "rich.table",
        "description": "rich.table",
        "isExtraImport": true,
        "detail": "rich.table",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "docx",
        "description": "docx",
        "isExtraImport": true,
        "detail": "docx",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "docx",
        "description": "docx",
        "isExtraImport": true,
        "detail": "docx",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "smtplib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "smtplib",
        "description": "smtplib",
        "detail": "smtplib",
        "documentation": {}
    },
    {
        "label": "MIMEMultipart",
        "importPath": "email.mime.multipart",
        "description": "email.mime.multipart",
        "isExtraImport": true,
        "detail": "email.mime.multipart",
        "documentation": {}
    },
    {
        "label": "MIMEMultipart",
        "importPath": "email.mime.multipart",
        "description": "email.mime.multipart",
        "isExtraImport": true,
        "detail": "email.mime.multipart",
        "documentation": {}
    },
    {
        "label": "MIMEText",
        "importPath": "email.mime.text",
        "description": "email.mime.text",
        "isExtraImport": true,
        "detail": "email.mime.text",
        "documentation": {}
    },
    {
        "label": "MIMEText",
        "importPath": "email.mime.text",
        "description": "email.mime.text",
        "isExtraImport": true,
        "detail": "email.mime.text",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "turtle,random,keyboard",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "turtle.random.keyboard",
        "description": "turtle.random.keyboard",
        "detail": "turtle.random.keyboard",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "mediapipe",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mediapipe",
        "description": "mediapipe",
        "detail": "mediapipe",
        "documentation": {}
    },
    {
        "label": "pyautogui",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyautogui",
        "description": "pyautogui",
        "detail": "pyautogui",
        "documentation": {}
    },
    {
        "label": "preguntas",
        "importPath": "preguntas",
        "description": "preguntas",
        "isExtraImport": true,
        "detail": "preguntas",
        "documentation": {}
    },
    {
        "label": "constantes",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "constantes",
        "description": "constantes",
        "detail": "constantes",
        "documentation": {}
    },
    {
        "label": "qrcode",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "qrcode",
        "description": "qrcode",
        "detail": "qrcode",
        "documentation": {}
    },
    {
        "label": "Inches",
        "importPath": "docx.shared",
        "description": "docx.shared",
        "isExtraImport": true,
        "detail": "docx.shared",
        "documentation": {}
    },
    {
        "label": "Pt",
        "importPath": "docx.shared",
        "description": "docx.shared",
        "isExtraImport": true,
        "detail": "docx.shared",
        "documentation": {}
    },
    {
        "label": "WD_ROW_HEIGHT_RULE",
        "importPath": "docx.enum.table",
        "description": "docx.enum.table",
        "isExtraImport": true,
        "detail": "docx.enum.table",
        "documentation": {}
    },
    {
        "label": "turtle,math,random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "turtle.math.random",
        "description": "turtle.math.random",
        "detail": "turtle.math.random",
        "documentation": {}
    },
    {
        "label": "pantalla",
        "kind": 5,
        "importPath": "alineas",
        "description": "alineas",
        "peekOfCode": "pantalla = turtle.Screen()\npantalla.title(\"Lineas Curvas\")\ncolores = [\"red\", \"blue\", \"green\", \"yellow\", \"purple\", \"orange\"]\ntortuga = turtle.Turtle()\n# Velocidad de la tortuga (1 = lento, 10 = rápido, 0 = sin animación)\ntortuga.speed(0)\ntortuga.color(\"blue\")     # Color para dibujar el polígono\nancho = pantalla.window_width()\nalto = pantalla.window_height()\ncantidad = 30",
        "detail": "alineas",
        "documentation": {}
    },
    {
        "label": "colores",
        "kind": 5,
        "importPath": "alineas",
        "description": "alineas",
        "peekOfCode": "colores = [\"red\", \"blue\", \"green\", \"yellow\", \"purple\", \"orange\"]\ntortuga = turtle.Turtle()\n# Velocidad de la tortuga (1 = lento, 10 = rápido, 0 = sin animación)\ntortuga.speed(0)\ntortuga.color(\"blue\")     # Color para dibujar el polígono\nancho = pantalla.window_width()\nalto = pantalla.window_height()\ncantidad = 30\nmargen = 10\nxinicial = (-ancho // 2)+margen",
        "detail": "alineas",
        "documentation": {}
    },
    {
        "label": "tortuga",
        "kind": 5,
        "importPath": "alineas",
        "description": "alineas",
        "peekOfCode": "tortuga = turtle.Turtle()\n# Velocidad de la tortuga (1 = lento, 10 = rápido, 0 = sin animación)\ntortuga.speed(0)\ntortuga.color(\"blue\")     # Color para dibujar el polígono\nancho = pantalla.window_width()\nalto = pantalla.window_height()\ncantidad = 30\nmargen = 10\nxinicial = (-ancho // 2)+margen\nxfinal = (ancho // 2)-margen",
        "detail": "alineas",
        "documentation": {}
    },
    {
        "label": "ancho",
        "kind": 5,
        "importPath": "alineas",
        "description": "alineas",
        "peekOfCode": "ancho = pantalla.window_width()\nalto = pantalla.window_height()\ncantidad = 30\nmargen = 10\nxinicial = (-ancho // 2)+margen\nxfinal = (ancho // 2)-margen\nyinicial = (alto // 2)-margen\nyfinal = (-alto // 2)+margen\nnlineas = ancho // cantidad\nfor i in range(2*nlineas):",
        "detail": "alineas",
        "documentation": {}
    },
    {
        "label": "alto",
        "kind": 5,
        "importPath": "alineas",
        "description": "alineas",
        "peekOfCode": "alto = pantalla.window_height()\ncantidad = 30\nmargen = 10\nxinicial = (-ancho // 2)+margen\nxfinal = (ancho // 2)-margen\nyinicial = (alto // 2)-margen\nyfinal = (-alto // 2)+margen\nnlineas = ancho // cantidad\nfor i in range(2*nlineas):\n    tortuga.color(random.choice(colores))",
        "detail": "alineas",
        "documentation": {}
    },
    {
        "label": "cantidad",
        "kind": 5,
        "importPath": "alineas",
        "description": "alineas",
        "peekOfCode": "cantidad = 30\nmargen = 10\nxinicial = (-ancho // 2)+margen\nxfinal = (ancho // 2)-margen\nyinicial = (alto // 2)-margen\nyfinal = (-alto // 2)+margen\nnlineas = ancho // cantidad\nfor i in range(2*nlineas):\n    tortuga.color(random.choice(colores))\n    tortuga.penup()",
        "detail": "alineas",
        "documentation": {}
    },
    {
        "label": "margen",
        "kind": 5,
        "importPath": "alineas",
        "description": "alineas",
        "peekOfCode": "margen = 10\nxinicial = (-ancho // 2)+margen\nxfinal = (ancho // 2)-margen\nyinicial = (alto // 2)-margen\nyfinal = (-alto // 2)+margen\nnlineas = ancho // cantidad\nfor i in range(2*nlineas):\n    tortuga.color(random.choice(colores))\n    tortuga.penup()\n    tortuga.goto(xinicial, yinicial-i*nlineas)",
        "detail": "alineas",
        "documentation": {}
    },
    {
        "label": "xinicial",
        "kind": 5,
        "importPath": "alineas",
        "description": "alineas",
        "peekOfCode": "xinicial = (-ancho // 2)+margen\nxfinal = (ancho // 2)-margen\nyinicial = (alto // 2)-margen\nyfinal = (-alto // 2)+margen\nnlineas = ancho // cantidad\nfor i in range(2*nlineas):\n    tortuga.color(random.choice(colores))\n    tortuga.penup()\n    tortuga.goto(xinicial, yinicial-i*nlineas)\n    tortuga.pendown()",
        "detail": "alineas",
        "documentation": {}
    },
    {
        "label": "xfinal",
        "kind": 5,
        "importPath": "alineas",
        "description": "alineas",
        "peekOfCode": "xfinal = (ancho // 2)-margen\nyinicial = (alto // 2)-margen\nyfinal = (-alto // 2)+margen\nnlineas = ancho // cantidad\nfor i in range(2*nlineas):\n    tortuga.color(random.choice(colores))\n    tortuga.penup()\n    tortuga.goto(xinicial, yinicial-i*nlineas)\n    tortuga.pendown()\n    tortuga.goto(xinicial+i*nlineas, yfinal)",
        "detail": "alineas",
        "documentation": {}
    },
    {
        "label": "yinicial",
        "kind": 5,
        "importPath": "alineas",
        "description": "alineas",
        "peekOfCode": "yinicial = (alto // 2)-margen\nyfinal = (-alto // 2)+margen\nnlineas = ancho // cantidad\nfor i in range(2*nlineas):\n    tortuga.color(random.choice(colores))\n    tortuga.penup()\n    tortuga.goto(xinicial, yinicial-i*nlineas)\n    tortuga.pendown()\n    tortuga.goto(xinicial+i*nlineas, yfinal)\nturtle.done()",
        "detail": "alineas",
        "documentation": {}
    },
    {
        "label": "yfinal",
        "kind": 5,
        "importPath": "alineas",
        "description": "alineas",
        "peekOfCode": "yfinal = (-alto // 2)+margen\nnlineas = ancho // cantidad\nfor i in range(2*nlineas):\n    tortuga.color(random.choice(colores))\n    tortuga.penup()\n    tortuga.goto(xinicial, yinicial-i*nlineas)\n    tortuga.pendown()\n    tortuga.goto(xinicial+i*nlineas, yfinal)\nturtle.done()",
        "detail": "alineas",
        "documentation": {}
    },
    {
        "label": "nlineas",
        "kind": 5,
        "importPath": "alineas",
        "description": "alineas",
        "peekOfCode": "nlineas = ancho // cantidad\nfor i in range(2*nlineas):\n    tortuga.color(random.choice(colores))\n    tortuga.penup()\n    tortuga.goto(xinicial, yinicial-i*nlineas)\n    tortuga.pendown()\n    tortuga.goto(xinicial+i*nlineas, yfinal)\nturtle.done()",
        "detail": "alineas",
        "documentation": {}
    },
    {
        "label": "text_colors",
        "kind": 5,
        "importPath": "colores",
        "description": "colores",
        "peekOfCode": "text_colors = [Fore.BLACK, Fore.RED, Fore.GREEN, Fore.YELLOW, Fore.BLUE, Fore.MAGENTA, Fore.CYAN, Fore.WHITE]\nbg_colors = [Back.BLACK, Back.RED, Back.GREEN, Back.YELLOW, Back.BLUE, Back.MAGENTA, Back.CYAN, Back.WHITE]\ncolor_names = ['BLACK', 'RED', 'GREEN', 'YELLOW', 'BLUE', 'MAGENTA', 'CYAN', 'WHITE']\n# Mostrar colores de texto\nprint(Style.BRIGHT + \"== Colores de texto ==\")\nfor color, name in zip(text_colors, color_names):\n    print(color + f\"Texto en {name}\")\n# Mostrar colores de fondo\nprint(Style.BRIGHT + \"\\n== Colores de fondo ==\")\nfor color, name in zip(bg_colors, color_names):",
        "detail": "colores",
        "documentation": {}
    },
    {
        "label": "bg_colors",
        "kind": 5,
        "importPath": "colores",
        "description": "colores",
        "peekOfCode": "bg_colors = [Back.BLACK, Back.RED, Back.GREEN, Back.YELLOW, Back.BLUE, Back.MAGENTA, Back.CYAN, Back.WHITE]\ncolor_names = ['BLACK', 'RED', 'GREEN', 'YELLOW', 'BLUE', 'MAGENTA', 'CYAN', 'WHITE']\n# Mostrar colores de texto\nprint(Style.BRIGHT + \"== Colores de texto ==\")\nfor color, name in zip(text_colors, color_names):\n    print(color + f\"Texto en {name}\")\n# Mostrar colores de fondo\nprint(Style.BRIGHT + \"\\n== Colores de fondo ==\")\nfor color, name in zip(bg_colors, color_names):\n    print(color + f\" Fondo en {name} \", end=' ')  # Mostrar en una sola línea",
        "detail": "colores",
        "documentation": {}
    },
    {
        "label": "color_names",
        "kind": 5,
        "importPath": "colores",
        "description": "colores",
        "peekOfCode": "color_names = ['BLACK', 'RED', 'GREEN', 'YELLOW', 'BLUE', 'MAGENTA', 'CYAN', 'WHITE']\n# Mostrar colores de texto\nprint(Style.BRIGHT + \"== Colores de texto ==\")\nfor color, name in zip(text_colors, color_names):\n    print(color + f\"Texto en {name}\")\n# Mostrar colores de fondo\nprint(Style.BRIGHT + \"\\n== Colores de fondo ==\")\nfor color, name in zip(bg_colors, color_names):\n    print(color + f\" Fondo en {name} \", end=' ')  # Mostrar en una sola línea\n    print(Style.RESET_ALL)  # Reseteo manual para separar",
        "detail": "colores",
        "documentation": {}
    },
    {
        "label": "obtener_datos",
        "kind": 2,
        "importPath": "colors",
        "description": "colors",
        "peekOfCode": "def obtener_datos():\n    dato1 = entry1.get()\n    dato2 = entry2.get()\n    print(\"Dato 1:\", dato1)\n    print(\"Dato 2:\", dato2)\n# Crear la ventana principal\nroot = tk.Tk()\nroot.title(\"Ingreso de Datos\")\n# Etiqueta y campo de entrada para el primer dato\nlabel1 = tk.Label(root, text=\"Dato 1:\")",
        "detail": "colors",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "colors",
        "description": "colors",
        "peekOfCode": "root = tk.Tk()\nroot.title(\"Ingreso de Datos\")\n# Etiqueta y campo de entrada para el primer dato\nlabel1 = tk.Label(root, text=\"Dato 1:\")\nlabel1.grid(row=0, column=0, padx=5, pady=5)\nentry1 = tk.Entry(root)\nentry1.grid(row=0, column=1, padx=5, pady=5)\n# Etiqueta y campo de entrada para el segundo dato\nlabel2 = tk.Label(root, text=\"Dato 2:\")\nlabel2.grid(row=1, column=0, padx=5, pady=5)",
        "detail": "colors",
        "documentation": {}
    },
    {
        "label": "label1",
        "kind": 5,
        "importPath": "colors",
        "description": "colors",
        "peekOfCode": "label1 = tk.Label(root, text=\"Dato 1:\")\nlabel1.grid(row=0, column=0, padx=5, pady=5)\nentry1 = tk.Entry(root)\nentry1.grid(row=0, column=1, padx=5, pady=5)\n# Etiqueta y campo de entrada para el segundo dato\nlabel2 = tk.Label(root, text=\"Dato 2:\")\nlabel2.grid(row=1, column=0, padx=5, pady=5)\nentry2 = tk.Entry(root)\nentry2.grid(row=1, column=1, padx=5, pady=5)\n# Botón para enviar y procesar los datos",
        "detail": "colors",
        "documentation": {}
    },
    {
        "label": "entry1",
        "kind": 5,
        "importPath": "colors",
        "description": "colors",
        "peekOfCode": "entry1 = tk.Entry(root)\nentry1.grid(row=0, column=1, padx=5, pady=5)\n# Etiqueta y campo de entrada para el segundo dato\nlabel2 = tk.Label(root, text=\"Dato 2:\")\nlabel2.grid(row=1, column=0, padx=5, pady=5)\nentry2 = tk.Entry(root)\nentry2.grid(row=1, column=1, padx=5, pady=5)\n# Botón para enviar y procesar los datos\nbutton = tk.Button(root, text=\"Enviar\", command=obtener_datos)\nbutton.grid(row=2, column=0, columnspan=2, pady=10)",
        "detail": "colors",
        "documentation": {}
    },
    {
        "label": "label2",
        "kind": 5,
        "importPath": "colors",
        "description": "colors",
        "peekOfCode": "label2 = tk.Label(root, text=\"Dato 2:\")\nlabel2.grid(row=1, column=0, padx=5, pady=5)\nentry2 = tk.Entry(root)\nentry2.grid(row=1, column=1, padx=5, pady=5)\n# Botón para enviar y procesar los datos\nbutton = tk.Button(root, text=\"Enviar\", command=obtener_datos)\nbutton.grid(row=2, column=0, columnspan=2, pady=10)\n# Iniciar el loop de la interfaz\nroot.mainloop()",
        "detail": "colors",
        "documentation": {}
    },
    {
        "label": "entry2",
        "kind": 5,
        "importPath": "colors",
        "description": "colors",
        "peekOfCode": "entry2 = tk.Entry(root)\nentry2.grid(row=1, column=1, padx=5, pady=5)\n# Botón para enviar y procesar los datos\nbutton = tk.Button(root, text=\"Enviar\", command=obtener_datos)\nbutton.grid(row=2, column=0, columnspan=2, pady=10)\n# Iniciar el loop de la interfaz\nroot.mainloop()",
        "detail": "colors",
        "documentation": {}
    },
    {
        "label": "button",
        "kind": 5,
        "importPath": "colors",
        "description": "colors",
        "peekOfCode": "button = tk.Button(root, text=\"Enviar\", command=obtener_datos)\nbutton.grid(row=2, column=0, columnspan=2, pady=10)\n# Iniciar el loop de la interfaz\nroot.mainloop()",
        "detail": "colors",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "concentricos",
        "description": "concentricos",
        "peekOfCode": "screen = turtle.Screen()\nscreen.bgcolor(\"black\")\n# Crear la tortuga\npen = turtle.Turtle()\npen.speed(0)\npen.pensize(2)\nw, h = screen.window_width(), screen.window_height()\n# Colores para los cuadrados\ncolors = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"purple\", \"cyan\", \"white\"]\n# Dibujar cuadrados concéntricos",
        "detail": "concentricos",
        "documentation": {}
    },
    {
        "label": "pen",
        "kind": 5,
        "importPath": "concentricos",
        "description": "concentricos",
        "peekOfCode": "pen = turtle.Turtle()\npen.speed(0)\npen.pensize(2)\nw, h = screen.window_width(), screen.window_height()\n# Colores para los cuadrados\ncolors = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"purple\", \"cyan\", \"white\"]\n# Dibujar cuadrados concéntricos\nfor side in range(0, w, 20):\n    pen.penup()\n    # Mover a la esquina superior izquierda del cuadrado",
        "detail": "concentricos",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "concentricos",
        "description": "concentricos",
        "peekOfCode": "colors = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"purple\", \"cyan\", \"white\"]\n# Dibujar cuadrados concéntricos\nfor side in range(0, w, 20):\n    pen.penup()\n    # Mover a la esquina superior izquierda del cuadrado\n    pen.goto(-side/2, side/2)\n    pen.pendown()\n    pen.color(random.choice(colors))\n    for _ in range(4):\n        pen.forward(side)",
        "detail": "concentricos",
        "documentation": {}
    },
    {
        "label": "console",
        "kind": 5,
        "importPath": "conrich",
        "description": "conrich",
        "peekOfCode": "console = Console()\ntable = Table(title=\"Ejemplo de Tabla\")\ntable.add_column(\"Nombre\", style=\"cyan\", no_wrap=True)\ntable.add_column(\"Edad\", style=\"magenta\")\ntable.add_column(\"Teléfono\", style=\"blue\")\ntable.add_row(\"Alice\", \"30\",\"\")\ntable.add_row(\"Bob\", \"25\",\"\")\ntable.add_row(\"Bobi\",\"\",\"3117966610\" )\nconsole.print(table)\n# Texto con colores de primer plano (Fore) y fondo (Back)",
        "detail": "conrich",
        "documentation": {}
    },
    {
        "label": "table",
        "kind": 5,
        "importPath": "conrich",
        "description": "conrich",
        "peekOfCode": "table = Table(title=\"Ejemplo de Tabla\")\ntable.add_column(\"Nombre\", style=\"cyan\", no_wrap=True)\ntable.add_column(\"Edad\", style=\"magenta\")\ntable.add_column(\"Teléfono\", style=\"blue\")\ntable.add_row(\"Alice\", \"30\",\"\")\ntable.add_row(\"Bob\", \"25\",\"\")\ntable.add_row(\"Bobi\",\"\",\"3117966610\" )\nconsole.print(table)\n# Texto con colores de primer plano (Fore) y fondo (Back)\nprint(Fore.RED + \"Este texto es rojo\")",
        "detail": "conrich",
        "documentation": {}
    },
    {
        "label": "ANCHO",
        "kind": 5,
        "importPath": "constantes",
        "description": "constantes",
        "peekOfCode": "ANCHO = 800\nALTO = 600\nJUGADOR_TAMANO = 90\nJUGADOR_SPEED = 9\nDELTA=10\nVELOCIDAD=100",
        "detail": "constantes",
        "documentation": {}
    },
    {
        "label": "ALTO",
        "kind": 5,
        "importPath": "constantes",
        "description": "constantes",
        "peekOfCode": "ALTO = 600\nJUGADOR_TAMANO = 90\nJUGADOR_SPEED = 9\nDELTA=10\nVELOCIDAD=100",
        "detail": "constantes",
        "documentation": {}
    },
    {
        "label": "JUGADOR_TAMANO",
        "kind": 5,
        "importPath": "constantes",
        "description": "constantes",
        "peekOfCode": "JUGADOR_TAMANO = 90\nJUGADOR_SPEED = 9\nDELTA=10\nVELOCIDAD=100",
        "detail": "constantes",
        "documentation": {}
    },
    {
        "label": "JUGADOR_SPEED",
        "kind": 5,
        "importPath": "constantes",
        "description": "constantes",
        "peekOfCode": "JUGADOR_SPEED = 9\nDELTA=10\nVELOCIDAD=100",
        "detail": "constantes",
        "documentation": {}
    },
    {
        "label": "ventana",
        "kind": 5,
        "importPath": "conturtle",
        "description": "conturtle",
        "peekOfCode": "ventana = turtle.Screen()\nventana.setup(width=500, height=500)\nventana.title(\"Dibujo con Turtle\")\nventana.bgcolor(\"lightblue\")\n# Crear la tortuga\nt = turtle.Turtle()\nt.color(\"darkgreen\")\nt.pensize(1)\nt.speed(2)\nancho = (ventana.window_width()) // 2",
        "detail": "conturtle",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "conturtle",
        "description": "conturtle",
        "peekOfCode": "t = turtle.Turtle()\nt.color(\"darkgreen\")\nt.pensize(1)\nt.speed(2)\nancho = (ventana.window_width()) // 2\nj = 0\n# Dibujar una cuadrícula rápidamente con colores aleatorios\nt.speed(0)  # Establecer la velocidad al máximo\nfor x in range(-ancho,ancho,10):\n    t.color(random.random(), random.random(), random.random())  # Color aleatorio",
        "detail": "conturtle",
        "documentation": {}
    },
    {
        "label": "ancho",
        "kind": 5,
        "importPath": "conturtle",
        "description": "conturtle",
        "peekOfCode": "ancho = (ventana.window_width()) // 2\nj = 0\n# Dibujar una cuadrícula rápidamente con colores aleatorios\nt.speed(0)  # Establecer la velocidad al máximo\nfor x in range(-ancho,ancho,10):\n    t.color(random.random(), random.random(), random.random())  # Color aleatorio\n    t.penup()\n    t.goto(-ancho,x)\n    t.pendown()\n    t.goto(x, ancho)",
        "detail": "conturtle",
        "documentation": {}
    },
    {
        "label": "j",
        "kind": 5,
        "importPath": "conturtle",
        "description": "conturtle",
        "peekOfCode": "j = 0\n# Dibujar una cuadrícula rápidamente con colores aleatorios\nt.speed(0)  # Establecer la velocidad al máximo\nfor x in range(-ancho,ancho,10):\n    t.color(random.random(), random.random(), random.random())  # Color aleatorio\n    t.penup()\n    t.goto(-ancho,x)\n    t.pendown()\n    t.goto(x, ancho)\nfor x in range(-ancho,ancho,10):",
        "detail": "conturtle",
        "documentation": {}
    },
    {
        "label": "document",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "document = Document()\n# Title and introduction\ndocument.add_heading('PLAN DE ÁREA DE TECNOLOGÍA E INFORMÁTICA GRADO: ONCE', 0)\ndocument.add_paragraph(\n    'Este documento presenta el plan de contenidos para la enseñanza de JavaScript '\n    'desde lo básico hasta lo avanzado, distribuido en cuatro períodos. Además, se incluyen aspectos de emprendimiento tecnológico, '\n    'enfocados en la construcción de páginas web con JavaScript, para promover la innovación y el desarrollo de proyectos emprendedores.'\n)\n# ---------------------------\n# PERÍODO 1: INTRODUCCIÓN A JAVASCRIPT Y FUNDAMENTOS BÁSICOS",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "table1",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "table1 = document.add_table(rows=2, cols=8)\nhdr_cells = table1.rows[0].cells\nhdr_cells[0].text = 'CONTENIDO TEMÁTICO'\nhdr_cells[1].text = 'LOGRO'\nhdr_cells[2].text = 'INDICADOR DE LOGRO'\nhdr_cells[3].text = 'COMPETENCIA'\nhdr_cells[4].text = 'ACTIVIDADES PEDAGÓGICAS'\nhdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells = table1.rows[0].cells\nhdr_cells[0].text = 'CONTENIDO TEMÁTICO'\nhdr_cells[1].text = 'LOGRO'\nhdr_cells[2].text = 'INDICADOR DE LOGRO'\nhdr_cells[3].text = 'COMPETENCIA'\nhdr_cells[4].text = 'ACTIVIDADES PEDAGÓGICAS'\nhdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table1.rows[1].cells",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[0].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[0].text = 'CONTENIDO TEMÁTICO'\nhdr_cells[1].text = 'LOGRO'\nhdr_cells[2].text = 'INDICADOR DE LOGRO'\nhdr_cells[3].text = 'COMPETENCIA'\nhdr_cells[4].text = 'ACTIVIDADES PEDAGÓGICAS'\nhdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table1.rows[1].cells\nrow_cells[0].text = ('Introducción a JavaScript, sintaxis, variables, tipos de datos, operadores, '",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[1].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[1].text = 'LOGRO'\nhdr_cells[2].text = 'INDICADOR DE LOGRO'\nhdr_cells[3].text = 'COMPETENCIA'\nhdr_cells[4].text = 'ACTIVIDADES PEDAGÓGICAS'\nhdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table1.rows[1].cells\nrow_cells[0].text = ('Introducción a JavaScript, sintaxis, variables, tipos de datos, operadores, '\n                       'estructuras de control, funciones básicas, manipulación del DOM.')",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[2].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[2].text = 'INDICADOR DE LOGRO'\nhdr_cells[3].text = 'COMPETENCIA'\nhdr_cells[4].text = 'ACTIVIDADES PEDAGÓGICAS'\nhdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table1.rows[1].cells\nrow_cells[0].text = ('Introducción a JavaScript, sintaxis, variables, tipos de datos, operadores, '\n                       'estructuras de control, funciones básicas, manipulación del DOM.')\nrow_cells[1].text = 'Comprende la sintaxis básica de JavaScript y escribe scripts simples.'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[3].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[3].text = 'COMPETENCIA'\nhdr_cells[4].text = 'ACTIVIDADES PEDAGÓGICAS'\nhdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table1.rows[1].cells\nrow_cells[0].text = ('Introducción a JavaScript, sintaxis, variables, tipos de datos, operadores, '\n                       'estructuras de control, funciones básicas, manipulación del DOM.')\nrow_cells[1].text = 'Comprende la sintaxis básica de JavaScript y escribe scripts simples.'\nrow_cells[2].text = 'Crea programas simples utilizando estructuras de control.'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[4].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[4].text = 'ACTIVIDADES PEDAGÓGICAS'\nhdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table1.rows[1].cells\nrow_cells[0].text = ('Introducción a JavaScript, sintaxis, variables, tipos de datos, operadores, '\n                       'estructuras de control, funciones básicas, manipulación del DOM.')\nrow_cells[1].text = 'Comprende la sintaxis básica de JavaScript y escribe scripts simples.'\nrow_cells[2].text = 'Crea programas simples utilizando estructuras de control.'\nrow_cells[3].text = 'Cognitiva, Razonamiento lógico'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[5].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table1.rows[1].cells\nrow_cells[0].text = ('Introducción a JavaScript, sintaxis, variables, tipos de datos, operadores, '\n                       'estructuras de control, funciones básicas, manipulación del DOM.')\nrow_cells[1].text = 'Comprende la sintaxis básica de JavaScript y escribe scripts simples.'\nrow_cells[2].text = 'Crea programas simples utilizando estructuras de control.'\nrow_cells[3].text = 'Cognitiva, Razonamiento lógico'\nrow_cells[4].text = 'Ejercicios prácticos, mini proyectos y resolución de problemas en aula.'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[6].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table1.rows[1].cells\nrow_cells[0].text = ('Introducción a JavaScript, sintaxis, variables, tipos de datos, operadores, '\n                       'estructuras de control, funciones básicas, manipulación del DOM.')\nrow_cells[1].text = 'Comprende la sintaxis básica de JavaScript y escribe scripts simples.'\nrow_cells[2].text = 'Crea programas simples utilizando estructuras de control.'\nrow_cells[3].text = 'Cognitiva, Razonamiento lógico'\nrow_cells[4].text = 'Ejercicios prácticos, mini proyectos y resolución de problemas en aula.'\nrow_cells[5].text = 'Evaluación de código y ejercicios resueltos.'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[7].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table1.rows[1].cells\nrow_cells[0].text = ('Introducción a JavaScript, sintaxis, variables, tipos de datos, operadores, '\n                       'estructuras de control, funciones básicas, manipulación del DOM.')\nrow_cells[1].text = 'Comprende la sintaxis básica de JavaScript y escribe scripts simples.'\nrow_cells[2].text = 'Crea programas simples utilizando estructuras de control.'\nrow_cells[3].text = 'Cognitiva, Razonamiento lógico'\nrow_cells[4].text = 'Ejercicios prácticos, mini proyectos y resolución de problemas en aula.'\nrow_cells[5].text = 'Evaluación de código y ejercicios resueltos.'\nrow_cells[6].text = 'Computador, navegador web, editor de código, documentación online.'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells = table1.rows[1].cells\nrow_cells[0].text = ('Introducción a JavaScript, sintaxis, variables, tipos de datos, operadores, '\n                       'estructuras de control, funciones básicas, manipulación del DOM.')\nrow_cells[1].text = 'Comprende la sintaxis básica de JavaScript y escribe scripts simples.'\nrow_cells[2].text = 'Crea programas simples utilizando estructuras de control.'\nrow_cells[3].text = 'Cognitiva, Razonamiento lógico'\nrow_cells[4].text = 'Ejercicios prácticos, mini proyectos y resolución de problemas en aula.'\nrow_cells[5].text = 'Evaluación de código y ejercicios resueltos.'\nrow_cells[6].text = 'Computador, navegador web, editor de código, documentación online.'\nrow_cells[7].text = 'El 80% de los estudiantes demuestran comprensión de los conceptos básicos.'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[0].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[0].text = ('Introducción a JavaScript, sintaxis, variables, tipos de datos, operadores, '\n                       'estructuras de control, funciones básicas, manipulación del DOM.')\nrow_cells[1].text = 'Comprende la sintaxis básica de JavaScript y escribe scripts simples.'\nrow_cells[2].text = 'Crea programas simples utilizando estructuras de control.'\nrow_cells[3].text = 'Cognitiva, Razonamiento lógico'\nrow_cells[4].text = 'Ejercicios prácticos, mini proyectos y resolución de problemas en aula.'\nrow_cells[5].text = 'Evaluación de código y ejercicios resueltos.'\nrow_cells[6].text = 'Computador, navegador web, editor de código, documentación online.'\nrow_cells[7].text = 'El 80% de los estudiantes demuestran comprensión de los conceptos básicos.'\n# ---------------------------",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[1].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[1].text = 'Comprende la sintaxis básica de JavaScript y escribe scripts simples.'\nrow_cells[2].text = 'Crea programas simples utilizando estructuras de control.'\nrow_cells[3].text = 'Cognitiva, Razonamiento lógico'\nrow_cells[4].text = 'Ejercicios prácticos, mini proyectos y resolución de problemas en aula.'\nrow_cells[5].text = 'Evaluación de código y ejercicios resueltos.'\nrow_cells[6].text = 'Computador, navegador web, editor de código, documentación online.'\nrow_cells[7].text = 'El 80% de los estudiantes demuestran comprensión de los conceptos básicos.'\n# ---------------------------\n# PERÍODO 2: JAVASCRIPT INTERMEDIO: FUNCIONES AVANZADAS Y MANEJO DEL DOM\ndocument.add_heading('PERÍODO 2: JAVASCRIPT INTERMEDIO: FUNCIONES AVANZADAS Y MANEJO DEL DOM', level=1)",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[2].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[2].text = 'Crea programas simples utilizando estructuras de control.'\nrow_cells[3].text = 'Cognitiva, Razonamiento lógico'\nrow_cells[4].text = 'Ejercicios prácticos, mini proyectos y resolución de problemas en aula.'\nrow_cells[5].text = 'Evaluación de código y ejercicios resueltos.'\nrow_cells[6].text = 'Computador, navegador web, editor de código, documentación online.'\nrow_cells[7].text = 'El 80% de los estudiantes demuestran comprensión de los conceptos básicos.'\n# ---------------------------\n# PERÍODO 2: JAVASCRIPT INTERMEDIO: FUNCIONES AVANZADAS Y MANEJO DEL DOM\ndocument.add_heading('PERÍODO 2: JAVASCRIPT INTERMEDIO: FUNCIONES AVANZADAS Y MANEJO DEL DOM', level=1)\ndocument.add_paragraph(",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[3].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[3].text = 'Cognitiva, Razonamiento lógico'\nrow_cells[4].text = 'Ejercicios prácticos, mini proyectos y resolución de problemas en aula.'\nrow_cells[5].text = 'Evaluación de código y ejercicios resueltos.'\nrow_cells[6].text = 'Computador, navegador web, editor de código, documentación online.'\nrow_cells[7].text = 'El 80% de los estudiantes demuestran comprensión de los conceptos básicos.'\n# ---------------------------\n# PERÍODO 2: JAVASCRIPT INTERMEDIO: FUNCIONES AVANZADAS Y MANEJO DEL DOM\ndocument.add_heading('PERÍODO 2: JAVASCRIPT INTERMEDIO: FUNCIONES AVANZADAS Y MANEJO DEL DOM', level=1)\ndocument.add_paragraph(\n    'Temática: Introducción a funciones avanzadas (arrow functions, callbacks), manejo de arreglos y objetos, '",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[4].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[4].text = 'Ejercicios prácticos, mini proyectos y resolución de problemas en aula.'\nrow_cells[5].text = 'Evaluación de código y ejercicios resueltos.'\nrow_cells[6].text = 'Computador, navegador web, editor de código, documentación online.'\nrow_cells[7].text = 'El 80% de los estudiantes demuestran comprensión de los conceptos básicos.'\n# ---------------------------\n# PERÍODO 2: JAVASCRIPT INTERMEDIO: FUNCIONES AVANZADAS Y MANEJO DEL DOM\ndocument.add_heading('PERÍODO 2: JAVASCRIPT INTERMEDIO: FUNCIONES AVANZADAS Y MANEJO DEL DOM', level=1)\ndocument.add_paragraph(\n    'Temática: Introducción a funciones avanzadas (arrow functions, callbacks), manejo de arreglos y objetos, '\n    'manipulación del DOM y eventos. Se enfatiza la aplicación de estos conocimientos en el desarrollo de prototipos de páginas web con potencial emprendedor.'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[5].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[5].text = 'Evaluación de código y ejercicios resueltos.'\nrow_cells[6].text = 'Computador, navegador web, editor de código, documentación online.'\nrow_cells[7].text = 'El 80% de los estudiantes demuestran comprensión de los conceptos básicos.'\n# ---------------------------\n# PERÍODO 2: JAVASCRIPT INTERMEDIO: FUNCIONES AVANZADAS Y MANEJO DEL DOM\ndocument.add_heading('PERÍODO 2: JAVASCRIPT INTERMEDIO: FUNCIONES AVANZADAS Y MANEJO DEL DOM', level=1)\ndocument.add_paragraph(\n    'Temática: Introducción a funciones avanzadas (arrow functions, callbacks), manejo de arreglos y objetos, '\n    'manipulación del DOM y eventos. Se enfatiza la aplicación de estos conocimientos en el desarrollo de prototipos de páginas web con potencial emprendedor.'\n)",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[6].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[6].text = 'Computador, navegador web, editor de código, documentación online.'\nrow_cells[7].text = 'El 80% de los estudiantes demuestran comprensión de los conceptos básicos.'\n# ---------------------------\n# PERÍODO 2: JAVASCRIPT INTERMEDIO: FUNCIONES AVANZADAS Y MANEJO DEL DOM\ndocument.add_heading('PERÍODO 2: JAVASCRIPT INTERMEDIO: FUNCIONES AVANZADAS Y MANEJO DEL DOM', level=1)\ndocument.add_paragraph(\n    'Temática: Introducción a funciones avanzadas (arrow functions, callbacks), manejo de arreglos y objetos, '\n    'manipulación del DOM y eventos. Se enfatiza la aplicación de estos conocimientos en el desarrollo de prototipos de páginas web con potencial emprendedor.'\n)\ndocument.add_paragraph('Estándares:')",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[7].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[7].text = 'El 80% de los estudiantes demuestran comprensión de los conceptos básicos.'\n# ---------------------------\n# PERÍODO 2: JAVASCRIPT INTERMEDIO: FUNCIONES AVANZADAS Y MANEJO DEL DOM\ndocument.add_heading('PERÍODO 2: JAVASCRIPT INTERMEDIO: FUNCIONES AVANZADAS Y MANEJO DEL DOM', level=1)\ndocument.add_paragraph(\n    'Temática: Introducción a funciones avanzadas (arrow functions, callbacks), manejo de arreglos y objetos, '\n    'manipulación del DOM y eventos. Se enfatiza la aplicación de estos conocimientos en el desarrollo de prototipos de páginas web con potencial emprendedor.'\n)\ndocument.add_paragraph('Estándares:')\ndocument.add_paragraph('● Diseña y utiliza funciones avanzadas y estructuras de datos en JavaScript.')",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "table2",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "table2 = document.add_table(rows=2, cols=8)\nhdr_cells = table2.rows[0].cells\nhdr_cells[0].text = 'CONTENIDO TEMÁTICO'\nhdr_cells[1].text = 'LOGRO'\nhdr_cells[2].text = 'INDICADOR DE LOGRO'\nhdr_cells[3].text = 'COMPETENCIA'\nhdr_cells[4].text = 'ACTIVIDADES PEDAGÓGICAS'\nhdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells = table2.rows[0].cells\nhdr_cells[0].text = 'CONTENIDO TEMÁTICO'\nhdr_cells[1].text = 'LOGRO'\nhdr_cells[2].text = 'INDICADOR DE LOGRO'\nhdr_cells[3].text = 'COMPETENCIA'\nhdr_cells[4].text = 'ACTIVIDADES PEDAGÓGICAS'\nhdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table2.rows[1].cells",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[0].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[0].text = 'CONTENIDO TEMÁTICO'\nhdr_cells[1].text = 'LOGRO'\nhdr_cells[2].text = 'INDICADOR DE LOGRO'\nhdr_cells[3].text = 'COMPETENCIA'\nhdr_cells[4].text = 'ACTIVIDADES PEDAGÓGICAS'\nhdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table2.rows[1].cells\nrow_cells[0].text = ('Funciones avanzadas (arrow functions, callbacks), manejo de arreglos y objetos, '",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[1].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[1].text = 'LOGRO'\nhdr_cells[2].text = 'INDICADOR DE LOGRO'\nhdr_cells[3].text = 'COMPETENCIA'\nhdr_cells[4].text = 'ACTIVIDADES PEDAGÓGICAS'\nhdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table2.rows[1].cells\nrow_cells[0].text = ('Funciones avanzadas (arrow functions, callbacks), manejo de arreglos y objetos, '\n                       'manipulación del DOM y eventos.')",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[2].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[2].text = 'INDICADOR DE LOGRO'\nhdr_cells[3].text = 'COMPETENCIA'\nhdr_cells[4].text = 'ACTIVIDADES PEDAGÓGICAS'\nhdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table2.rows[1].cells\nrow_cells[0].text = ('Funciones avanzadas (arrow functions, callbacks), manejo de arreglos y objetos, '\n                       'manipulación del DOM y eventos.')\nrow_cells[1].text = 'Aplica conceptos intermedios de JavaScript en la manipulación del DOM y eventos.'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[3].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[3].text = 'COMPETENCIA'\nhdr_cells[4].text = 'ACTIVIDADES PEDAGÓGICAS'\nhdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table2.rows[1].cells\nrow_cells[0].text = ('Funciones avanzadas (arrow functions, callbacks), manejo de arreglos y objetos, '\n                       'manipulación del DOM y eventos.')\nrow_cells[1].text = 'Aplica conceptos intermedios de JavaScript en la manipulación del DOM y eventos.'\nrow_cells[2].text = 'Realiza proyectos que integren funciones avanzadas y manipulación del DOM.'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[4].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[4].text = 'ACTIVIDADES PEDAGÓGICAS'\nhdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table2.rows[1].cells\nrow_cells[0].text = ('Funciones avanzadas (arrow functions, callbacks), manejo de arreglos y objetos, '\n                       'manipulación del DOM y eventos.')\nrow_cells[1].text = 'Aplica conceptos intermedios de JavaScript en la manipulación del DOM y eventos.'\nrow_cells[2].text = 'Realiza proyectos que integren funciones avanzadas y manipulación del DOM.'\nrow_cells[3].text = 'Cognitiva, Analítica'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[5].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table2.rows[1].cells\nrow_cells[0].text = ('Funciones avanzadas (arrow functions, callbacks), manejo de arreglos y objetos, '\n                       'manipulación del DOM y eventos.')\nrow_cells[1].text = 'Aplica conceptos intermedios de JavaScript en la manipulación del DOM y eventos.'\nrow_cells[2].text = 'Realiza proyectos que integren funciones avanzadas y manipulación del DOM.'\nrow_cells[3].text = 'Cognitiva, Analítica'\nrow_cells[4].text = 'Talleres prácticos, ejercicios de manipulación de elementos web y mini aplicaciones interactivas.'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[6].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table2.rows[1].cells\nrow_cells[0].text = ('Funciones avanzadas (arrow functions, callbacks), manejo de arreglos y objetos, '\n                       'manipulación del DOM y eventos.')\nrow_cells[1].text = 'Aplica conceptos intermedios de JavaScript en la manipulación del DOM y eventos.'\nrow_cells[2].text = 'Realiza proyectos que integren funciones avanzadas y manipulación del DOM.'\nrow_cells[3].text = 'Cognitiva, Analítica'\nrow_cells[4].text = 'Talleres prácticos, ejercicios de manipulación de elementos web y mini aplicaciones interactivas.'\nrow_cells[5].text = 'Evaluación de aplicaciones web y revisión de código.'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[7].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table2.rows[1].cells\nrow_cells[0].text = ('Funciones avanzadas (arrow functions, callbacks), manejo de arreglos y objetos, '\n                       'manipulación del DOM y eventos.')\nrow_cells[1].text = 'Aplica conceptos intermedios de JavaScript en la manipulación del DOM y eventos.'\nrow_cells[2].text = 'Realiza proyectos que integren funciones avanzadas y manipulación del DOM.'\nrow_cells[3].text = 'Cognitiva, Analítica'\nrow_cells[4].text = 'Talleres prácticos, ejercicios de manipulación de elementos web y mini aplicaciones interactivas.'\nrow_cells[5].text = 'Evaluación de aplicaciones web y revisión de código.'\nrow_cells[6].text = 'Computador, navegador, editor de código, documentación (MDN).'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells = table2.rows[1].cells\nrow_cells[0].text = ('Funciones avanzadas (arrow functions, callbacks), manejo de arreglos y objetos, '\n                       'manipulación del DOM y eventos.')\nrow_cells[1].text = 'Aplica conceptos intermedios de JavaScript en la manipulación del DOM y eventos.'\nrow_cells[2].text = 'Realiza proyectos que integren funciones avanzadas y manipulación del DOM.'\nrow_cells[3].text = 'Cognitiva, Analítica'\nrow_cells[4].text = 'Talleres prácticos, ejercicios de manipulación de elementos web y mini aplicaciones interactivas.'\nrow_cells[5].text = 'Evaluación de aplicaciones web y revisión de código.'\nrow_cells[6].text = 'Computador, navegador, editor de código, documentación (MDN).'\nrow_cells[7].text = 'El 75% de los estudiantes logran manipular el DOM de forma efectiva.'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[0].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[0].text = ('Funciones avanzadas (arrow functions, callbacks), manejo de arreglos y objetos, '\n                       'manipulación del DOM y eventos.')\nrow_cells[1].text = 'Aplica conceptos intermedios de JavaScript en la manipulación del DOM y eventos.'\nrow_cells[2].text = 'Realiza proyectos que integren funciones avanzadas y manipulación del DOM.'\nrow_cells[3].text = 'Cognitiva, Analítica'\nrow_cells[4].text = 'Talleres prácticos, ejercicios de manipulación de elementos web y mini aplicaciones interactivas.'\nrow_cells[5].text = 'Evaluación de aplicaciones web y revisión de código.'\nrow_cells[6].text = 'Computador, navegador, editor de código, documentación (MDN).'\nrow_cells[7].text = 'El 75% de los estudiantes logran manipular el DOM de forma efectiva.'\n# ---------------------------",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[1].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[1].text = 'Aplica conceptos intermedios de JavaScript en la manipulación del DOM y eventos.'\nrow_cells[2].text = 'Realiza proyectos que integren funciones avanzadas y manipulación del DOM.'\nrow_cells[3].text = 'Cognitiva, Analítica'\nrow_cells[4].text = 'Talleres prácticos, ejercicios de manipulación de elementos web y mini aplicaciones interactivas.'\nrow_cells[5].text = 'Evaluación de aplicaciones web y revisión de código.'\nrow_cells[6].text = 'Computador, navegador, editor de código, documentación (MDN).'\nrow_cells[7].text = 'El 75% de los estudiantes logran manipular el DOM de forma efectiva.'\n# ---------------------------\n# PERÍODO 3: JAVASCRIPT AVANZADO: ASINCRONÍA, APIs Y PROGRAMACIÓN ORIENTADA A OBJETOS\ndocument.add_heading('PERÍODO 3: JAVASCRIPT AVANZADO: ASINCRONÍA, APIs Y PROGRAMACIÓN ORIENTADA A OBJETOS', level=1)",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[2].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[2].text = 'Realiza proyectos que integren funciones avanzadas y manipulación del DOM.'\nrow_cells[3].text = 'Cognitiva, Analítica'\nrow_cells[4].text = 'Talleres prácticos, ejercicios de manipulación de elementos web y mini aplicaciones interactivas.'\nrow_cells[5].text = 'Evaluación de aplicaciones web y revisión de código.'\nrow_cells[6].text = 'Computador, navegador, editor de código, documentación (MDN).'\nrow_cells[7].text = 'El 75% de los estudiantes logran manipular el DOM de forma efectiva.'\n# ---------------------------\n# PERÍODO 3: JAVASCRIPT AVANZADO: ASINCRONÍA, APIs Y PROGRAMACIÓN ORIENTADA A OBJETOS\ndocument.add_heading('PERÍODO 3: JAVASCRIPT AVANZADO: ASINCRONÍA, APIs Y PROGRAMACIÓN ORIENTADA A OBJETOS', level=1)\ndocument.add_paragraph(",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[3].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[3].text = 'Cognitiva, Analítica'\nrow_cells[4].text = 'Talleres prácticos, ejercicios de manipulación de elementos web y mini aplicaciones interactivas.'\nrow_cells[5].text = 'Evaluación de aplicaciones web y revisión de código.'\nrow_cells[6].text = 'Computador, navegador, editor de código, documentación (MDN).'\nrow_cells[7].text = 'El 75% de los estudiantes logran manipular el DOM de forma efectiva.'\n# ---------------------------\n# PERÍODO 3: JAVASCRIPT AVANZADO: ASINCRONÍA, APIs Y PROGRAMACIÓN ORIENTADA A OBJETOS\ndocument.add_heading('PERÍODO 3: JAVASCRIPT AVANZADO: ASINCRONÍA, APIs Y PROGRAMACIÓN ORIENTADA A OBJETOS', level=1)\ndocument.add_paragraph(\n    'Temática: Programación asincrónica con Promises y async/await, consumo de APIs con fetch, '",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[4].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[4].text = 'Talleres prácticos, ejercicios de manipulación de elementos web y mini aplicaciones interactivas.'\nrow_cells[5].text = 'Evaluación de aplicaciones web y revisión de código.'\nrow_cells[6].text = 'Computador, navegador, editor de código, documentación (MDN).'\nrow_cells[7].text = 'El 75% de los estudiantes logran manipular el DOM de forma efectiva.'\n# ---------------------------\n# PERÍODO 3: JAVASCRIPT AVANZADO: ASINCRONÍA, APIs Y PROGRAMACIÓN ORIENTADA A OBJETOS\ndocument.add_heading('PERÍODO 3: JAVASCRIPT AVANZADO: ASINCRONÍA, APIs Y PROGRAMACIÓN ORIENTADA A OBJETOS', level=1)\ndocument.add_paragraph(\n    'Temática: Programación asincrónica con Promises y async/await, consumo de APIs con fetch, '\n    'y fundamentos de la programación orientada a objetos en JavaScript. Se busca que los estudiantes desarrollen soluciones web robustas que puedan ser la base para proyectos emprendedores.'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[5].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[5].text = 'Evaluación de aplicaciones web y revisión de código.'\nrow_cells[6].text = 'Computador, navegador, editor de código, documentación (MDN).'\nrow_cells[7].text = 'El 75% de los estudiantes logran manipular el DOM de forma efectiva.'\n# ---------------------------\n# PERÍODO 3: JAVASCRIPT AVANZADO: ASINCRONÍA, APIs Y PROGRAMACIÓN ORIENTADA A OBJETOS\ndocument.add_heading('PERÍODO 3: JAVASCRIPT AVANZADO: ASINCRONÍA, APIs Y PROGRAMACIÓN ORIENTADA A OBJETOS', level=1)\ndocument.add_paragraph(\n    'Temática: Programación asincrónica con Promises y async/await, consumo de APIs con fetch, '\n    'y fundamentos de la programación orientada a objetos en JavaScript. Se busca que los estudiantes desarrollen soluciones web robustas que puedan ser la base para proyectos emprendedores.'\n)",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[6].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[6].text = 'Computador, navegador, editor de código, documentación (MDN).'\nrow_cells[7].text = 'El 75% de los estudiantes logran manipular el DOM de forma efectiva.'\n# ---------------------------\n# PERÍODO 3: JAVASCRIPT AVANZADO: ASINCRONÍA, APIs Y PROGRAMACIÓN ORIENTADA A OBJETOS\ndocument.add_heading('PERÍODO 3: JAVASCRIPT AVANZADO: ASINCRONÍA, APIs Y PROGRAMACIÓN ORIENTADA A OBJETOS', level=1)\ndocument.add_paragraph(\n    'Temática: Programación asincrónica con Promises y async/await, consumo de APIs con fetch, '\n    'y fundamentos de la programación orientada a objetos en JavaScript. Se busca que los estudiantes desarrollen soluciones web robustas que puedan ser la base para proyectos emprendedores.'\n)\ndocument.add_paragraph('Estándares:')",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[7].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[7].text = 'El 75% de los estudiantes logran manipular el DOM de forma efectiva.'\n# ---------------------------\n# PERÍODO 3: JAVASCRIPT AVANZADO: ASINCRONÍA, APIs Y PROGRAMACIÓN ORIENTADA A OBJETOS\ndocument.add_heading('PERÍODO 3: JAVASCRIPT AVANZADO: ASINCRONÍA, APIs Y PROGRAMACIÓN ORIENTADA A OBJETOS', level=1)\ndocument.add_paragraph(\n    'Temática: Programación asincrónica con Promises y async/await, consumo de APIs con fetch, '\n    'y fundamentos de la programación orientada a objetos en JavaScript. Se busca que los estudiantes desarrollen soluciones web robustas que puedan ser la base para proyectos emprendedores.'\n)\ndocument.add_paragraph('Estándares:')\ndocument.add_paragraph('● Comprende y aplica técnicas de programación asincrónica en JavaScript.')",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "table3",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "table3 = document.add_table(rows=2, cols=8)\nhdr_cells = table3.rows[0].cells\nhdr_cells[0].text = 'CONTENIDO TEMÁTICO'\nhdr_cells[1].text = 'LOGRO'\nhdr_cells[2].text = 'INDICADOR DE LOGRO'\nhdr_cells[3].text = 'COMPETENCIA'\nhdr_cells[4].text = 'ACTIVIDADES PEDAGÓGICAS'\nhdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells = table3.rows[0].cells\nhdr_cells[0].text = 'CONTENIDO TEMÁTICO'\nhdr_cells[1].text = 'LOGRO'\nhdr_cells[2].text = 'INDICADOR DE LOGRO'\nhdr_cells[3].text = 'COMPETENCIA'\nhdr_cells[4].text = 'ACTIVIDADES PEDAGÓGICAS'\nhdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table3.rows[1].cells",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[0].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[0].text = 'CONTENIDO TEMÁTICO'\nhdr_cells[1].text = 'LOGRO'\nhdr_cells[2].text = 'INDICADOR DE LOGRO'\nhdr_cells[3].text = 'COMPETENCIA'\nhdr_cells[4].text = 'ACTIVIDADES PEDAGÓGICAS'\nhdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table3.rows[1].cells\nrow_cells[0].text = ('Promises, async/await, consumo de APIs (fetch) y fundamentos de la programación orientada a objetos.')",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[1].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[1].text = 'LOGRO'\nhdr_cells[2].text = 'INDICADOR DE LOGRO'\nhdr_cells[3].text = 'COMPETENCIA'\nhdr_cells[4].text = 'ACTIVIDADES PEDAGÓGICAS'\nhdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table3.rows[1].cells\nrow_cells[0].text = ('Promises, async/await, consumo de APIs (fetch) y fundamentos de la programación orientada a objetos.')\nrow_cells[1].text = 'Desarrolla aplicaciones que integran consumo de APIs y POO.'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[2].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[2].text = 'INDICADOR DE LOGRO'\nhdr_cells[3].text = 'COMPETENCIA'\nhdr_cells[4].text = 'ACTIVIDADES PEDAGÓGICAS'\nhdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table3.rows[1].cells\nrow_cells[0].text = ('Promises, async/await, consumo de APIs (fetch) y fundamentos de la programación orientada a objetos.')\nrow_cells[1].text = 'Desarrolla aplicaciones que integran consumo de APIs y POO.'\nrow_cells[2].text = 'Implementa código asincrónico y estructuras de POO en proyectos.'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[3].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[3].text = 'COMPETENCIA'\nhdr_cells[4].text = 'ACTIVIDADES PEDAGÓGICAS'\nhdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table3.rows[1].cells\nrow_cells[0].text = ('Promises, async/await, consumo de APIs (fetch) y fundamentos de la programación orientada a objetos.')\nrow_cells[1].text = 'Desarrolla aplicaciones que integran consumo de APIs y POO.'\nrow_cells[2].text = 'Implementa código asincrónico y estructuras de POO en proyectos.'\nrow_cells[3].text = 'Cognitiva, Resolución de problemas, Creativa'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[4].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[4].text = 'ACTIVIDADES PEDAGÓGICAS'\nhdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table3.rows[1].cells\nrow_cells[0].text = ('Promises, async/await, consumo de APIs (fetch) y fundamentos de la programación orientada a objetos.')\nrow_cells[1].text = 'Desarrolla aplicaciones que integran consumo de APIs y POO.'\nrow_cells[2].text = 'Implementa código asincrónico y estructuras de POO en proyectos.'\nrow_cells[3].text = 'Cognitiva, Resolución de problemas, Creativa'\nrow_cells[4].text = 'Proyectos prácticos, desarrollo de módulos, integración de APIs y ejercicios colaborativos.'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[5].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table3.rows[1].cells\nrow_cells[0].text = ('Promises, async/await, consumo de APIs (fetch) y fundamentos de la programación orientada a objetos.')\nrow_cells[1].text = 'Desarrolla aplicaciones que integran consumo de APIs y POO.'\nrow_cells[2].text = 'Implementa código asincrónico y estructuras de POO en proyectos.'\nrow_cells[3].text = 'Cognitiva, Resolución de problemas, Creativa'\nrow_cells[4].text = 'Proyectos prácticos, desarrollo de módulos, integración de APIs y ejercicios colaborativos.'\nrow_cells[5].text = 'Evaluación de proyectos, pruebas prácticas y análisis de código.'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[6].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table3.rows[1].cells\nrow_cells[0].text = ('Promises, async/await, consumo de APIs (fetch) y fundamentos de la programación orientada a objetos.')\nrow_cells[1].text = 'Desarrolla aplicaciones que integran consumo de APIs y POO.'\nrow_cells[2].text = 'Implementa código asincrónico y estructuras de POO en proyectos.'\nrow_cells[3].text = 'Cognitiva, Resolución de problemas, Creativa'\nrow_cells[4].text = 'Proyectos prácticos, desarrollo de módulos, integración de APIs y ejercicios colaborativos.'\nrow_cells[5].text = 'Evaluación de proyectos, pruebas prácticas y análisis de código.'\nrow_cells[6].text = 'Computador, navegador, editores de código, documentación (MDN, API docs).'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[7].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table3.rows[1].cells\nrow_cells[0].text = ('Promises, async/await, consumo de APIs (fetch) y fundamentos de la programación orientada a objetos.')\nrow_cells[1].text = 'Desarrolla aplicaciones que integran consumo de APIs y POO.'\nrow_cells[2].text = 'Implementa código asincrónico y estructuras de POO en proyectos.'\nrow_cells[3].text = 'Cognitiva, Resolución de problemas, Creativa'\nrow_cells[4].text = 'Proyectos prácticos, desarrollo de módulos, integración de APIs y ejercicios colaborativos.'\nrow_cells[5].text = 'Evaluación de proyectos, pruebas prácticas y análisis de código.'\nrow_cells[6].text = 'Computador, navegador, editores de código, documentación (MDN, API docs).'\nrow_cells[7].text = 'El 70% de los estudiantes desarrollan aplicaciones que consumen APIs y aplican POO.'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells = table3.rows[1].cells\nrow_cells[0].text = ('Promises, async/await, consumo de APIs (fetch) y fundamentos de la programación orientada a objetos.')\nrow_cells[1].text = 'Desarrolla aplicaciones que integran consumo de APIs y POO.'\nrow_cells[2].text = 'Implementa código asincrónico y estructuras de POO en proyectos.'\nrow_cells[3].text = 'Cognitiva, Resolución de problemas, Creativa'\nrow_cells[4].text = 'Proyectos prácticos, desarrollo de módulos, integración de APIs y ejercicios colaborativos.'\nrow_cells[5].text = 'Evaluación de proyectos, pruebas prácticas y análisis de código.'\nrow_cells[6].text = 'Computador, navegador, editores de código, documentación (MDN, API docs).'\nrow_cells[7].text = 'El 70% de los estudiantes desarrollan aplicaciones que consumen APIs y aplican POO.'\n# ---------------------------",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[0].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[0].text = ('Promises, async/await, consumo de APIs (fetch) y fundamentos de la programación orientada a objetos.')\nrow_cells[1].text = 'Desarrolla aplicaciones que integran consumo de APIs y POO.'\nrow_cells[2].text = 'Implementa código asincrónico y estructuras de POO en proyectos.'\nrow_cells[3].text = 'Cognitiva, Resolución de problemas, Creativa'\nrow_cells[4].text = 'Proyectos prácticos, desarrollo de módulos, integración de APIs y ejercicios colaborativos.'\nrow_cells[5].text = 'Evaluación de proyectos, pruebas prácticas y análisis de código.'\nrow_cells[6].text = 'Computador, navegador, editores de código, documentación (MDN, API docs).'\nrow_cells[7].text = 'El 70% de los estudiantes desarrollan aplicaciones que consumen APIs y aplican POO.'\n# ---------------------------\n# PERÍODO 4: DESARROLLO DE PROYECTOS WEB INTERACTIVOS CON JAVASCRIPT",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[1].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[1].text = 'Desarrolla aplicaciones que integran consumo de APIs y POO.'\nrow_cells[2].text = 'Implementa código asincrónico y estructuras de POO en proyectos.'\nrow_cells[3].text = 'Cognitiva, Resolución de problemas, Creativa'\nrow_cells[4].text = 'Proyectos prácticos, desarrollo de módulos, integración de APIs y ejercicios colaborativos.'\nrow_cells[5].text = 'Evaluación de proyectos, pruebas prácticas y análisis de código.'\nrow_cells[6].text = 'Computador, navegador, editores de código, documentación (MDN, API docs).'\nrow_cells[7].text = 'El 70% de los estudiantes desarrollan aplicaciones que consumen APIs y aplican POO.'\n# ---------------------------\n# PERÍODO 4: DESARROLLO DE PROYECTOS WEB INTERACTIVOS CON JAVASCRIPT\ndocument.add_heading('PERÍODO 4: DESARROLLO DE PROYECTOS WEB INTERACTIVOS CON JAVASCRIPT', level=1)",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[2].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[2].text = 'Implementa código asincrónico y estructuras de POO en proyectos.'\nrow_cells[3].text = 'Cognitiva, Resolución de problemas, Creativa'\nrow_cells[4].text = 'Proyectos prácticos, desarrollo de módulos, integración de APIs y ejercicios colaborativos.'\nrow_cells[5].text = 'Evaluación de proyectos, pruebas prácticas y análisis de código.'\nrow_cells[6].text = 'Computador, navegador, editores de código, documentación (MDN, API docs).'\nrow_cells[7].text = 'El 70% de los estudiantes desarrollan aplicaciones que consumen APIs y aplican POO.'\n# ---------------------------\n# PERÍODO 4: DESARROLLO DE PROYECTOS WEB INTERACTIVOS CON JAVASCRIPT\ndocument.add_heading('PERÍODO 4: DESARROLLO DE PROYECTOS WEB INTERACTIVOS CON JAVASCRIPT', level=1)\ndocument.add_paragraph(",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[3].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[3].text = 'Cognitiva, Resolución de problemas, Creativa'\nrow_cells[4].text = 'Proyectos prácticos, desarrollo de módulos, integración de APIs y ejercicios colaborativos.'\nrow_cells[5].text = 'Evaluación de proyectos, pruebas prácticas y análisis de código.'\nrow_cells[6].text = 'Computador, navegador, editores de código, documentación (MDN, API docs).'\nrow_cells[7].text = 'El 70% de los estudiantes desarrollan aplicaciones que consumen APIs y aplican POO.'\n# ---------------------------\n# PERÍODO 4: DESARROLLO DE PROYECTOS WEB INTERACTIVOS CON JAVASCRIPT\ndocument.add_heading('PERÍODO 4: DESARROLLO DE PROYECTOS WEB INTERACTIVOS CON JAVASCRIPT', level=1)\ndocument.add_paragraph(\n    'Temática: Desarrollo integral de una aplicación web interactiva utilizando JavaScript, '",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[4].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[4].text = 'Proyectos prácticos, desarrollo de módulos, integración de APIs y ejercicios colaborativos.'\nrow_cells[5].text = 'Evaluación de proyectos, pruebas prácticas y análisis de código.'\nrow_cells[6].text = 'Computador, navegador, editores de código, documentación (MDN, API docs).'\nrow_cells[7].text = 'El 70% de los estudiantes desarrollan aplicaciones que consumen APIs y aplican POO.'\n# ---------------------------\n# PERÍODO 4: DESARROLLO DE PROYECTOS WEB INTERACTIVOS CON JAVASCRIPT\ndocument.add_heading('PERÍODO 4: DESARROLLO DE PROYECTOS WEB INTERACTIVOS CON JAVASCRIPT', level=1)\ndocument.add_paragraph(\n    'Temática: Desarrollo integral de una aplicación web interactiva utilizando JavaScript, '\n    'integrando los conocimientos adquiridos en los períodos anteriores. Este período enfatiza la realización de proyectos con un enfoque práctico que puede transformarse en iniciativas emprendedoras.'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[5].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[5].text = 'Evaluación de proyectos, pruebas prácticas y análisis de código.'\nrow_cells[6].text = 'Computador, navegador, editores de código, documentación (MDN, API docs).'\nrow_cells[7].text = 'El 70% de los estudiantes desarrollan aplicaciones que consumen APIs y aplican POO.'\n# ---------------------------\n# PERÍODO 4: DESARROLLO DE PROYECTOS WEB INTERACTIVOS CON JAVASCRIPT\ndocument.add_heading('PERÍODO 4: DESARROLLO DE PROYECTOS WEB INTERACTIVOS CON JAVASCRIPT', level=1)\ndocument.add_paragraph(\n    'Temática: Desarrollo integral de una aplicación web interactiva utilizando JavaScript, '\n    'integrando los conocimientos adquiridos en los períodos anteriores. Este período enfatiza la realización de proyectos con un enfoque práctico que puede transformarse en iniciativas emprendedoras.'\n)",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[6].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[6].text = 'Computador, navegador, editores de código, documentación (MDN, API docs).'\nrow_cells[7].text = 'El 70% de los estudiantes desarrollan aplicaciones que consumen APIs y aplican POO.'\n# ---------------------------\n# PERÍODO 4: DESARROLLO DE PROYECTOS WEB INTERACTIVOS CON JAVASCRIPT\ndocument.add_heading('PERÍODO 4: DESARROLLO DE PROYECTOS WEB INTERACTIVOS CON JAVASCRIPT', level=1)\ndocument.add_paragraph(\n    'Temática: Desarrollo integral de una aplicación web interactiva utilizando JavaScript, '\n    'integrando los conocimientos adquiridos en los períodos anteriores. Este período enfatiza la realización de proyectos con un enfoque práctico que puede transformarse en iniciativas emprendedoras.'\n)\ndocument.add_paragraph('Estándares:')",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[7].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[7].text = 'El 70% de los estudiantes desarrollan aplicaciones que consumen APIs y aplican POO.'\n# ---------------------------\n# PERÍODO 4: DESARROLLO DE PROYECTOS WEB INTERACTIVOS CON JAVASCRIPT\ndocument.add_heading('PERÍODO 4: DESARROLLO DE PROYECTOS WEB INTERACTIVOS CON JAVASCRIPT', level=1)\ndocument.add_paragraph(\n    'Temática: Desarrollo integral de una aplicación web interactiva utilizando JavaScript, '\n    'integrando los conocimientos adquiridos en los períodos anteriores. Este período enfatiza la realización de proyectos con un enfoque práctico que puede transformarse en iniciativas emprendedoras.'\n)\ndocument.add_paragraph('Estándares:')\ndocument.add_paragraph('● Aplica de manera integral los conocimientos de JavaScript en el desarrollo de proyectos.')",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "table4",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "table4 = document.add_table(rows=2, cols=8)\nhdr_cells = table4.rows[0].cells\nhdr_cells[0].text = 'CONTENIDO TEMÁTICO'\nhdr_cells[1].text = 'LOGRO'\nhdr_cells[2].text = 'INDICADOR DE LOGRO'\nhdr_cells[3].text = 'COMPETENCIA'\nhdr_cells[4].text = 'ACTIVIDADES PEDAGÓGICAS'\nhdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells = table4.rows[0].cells\nhdr_cells[0].text = 'CONTENIDO TEMÁTICO'\nhdr_cells[1].text = 'LOGRO'\nhdr_cells[2].text = 'INDICADOR DE LOGRO'\nhdr_cells[3].text = 'COMPETENCIA'\nhdr_cells[4].text = 'ACTIVIDADES PEDAGÓGICAS'\nhdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table4.rows[1].cells",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[0].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[0].text = 'CONTENIDO TEMÁTICO'\nhdr_cells[1].text = 'LOGRO'\nhdr_cells[2].text = 'INDICADOR DE LOGRO'\nhdr_cells[3].text = 'COMPETENCIA'\nhdr_cells[4].text = 'ACTIVIDADES PEDAGÓGICAS'\nhdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table4.rows[1].cells\nrow_cells[0].text = ('Diseño y desarrollo de una aplicación web interactiva, integración de APIs, manejo avanzado del DOM, '",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[1].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[1].text = 'LOGRO'\nhdr_cells[2].text = 'INDICADOR DE LOGRO'\nhdr_cells[3].text = 'COMPETENCIA'\nhdr_cells[4].text = 'ACTIVIDADES PEDAGÓGICAS'\nhdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table4.rows[1].cells\nrow_cells[0].text = ('Diseño y desarrollo de una aplicación web interactiva, integración de APIs, manejo avanzado del DOM, '\n                       'depuración y optimización.')",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[2].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[2].text = 'INDICADOR DE LOGRO'\nhdr_cells[3].text = 'COMPETENCIA'\nhdr_cells[4].text = 'ACTIVIDADES PEDAGÓGICAS'\nhdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table4.rows[1].cells\nrow_cells[0].text = ('Diseño y desarrollo de una aplicación web interactiva, integración de APIs, manejo avanzado del DOM, '\n                       'depuración y optimización.')\nrow_cells[1].text = 'Desarrolla un proyecto final completo utilizando JavaScript.'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[3].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[3].text = 'COMPETENCIA'\nhdr_cells[4].text = 'ACTIVIDADES PEDAGÓGICAS'\nhdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table4.rows[1].cells\nrow_cells[0].text = ('Diseño y desarrollo de una aplicación web interactiva, integración de APIs, manejo avanzado del DOM, '\n                       'depuración y optimización.')\nrow_cells[1].text = 'Desarrolla un proyecto final completo utilizando JavaScript.'\nrow_cells[2].text = ('Presenta un proyecto funcional con interactividad, consumo de APIs y aplicación de buenas prácticas en el código.')",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[4].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[4].text = 'ACTIVIDADES PEDAGÓGICAS'\nhdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table4.rows[1].cells\nrow_cells[0].text = ('Diseño y desarrollo de una aplicación web interactiva, integración de APIs, manejo avanzado del DOM, '\n                       'depuración y optimización.')\nrow_cells[1].text = 'Desarrolla un proyecto final completo utilizando JavaScript.'\nrow_cells[2].text = ('Presenta un proyecto funcional con interactividad, consumo de APIs y aplicación de buenas prácticas en el código.')\nrow_cells[3].text = 'Cognitiva, Trabajo en equipo, Creativa, Comunicación'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[5].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table4.rows[1].cells\nrow_cells[0].text = ('Diseño y desarrollo de una aplicación web interactiva, integración de APIs, manejo avanzado del DOM, '\n                       'depuración y optimización.')\nrow_cells[1].text = 'Desarrolla un proyecto final completo utilizando JavaScript.'\nrow_cells[2].text = ('Presenta un proyecto funcional con interactividad, consumo de APIs y aplicación de buenas prácticas en el código.')\nrow_cells[3].text = 'Cognitiva, Trabajo en equipo, Creativa, Comunicación'\nrow_cells[4].text = ('Desarrollo de proyecto en equipo o individual, presentaciones, revisión de código y retroalimentación.')",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[6].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table4.rows[1].cells\nrow_cells[0].text = ('Diseño y desarrollo de una aplicación web interactiva, integración de APIs, manejo avanzado del DOM, '\n                       'depuración y optimización.')\nrow_cells[1].text = 'Desarrolla un proyecto final completo utilizando JavaScript.'\nrow_cells[2].text = ('Presenta un proyecto funcional con interactividad, consumo de APIs y aplicación de buenas prácticas en el código.')\nrow_cells[3].text = 'Cognitiva, Trabajo en equipo, Creativa, Comunicación'\nrow_cells[4].text = ('Desarrollo de proyecto en equipo o individual, presentaciones, revisión de código y retroalimentación.')\nrow_cells[5].text = 'Evaluación del proyecto final, presentaciones y análisis de código.'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[7].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table4.rows[1].cells\nrow_cells[0].text = ('Diseño y desarrollo de una aplicación web interactiva, integración de APIs, manejo avanzado del DOM, '\n                       'depuración y optimización.')\nrow_cells[1].text = 'Desarrolla un proyecto final completo utilizando JavaScript.'\nrow_cells[2].text = ('Presenta un proyecto funcional con interactividad, consumo de APIs y aplicación de buenas prácticas en el código.')\nrow_cells[3].text = 'Cognitiva, Trabajo en equipo, Creativa, Comunicación'\nrow_cells[4].text = ('Desarrollo de proyecto en equipo o individual, presentaciones, revisión de código y retroalimentación.')\nrow_cells[5].text = 'Evaluación del proyecto final, presentaciones y análisis de código.'\nrow_cells[6].text = 'Computador, navegador, editor de código, herramientas de desarrollo, servidores web.'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells = table4.rows[1].cells\nrow_cells[0].text = ('Diseño y desarrollo de una aplicación web interactiva, integración de APIs, manejo avanzado del DOM, '\n                       'depuración y optimización.')\nrow_cells[1].text = 'Desarrolla un proyecto final completo utilizando JavaScript.'\nrow_cells[2].text = ('Presenta un proyecto funcional con interactividad, consumo de APIs y aplicación de buenas prácticas en el código.')\nrow_cells[3].text = 'Cognitiva, Trabajo en equipo, Creativa, Comunicación'\nrow_cells[4].text = ('Desarrollo de proyecto en equipo o individual, presentaciones, revisión de código y retroalimentación.')\nrow_cells[5].text = 'Evaluación del proyecto final, presentaciones y análisis de código.'\nrow_cells[6].text = 'Computador, navegador, editor de código, herramientas de desarrollo, servidores web.'\nrow_cells[7].text = 'El 70% de los estudiantes presentan proyectos web interactivos completos y funcionales.'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[0].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[0].text = ('Diseño y desarrollo de una aplicación web interactiva, integración de APIs, manejo avanzado del DOM, '\n                       'depuración y optimización.')\nrow_cells[1].text = 'Desarrolla un proyecto final completo utilizando JavaScript.'\nrow_cells[2].text = ('Presenta un proyecto funcional con interactividad, consumo de APIs y aplicación de buenas prácticas en el código.')\nrow_cells[3].text = 'Cognitiva, Trabajo en equipo, Creativa, Comunicación'\nrow_cells[4].text = ('Desarrollo de proyecto en equipo o individual, presentaciones, revisión de código y retroalimentación.')\nrow_cells[5].text = 'Evaluación del proyecto final, presentaciones y análisis de código.'\nrow_cells[6].text = 'Computador, navegador, editor de código, herramientas de desarrollo, servidores web.'\nrow_cells[7].text = 'El 70% de los estudiantes presentan proyectos web interactivos completos y funcionales.'\n# ---------------------------",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[1].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[1].text = 'Desarrolla un proyecto final completo utilizando JavaScript.'\nrow_cells[2].text = ('Presenta un proyecto funcional con interactividad, consumo de APIs y aplicación de buenas prácticas en el código.')\nrow_cells[3].text = 'Cognitiva, Trabajo en equipo, Creativa, Comunicación'\nrow_cells[4].text = ('Desarrollo de proyecto en equipo o individual, presentaciones, revisión de código y retroalimentación.')\nrow_cells[5].text = 'Evaluación del proyecto final, presentaciones y análisis de código.'\nrow_cells[6].text = 'Computador, navegador, editor de código, herramientas de desarrollo, servidores web.'\nrow_cells[7].text = 'El 70% de los estudiantes presentan proyectos web interactivos completos y funcionales.'\n# ---------------------------\n# NUEVA SECCIÓN: ASPECTOS DE EMPRENDIMIENTO TECNOLÓGICO EN EL DESARROLLO WEB CON JAVASCRIPT\ndocument.add_heading('ASPECTOS DE EMPRENDIMIENTO TECNOLÓGICO EN EL DESARROLLO WEB CON JAVASCRIPT', level=1)",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[2].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[2].text = ('Presenta un proyecto funcional con interactividad, consumo de APIs y aplicación de buenas prácticas en el código.')\nrow_cells[3].text = 'Cognitiva, Trabajo en equipo, Creativa, Comunicación'\nrow_cells[4].text = ('Desarrollo de proyecto en equipo o individual, presentaciones, revisión de código y retroalimentación.')\nrow_cells[5].text = 'Evaluación del proyecto final, presentaciones y análisis de código.'\nrow_cells[6].text = 'Computador, navegador, editor de código, herramientas de desarrollo, servidores web.'\nrow_cells[7].text = 'El 70% de los estudiantes presentan proyectos web interactivos completos y funcionales.'\n# ---------------------------\n# NUEVA SECCIÓN: ASPECTOS DE EMPRENDIMIENTO TECNOLÓGICO EN EL DESARROLLO WEB CON JAVASCRIPT\ndocument.add_heading('ASPECTOS DE EMPRENDIMIENTO TECNOLÓGICO EN EL DESARROLLO WEB CON JAVASCRIPT', level=1)\ndocument.add_paragraph(",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[3].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[3].text = 'Cognitiva, Trabajo en equipo, Creativa, Comunicación'\nrow_cells[4].text = ('Desarrollo de proyecto en equipo o individual, presentaciones, revisión de código y retroalimentación.')\nrow_cells[5].text = 'Evaluación del proyecto final, presentaciones y análisis de código.'\nrow_cells[6].text = 'Computador, navegador, editor de código, herramientas de desarrollo, servidores web.'\nrow_cells[7].text = 'El 70% de los estudiantes presentan proyectos web interactivos completos y funcionales.'\n# ---------------------------\n# NUEVA SECCIÓN: ASPECTOS DE EMPRENDIMIENTO TECNOLÓGICO EN EL DESARROLLO WEB CON JAVASCRIPT\ndocument.add_heading('ASPECTOS DE EMPRENDIMIENTO TECNOLÓGICO EN EL DESARROLLO WEB CON JAVASCRIPT', level=1)\ndocument.add_paragraph(\n    'Esta sección aborda la integración de competencias emprendedoras en el ámbito del desarrollo web, '",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[4].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[4].text = ('Desarrollo de proyecto en equipo o individual, presentaciones, revisión de código y retroalimentación.')\nrow_cells[5].text = 'Evaluación del proyecto final, presentaciones y análisis de código.'\nrow_cells[6].text = 'Computador, navegador, editor de código, herramientas de desarrollo, servidores web.'\nrow_cells[7].text = 'El 70% de los estudiantes presentan proyectos web interactivos completos y funcionales.'\n# ---------------------------\n# NUEVA SECCIÓN: ASPECTOS DE EMPRENDIMIENTO TECNOLÓGICO EN EL DESARROLLO WEB CON JAVASCRIPT\ndocument.add_heading('ASPECTOS DE EMPRENDIMIENTO TECNOLÓGICO EN EL DESARROLLO WEB CON JAVASCRIPT', level=1)\ndocument.add_paragraph(\n    'Esta sección aborda la integración de competencias emprendedoras en el ámbito del desarrollo web, '\n    'focalizándose en la construcción de páginas web con JavaScript como herramienta para innovar y generar proyectos con viabilidad de negocio. '",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[5].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[5].text = 'Evaluación del proyecto final, presentaciones y análisis de código.'\nrow_cells[6].text = 'Computador, navegador, editor de código, herramientas de desarrollo, servidores web.'\nrow_cells[7].text = 'El 70% de los estudiantes presentan proyectos web interactivos completos y funcionales.'\n# ---------------------------\n# NUEVA SECCIÓN: ASPECTOS DE EMPRENDIMIENTO TECNOLÓGICO EN EL DESARROLLO WEB CON JAVASCRIPT\ndocument.add_heading('ASPECTOS DE EMPRENDIMIENTO TECNOLÓGICO EN EL DESARROLLO WEB CON JAVASCRIPT', level=1)\ndocument.add_paragraph(\n    'Esta sección aborda la integración de competencias emprendedoras en el ámbito del desarrollo web, '\n    'focalizándose en la construcción de páginas web con JavaScript como herramienta para innovar y generar proyectos con viabilidad de negocio. '\n    'Se incluyen temas relacionados con la identificación de oportunidades de mercado, diseño de modelos de negocio, estrategias de marketing digital, '",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[6].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[6].text = 'Computador, navegador, editor de código, herramientas de desarrollo, servidores web.'\nrow_cells[7].text = 'El 70% de los estudiantes presentan proyectos web interactivos completos y funcionales.'\n# ---------------------------\n# NUEVA SECCIÓN: ASPECTOS DE EMPRENDIMIENTO TECNOLÓGICO EN EL DESARROLLO WEB CON JAVASCRIPT\ndocument.add_heading('ASPECTOS DE EMPRENDIMIENTO TECNOLÓGICO EN EL DESARROLLO WEB CON JAVASCRIPT', level=1)\ndocument.add_paragraph(\n    'Esta sección aborda la integración de competencias emprendedoras en el ámbito del desarrollo web, '\n    'focalizándose en la construcción de páginas web con JavaScript como herramienta para innovar y generar proyectos con viabilidad de negocio. '\n    'Se incluyen temas relacionados con la identificación de oportunidades de mercado, diseño de modelos de negocio, estrategias de marketing digital, '\n    'creación de prototipos (MVP), y gestión de proyectos tecnológicos.'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[7].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[7].text = 'El 70% de los estudiantes presentan proyectos web interactivos completos y funcionales.'\n# ---------------------------\n# NUEVA SECCIÓN: ASPECTOS DE EMPRENDIMIENTO TECNOLÓGICO EN EL DESARROLLO WEB CON JAVASCRIPT\ndocument.add_heading('ASPECTOS DE EMPRENDIMIENTO TECNOLÓGICO EN EL DESARROLLO WEB CON JAVASCRIPT', level=1)\ndocument.add_paragraph(\n    'Esta sección aborda la integración de competencias emprendedoras en el ámbito del desarrollo web, '\n    'focalizándose en la construcción de páginas web con JavaScript como herramienta para innovar y generar proyectos con viabilidad de negocio. '\n    'Se incluyen temas relacionados con la identificación de oportunidades de mercado, diseño de modelos de negocio, estrategias de marketing digital, '\n    'creación de prototipos (MVP), y gestión de proyectos tecnológicos.'\n)",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "table5",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "table5 = document.add_table(rows=2, cols=8)\nhdr_cells = table5.rows[0].cells\nhdr_cells[0].text = 'CONTENIDO TEMÁTICO'\nhdr_cells[1].text = 'LOGRO'\nhdr_cells[2].text = 'INDICADOR DE LOGRO'\nhdr_cells[3].text = 'COMPETENCIA'\nhdr_cells[4].text = 'ACTIVIDADES PEDAGÓGICAS'\nhdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells = table5.rows[0].cells\nhdr_cells[0].text = 'CONTENIDO TEMÁTICO'\nhdr_cells[1].text = 'LOGRO'\nhdr_cells[2].text = 'INDICADOR DE LOGRO'\nhdr_cells[3].text = 'COMPETENCIA'\nhdr_cells[4].text = 'ACTIVIDADES PEDAGÓGICAS'\nhdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table5.rows[1].cells",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[0].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[0].text = 'CONTENIDO TEMÁTICO'\nhdr_cells[1].text = 'LOGRO'\nhdr_cells[2].text = 'INDICADOR DE LOGRO'\nhdr_cells[3].text = 'COMPETENCIA'\nhdr_cells[4].text = 'ACTIVIDADES PEDAGÓGICAS'\nhdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table5.rows[1].cells\nrow_cells[0].text = ('Análisis de oportunidades de negocio digital, diseño de modelos de negocio, estrategias de marketing digital, '",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[1].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[1].text = 'LOGRO'\nhdr_cells[2].text = 'INDICADOR DE LOGRO'\nhdr_cells[3].text = 'COMPETENCIA'\nhdr_cells[4].text = 'ACTIVIDADES PEDAGÓGICAS'\nhdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table5.rows[1].cells\nrow_cells[0].text = ('Análisis de oportunidades de negocio digital, diseño de modelos de negocio, estrategias de marketing digital, '\n                       'creación de prototipos (MVP) y gestión de proyectos tecnológicos aplicados a el desarrollo de páginas web.')",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[2].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[2].text = 'INDICADOR DE LOGRO'\nhdr_cells[3].text = 'COMPETENCIA'\nhdr_cells[4].text = 'ACTIVIDADES PEDAGÓGICAS'\nhdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table5.rows[1].cells\nrow_cells[0].text = ('Análisis de oportunidades de negocio digital, diseño de modelos de negocio, estrategias de marketing digital, '\n                       'creación de prototipos (MVP) y gestión de proyectos tecnológicos aplicados a el desarrollo de páginas web.')\nrow_cells[1].text = 'Desarrolla una propuesta de emprendimiento tecnológico basada en una aplicación web interactiva.'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[3].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[3].text = 'COMPETENCIA'\nhdr_cells[4].text = 'ACTIVIDADES PEDAGÓGICAS'\nhdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table5.rows[1].cells\nrow_cells[0].text = ('Análisis de oportunidades de negocio digital, diseño de modelos de negocio, estrategias de marketing digital, '\n                       'creación de prototipos (MVP) y gestión de proyectos tecnológicos aplicados a el desarrollo de páginas web.')\nrow_cells[1].text = 'Desarrolla una propuesta de emprendimiento tecnológico basada en una aplicación web interactiva.'\nrow_cells[2].text = 'Presenta un proyecto o prototipo que integre funcionalidades de JavaScript con un modelo de negocio innovador.'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[4].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[4].text = 'ACTIVIDADES PEDAGÓGICAS'\nhdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table5.rows[1].cells\nrow_cells[0].text = ('Análisis de oportunidades de negocio digital, diseño de modelos de negocio, estrategias de marketing digital, '\n                       'creación de prototipos (MVP) y gestión de proyectos tecnológicos aplicados a el desarrollo de páginas web.')\nrow_cells[1].text = 'Desarrolla una propuesta de emprendimiento tecnológico basada en una aplicación web interactiva.'\nrow_cells[2].text = 'Presenta un proyecto o prototipo que integre funcionalidades de JavaScript con un modelo de negocio innovador.'\nrow_cells[3].text = 'Emprendimiento, Creatividad, Gestión de proyectos'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[5].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[5].text = 'INDICADORES DE EVALUACIÓN'\nhdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table5.rows[1].cells\nrow_cells[0].text = ('Análisis de oportunidades de negocio digital, diseño de modelos de negocio, estrategias de marketing digital, '\n                       'creación de prototipos (MVP) y gestión de proyectos tecnológicos aplicados a el desarrollo de páginas web.')\nrow_cells[1].text = 'Desarrolla una propuesta de emprendimiento tecnológico basada en una aplicación web interactiva.'\nrow_cells[2].text = 'Presenta un proyecto o prototipo que integre funcionalidades de JavaScript con un modelo de negocio innovador.'\nrow_cells[3].text = 'Emprendimiento, Creatividad, Gestión de proyectos'\nrow_cells[4].text = ('Talleres de ideación, análisis de casos de éxito, elaboración de plan de negocio, desarrollo de prototipos y presentaciones de proyectos.')",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[6].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[6].text = 'RECURSOS'\nhdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table5.rows[1].cells\nrow_cells[0].text = ('Análisis de oportunidades de negocio digital, diseño de modelos de negocio, estrategias de marketing digital, '\n                       'creación de prototipos (MVP) y gestión de proyectos tecnológicos aplicados a el desarrollo de páginas web.')\nrow_cells[1].text = 'Desarrolla una propuesta de emprendimiento tecnológico basada en una aplicación web interactiva.'\nrow_cells[2].text = 'Presenta un proyecto o prototipo que integre funcionalidades de JavaScript con un modelo de negocio innovador.'\nrow_cells[3].text = 'Emprendimiento, Creatividad, Gestión de proyectos'\nrow_cells[4].text = ('Talleres de ideación, análisis de casos de éxito, elaboración de plan de negocio, desarrollo de prototipos y presentaciones de proyectos.')\nrow_cells[5].text = 'Evaluación de propuestas de negocio, viabilidad del prototipo y claridad en la estrategia emprendedora.'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[7].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[7].text = 'METAS DE CALIDAD'\nrow_cells = table5.rows[1].cells\nrow_cells[0].text = ('Análisis de oportunidades de negocio digital, diseño de modelos de negocio, estrategias de marketing digital, '\n                       'creación de prototipos (MVP) y gestión de proyectos tecnológicos aplicados a el desarrollo de páginas web.')\nrow_cells[1].text = 'Desarrolla una propuesta de emprendimiento tecnológico basada en una aplicación web interactiva.'\nrow_cells[2].text = 'Presenta un proyecto o prototipo que integre funcionalidades de JavaScript con un modelo de negocio innovador.'\nrow_cells[3].text = 'Emprendimiento, Creatividad, Gestión de proyectos'\nrow_cells[4].text = ('Talleres de ideación, análisis de casos de éxito, elaboración de plan de negocio, desarrollo de prototipos y presentaciones de proyectos.')\nrow_cells[5].text = 'Evaluación de propuestas de negocio, viabilidad del prototipo y claridad en la estrategia emprendedora.'\nrow_cells[6].text = 'Computador, herramientas de diseño, software de prototipado, internet y documentación de marketing digital.'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells = table5.rows[1].cells\nrow_cells[0].text = ('Análisis de oportunidades de negocio digital, diseño de modelos de negocio, estrategias de marketing digital, '\n                       'creación de prototipos (MVP) y gestión de proyectos tecnológicos aplicados a el desarrollo de páginas web.')\nrow_cells[1].text = 'Desarrolla una propuesta de emprendimiento tecnológico basada en una aplicación web interactiva.'\nrow_cells[2].text = 'Presenta un proyecto o prototipo que integre funcionalidades de JavaScript con un modelo de negocio innovador.'\nrow_cells[3].text = 'Emprendimiento, Creatividad, Gestión de proyectos'\nrow_cells[4].text = ('Talleres de ideación, análisis de casos de éxito, elaboración de plan de negocio, desarrollo de prototipos y presentaciones de proyectos.')\nrow_cells[5].text = 'Evaluación de propuestas de negocio, viabilidad del prototipo y claridad en la estrategia emprendedora.'\nrow_cells[6].text = 'Computador, herramientas de diseño, software de prototipado, internet y documentación de marketing digital.'\nrow_cells[7].text = 'El 65% de los estudiantes presentan propuestas de emprendimiento tecnológico viables y bien estructuradas.'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[0].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[0].text = ('Análisis de oportunidades de negocio digital, diseño de modelos de negocio, estrategias de marketing digital, '\n                       'creación de prototipos (MVP) y gestión de proyectos tecnológicos aplicados a el desarrollo de páginas web.')\nrow_cells[1].text = 'Desarrolla una propuesta de emprendimiento tecnológico basada en una aplicación web interactiva.'\nrow_cells[2].text = 'Presenta un proyecto o prototipo que integre funcionalidades de JavaScript con un modelo de negocio innovador.'\nrow_cells[3].text = 'Emprendimiento, Creatividad, Gestión de proyectos'\nrow_cells[4].text = ('Talleres de ideación, análisis de casos de éxito, elaboración de plan de negocio, desarrollo de prototipos y presentaciones de proyectos.')\nrow_cells[5].text = 'Evaluación de propuestas de negocio, viabilidad del prototipo y claridad en la estrategia emprendedora.'\nrow_cells[6].text = 'Computador, herramientas de diseño, software de prototipado, internet y documentación de marketing digital.'\nrow_cells[7].text = 'El 65% de los estudiantes presentan propuestas de emprendimiento tecnológico viables y bien estructuradas.'\n# ---------------------------",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[1].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[1].text = 'Desarrolla una propuesta de emprendimiento tecnológico basada en una aplicación web interactiva.'\nrow_cells[2].text = 'Presenta un proyecto o prototipo que integre funcionalidades de JavaScript con un modelo de negocio innovador.'\nrow_cells[3].text = 'Emprendimiento, Creatividad, Gestión de proyectos'\nrow_cells[4].text = ('Talleres de ideación, análisis de casos de éxito, elaboración de plan de negocio, desarrollo de prototipos y presentaciones de proyectos.')\nrow_cells[5].text = 'Evaluación de propuestas de negocio, viabilidad del prototipo y claridad en la estrategia emprendedora.'\nrow_cells[6].text = 'Computador, herramientas de diseño, software de prototipado, internet y documentación de marketing digital.'\nrow_cells[7].text = 'El 65% de los estudiantes presentan propuestas de emprendimiento tecnológico viables y bien estructuradas.'\n# ---------------------------\n# Resumen por Períodos\ndocument.add_heading('Resumen por Períodos', level=1)",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[2].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[2].text = 'Presenta un proyecto o prototipo que integre funcionalidades de JavaScript con un modelo de negocio innovador.'\nrow_cells[3].text = 'Emprendimiento, Creatividad, Gestión de proyectos'\nrow_cells[4].text = ('Talleres de ideación, análisis de casos de éxito, elaboración de plan de negocio, desarrollo de prototipos y presentaciones de proyectos.')\nrow_cells[5].text = 'Evaluación de propuestas de negocio, viabilidad del prototipo y claridad en la estrategia emprendedora.'\nrow_cells[6].text = 'Computador, herramientas de diseño, software de prototipado, internet y documentación de marketing digital.'\nrow_cells[7].text = 'El 65% de los estudiantes presentan propuestas de emprendimiento tecnológico viables y bien estructuradas.'\n# ---------------------------\n# Resumen por Períodos\ndocument.add_heading('Resumen por Períodos', level=1)\ntable_summary = document.add_table(rows=6, cols=3)",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[3].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[3].text = 'Emprendimiento, Creatividad, Gestión de proyectos'\nrow_cells[4].text = ('Talleres de ideación, análisis de casos de éxito, elaboración de plan de negocio, desarrollo de prototipos y presentaciones de proyectos.')\nrow_cells[5].text = 'Evaluación de propuestas de negocio, viabilidad del prototipo y claridad en la estrategia emprendedora.'\nrow_cells[6].text = 'Computador, herramientas de diseño, software de prototipado, internet y documentación de marketing digital.'\nrow_cells[7].text = 'El 65% de los estudiantes presentan propuestas de emprendimiento tecnológico viables y bien estructuradas.'\n# ---------------------------\n# Resumen por Períodos\ndocument.add_heading('Resumen por Períodos', level=1)\ntable_summary = document.add_table(rows=6, cols=3)\nhdr_cells = table_summary.rows[0].cells",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[4].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[4].text = ('Talleres de ideación, análisis de casos de éxito, elaboración de plan de negocio, desarrollo de prototipos y presentaciones de proyectos.')\nrow_cells[5].text = 'Evaluación de propuestas de negocio, viabilidad del prototipo y claridad en la estrategia emprendedora.'\nrow_cells[6].text = 'Computador, herramientas de diseño, software de prototipado, internet y documentación de marketing digital.'\nrow_cells[7].text = 'El 65% de los estudiantes presentan propuestas de emprendimiento tecnológico viables y bien estructuradas.'\n# ---------------------------\n# Resumen por Períodos\ndocument.add_heading('Resumen por Períodos', level=1)\ntable_summary = document.add_table(rows=6, cols=3)\nhdr_cells = table_summary.rows[0].cells\nhdr_cells[0].text = 'Período'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[5].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[5].text = 'Evaluación de propuestas de negocio, viabilidad del prototipo y claridad en la estrategia emprendedora.'\nrow_cells[6].text = 'Computador, herramientas de diseño, software de prototipado, internet y documentación de marketing digital.'\nrow_cells[7].text = 'El 65% de los estudiantes presentan propuestas de emprendimiento tecnológico viables y bien estructuradas.'\n# ---------------------------\n# Resumen por Períodos\ndocument.add_heading('Resumen por Períodos', level=1)\ntable_summary = document.add_table(rows=6, cols=3)\nhdr_cells = table_summary.rows[0].cells\nhdr_cells[0].text = 'Período'\nhdr_cells[1].text = 'Tema Principal'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[6].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[6].text = 'Computador, herramientas de diseño, software de prototipado, internet y documentación de marketing digital.'\nrow_cells[7].text = 'El 65% de los estudiantes presentan propuestas de emprendimiento tecnológico viables y bien estructuradas.'\n# ---------------------------\n# Resumen por Períodos\ndocument.add_heading('Resumen por Períodos', level=1)\ntable_summary = document.add_table(rows=6, cols=3)\nhdr_cells = table_summary.rows[0].cells\nhdr_cells[0].text = 'Período'\nhdr_cells[1].text = 'Tema Principal'\nhdr_cells[2].text = 'Estándar Principal'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[7].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[7].text = 'El 65% de los estudiantes presentan propuestas de emprendimiento tecnológico viables y bien estructuradas.'\n# ---------------------------\n# Resumen por Períodos\ndocument.add_heading('Resumen por Períodos', level=1)\ntable_summary = document.add_table(rows=6, cols=3)\nhdr_cells = table_summary.rows[0].cells\nhdr_cells[0].text = 'Período'\nhdr_cells[1].text = 'Tema Principal'\nhdr_cells[2].text = 'Estándar Principal'\nrow_cells = table_summary.rows[1].cells",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "table_summary",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "table_summary = document.add_table(rows=6, cols=3)\nhdr_cells = table_summary.rows[0].cells\nhdr_cells[0].text = 'Período'\nhdr_cells[1].text = 'Tema Principal'\nhdr_cells[2].text = 'Estándar Principal'\nrow_cells = table_summary.rows[1].cells\nrow_cells[0].text = '1'\nrow_cells[1].text = 'Fundamentos de JavaScript'\nrow_cells[2].text = 'Comprensión de sintaxis y estructuras básicas'\nrow_cells = table_summary.rows[2].cells",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells = table_summary.rows[0].cells\nhdr_cells[0].text = 'Período'\nhdr_cells[1].text = 'Tema Principal'\nhdr_cells[2].text = 'Estándar Principal'\nrow_cells = table_summary.rows[1].cells\nrow_cells[0].text = '1'\nrow_cells[1].text = 'Fundamentos de JavaScript'\nrow_cells[2].text = 'Comprensión de sintaxis y estructuras básicas'\nrow_cells = table_summary.rows[2].cells\nrow_cells[0].text = '2'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[0].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[0].text = 'Período'\nhdr_cells[1].text = 'Tema Principal'\nhdr_cells[2].text = 'Estándar Principal'\nrow_cells = table_summary.rows[1].cells\nrow_cells[0].text = '1'\nrow_cells[1].text = 'Fundamentos de JavaScript'\nrow_cells[2].text = 'Comprensión de sintaxis y estructuras básicas'\nrow_cells = table_summary.rows[2].cells\nrow_cells[0].text = '2'\nrow_cells[1].text = 'JavaScript Intermedio'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[1].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[1].text = 'Tema Principal'\nhdr_cells[2].text = 'Estándar Principal'\nrow_cells = table_summary.rows[1].cells\nrow_cells[0].text = '1'\nrow_cells[1].text = 'Fundamentos de JavaScript'\nrow_cells[2].text = 'Comprensión de sintaxis y estructuras básicas'\nrow_cells = table_summary.rows[2].cells\nrow_cells[0].text = '2'\nrow_cells[1].text = 'JavaScript Intermedio'\nrow_cells[2].text = 'Manipulación del DOM y funciones avanzadas'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "hdr_cells[2].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "hdr_cells[2].text = 'Estándar Principal'\nrow_cells = table_summary.rows[1].cells\nrow_cells[0].text = '1'\nrow_cells[1].text = 'Fundamentos de JavaScript'\nrow_cells[2].text = 'Comprensión de sintaxis y estructuras básicas'\nrow_cells = table_summary.rows[2].cells\nrow_cells[0].text = '2'\nrow_cells[1].text = 'JavaScript Intermedio'\nrow_cells[2].text = 'Manipulación del DOM y funciones avanzadas'\nrow_cells = table_summary.rows[3].cells",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells = table_summary.rows[1].cells\nrow_cells[0].text = '1'\nrow_cells[1].text = 'Fundamentos de JavaScript'\nrow_cells[2].text = 'Comprensión de sintaxis y estructuras básicas'\nrow_cells = table_summary.rows[2].cells\nrow_cells[0].text = '2'\nrow_cells[1].text = 'JavaScript Intermedio'\nrow_cells[2].text = 'Manipulación del DOM y funciones avanzadas'\nrow_cells = table_summary.rows[3].cells\nrow_cells[0].text = '3'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[0].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[0].text = '1'\nrow_cells[1].text = 'Fundamentos de JavaScript'\nrow_cells[2].text = 'Comprensión de sintaxis y estructuras básicas'\nrow_cells = table_summary.rows[2].cells\nrow_cells[0].text = '2'\nrow_cells[1].text = 'JavaScript Intermedio'\nrow_cells[2].text = 'Manipulación del DOM y funciones avanzadas'\nrow_cells = table_summary.rows[3].cells\nrow_cells[0].text = '3'\nrow_cells[1].text = 'JavaScript Avanzado'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[1].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[1].text = 'Fundamentos de JavaScript'\nrow_cells[2].text = 'Comprensión de sintaxis y estructuras básicas'\nrow_cells = table_summary.rows[2].cells\nrow_cells[0].text = '2'\nrow_cells[1].text = 'JavaScript Intermedio'\nrow_cells[2].text = 'Manipulación del DOM y funciones avanzadas'\nrow_cells = table_summary.rows[3].cells\nrow_cells[0].text = '3'\nrow_cells[1].text = 'JavaScript Avanzado'\nrow_cells[2].text = 'Programación asincrónica, APIs y POO'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[2].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[2].text = 'Comprensión de sintaxis y estructuras básicas'\nrow_cells = table_summary.rows[2].cells\nrow_cells[0].text = '2'\nrow_cells[1].text = 'JavaScript Intermedio'\nrow_cells[2].text = 'Manipulación del DOM y funciones avanzadas'\nrow_cells = table_summary.rows[3].cells\nrow_cells[0].text = '3'\nrow_cells[1].text = 'JavaScript Avanzado'\nrow_cells[2].text = 'Programación asincrónica, APIs y POO'\nrow_cells = table_summary.rows[4].cells",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells = table_summary.rows[2].cells\nrow_cells[0].text = '2'\nrow_cells[1].text = 'JavaScript Intermedio'\nrow_cells[2].text = 'Manipulación del DOM y funciones avanzadas'\nrow_cells = table_summary.rows[3].cells\nrow_cells[0].text = '3'\nrow_cells[1].text = 'JavaScript Avanzado'\nrow_cells[2].text = 'Programación asincrónica, APIs y POO'\nrow_cells = table_summary.rows[4].cells\nrow_cells[0].text = '4'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[0].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[0].text = '2'\nrow_cells[1].text = 'JavaScript Intermedio'\nrow_cells[2].text = 'Manipulación del DOM y funciones avanzadas'\nrow_cells = table_summary.rows[3].cells\nrow_cells[0].text = '3'\nrow_cells[1].text = 'JavaScript Avanzado'\nrow_cells[2].text = 'Programación asincrónica, APIs y POO'\nrow_cells = table_summary.rows[4].cells\nrow_cells[0].text = '4'\nrow_cells[1].text = 'Proyecto Final'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[1].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[1].text = 'JavaScript Intermedio'\nrow_cells[2].text = 'Manipulación del DOM y funciones avanzadas'\nrow_cells = table_summary.rows[3].cells\nrow_cells[0].text = '3'\nrow_cells[1].text = 'JavaScript Avanzado'\nrow_cells[2].text = 'Programación asincrónica, APIs y POO'\nrow_cells = table_summary.rows[4].cells\nrow_cells[0].text = '4'\nrow_cells[1].text = 'Proyecto Final'\nrow_cells[2].text = 'Desarrollo integral de una aplicación web interactiva'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[2].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[2].text = 'Manipulación del DOM y funciones avanzadas'\nrow_cells = table_summary.rows[3].cells\nrow_cells[0].text = '3'\nrow_cells[1].text = 'JavaScript Avanzado'\nrow_cells[2].text = 'Programación asincrónica, APIs y POO'\nrow_cells = table_summary.rows[4].cells\nrow_cells[0].text = '4'\nrow_cells[1].text = 'Proyecto Final'\nrow_cells[2].text = 'Desarrollo integral de una aplicación web interactiva'\nrow_cells = table_summary.rows[5].cells",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells = table_summary.rows[3].cells\nrow_cells[0].text = '3'\nrow_cells[1].text = 'JavaScript Avanzado'\nrow_cells[2].text = 'Programación asincrónica, APIs y POO'\nrow_cells = table_summary.rows[4].cells\nrow_cells[0].text = '4'\nrow_cells[1].text = 'Proyecto Final'\nrow_cells[2].text = 'Desarrollo integral de una aplicación web interactiva'\nrow_cells = table_summary.rows[5].cells\nrow_cells[0].text = 'Emprendimiento'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[0].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[0].text = '3'\nrow_cells[1].text = 'JavaScript Avanzado'\nrow_cells[2].text = 'Programación asincrónica, APIs y POO'\nrow_cells = table_summary.rows[4].cells\nrow_cells[0].text = '4'\nrow_cells[1].text = 'Proyecto Final'\nrow_cells[2].text = 'Desarrollo integral de una aplicación web interactiva'\nrow_cells = table_summary.rows[5].cells\nrow_cells[0].text = 'Emprendimiento'\nrow_cells[1].text = 'Emprendimiento Tecnológico'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[1].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[1].text = 'JavaScript Avanzado'\nrow_cells[2].text = 'Programación asincrónica, APIs y POO'\nrow_cells = table_summary.rows[4].cells\nrow_cells[0].text = '4'\nrow_cells[1].text = 'Proyecto Final'\nrow_cells[2].text = 'Desarrollo integral de una aplicación web interactiva'\nrow_cells = table_summary.rows[5].cells\nrow_cells[0].text = 'Emprendimiento'\nrow_cells[1].text = 'Emprendimiento Tecnológico'\nrow_cells[2].text = 'Integración de competencias emprendedoras en proyectos web'",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[2].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[2].text = 'Programación asincrónica, APIs y POO'\nrow_cells = table_summary.rows[4].cells\nrow_cells[0].text = '4'\nrow_cells[1].text = 'Proyecto Final'\nrow_cells[2].text = 'Desarrollo integral de una aplicación web interactiva'\nrow_cells = table_summary.rows[5].cells\nrow_cells[0].text = 'Emprendimiento'\nrow_cells[1].text = 'Emprendimiento Tecnológico'\nrow_cells[2].text = 'Integración de competencias emprendedoras en proyectos web'\n# Save the document",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells = table_summary.rows[4].cells\nrow_cells[0].text = '4'\nrow_cells[1].text = 'Proyecto Final'\nrow_cells[2].text = 'Desarrollo integral de una aplicación web interactiva'\nrow_cells = table_summary.rows[5].cells\nrow_cells[0].text = 'Emprendimiento'\nrow_cells[1].text = 'Emprendimiento Tecnológico'\nrow_cells[2].text = 'Integración de competencias emprendedoras en proyectos web'\n# Save the document\ndocument.save('Plan_JS_Emprendimiento.docx')",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[0].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[0].text = '4'\nrow_cells[1].text = 'Proyecto Final'\nrow_cells[2].text = 'Desarrollo integral de una aplicación web interactiva'\nrow_cells = table_summary.rows[5].cells\nrow_cells[0].text = 'Emprendimiento'\nrow_cells[1].text = 'Emprendimiento Tecnológico'\nrow_cells[2].text = 'Integración de competencias emprendedoras en proyectos web'\n# Save the document\ndocument.save('Plan_JS_Emprendimiento.docx')\nprint(\"El archivo 'Plan_JS_Emprendimiento.docx' ha sido generado exitosamente.\")",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[1].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[1].text = 'Proyecto Final'\nrow_cells[2].text = 'Desarrollo integral de una aplicación web interactiva'\nrow_cells = table_summary.rows[5].cells\nrow_cells[0].text = 'Emprendimiento'\nrow_cells[1].text = 'Emprendimiento Tecnológico'\nrow_cells[2].text = 'Integración de competencias emprendedoras en proyectos web'\n# Save the document\ndocument.save('Plan_JS_Emprendimiento.docx')\nprint(\"El archivo 'Plan_JS_Emprendimiento.docx' ha sido generado exitosamente.\")",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[2].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[2].text = 'Desarrollo integral de una aplicación web interactiva'\nrow_cells = table_summary.rows[5].cells\nrow_cells[0].text = 'Emprendimiento'\nrow_cells[1].text = 'Emprendimiento Tecnológico'\nrow_cells[2].text = 'Integración de competencias emprendedoras en proyectos web'\n# Save the document\ndocument.save('Plan_JS_Emprendimiento.docx')\nprint(\"El archivo 'Plan_JS_Emprendimiento.docx' ha sido generado exitosamente.\")",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells = table_summary.rows[5].cells\nrow_cells[0].text = 'Emprendimiento'\nrow_cells[1].text = 'Emprendimiento Tecnológico'\nrow_cells[2].text = 'Integración de competencias emprendedoras en proyectos web'\n# Save the document\ndocument.save('Plan_JS_Emprendimiento.docx')\nprint(\"El archivo 'Plan_JS_Emprendimiento.docx' ha sido generado exitosamente.\")",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[0].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[0].text = 'Emprendimiento'\nrow_cells[1].text = 'Emprendimiento Tecnológico'\nrow_cells[2].text = 'Integración de competencias emprendedoras en proyectos web'\n# Save the document\ndocument.save('Plan_JS_Emprendimiento.docx')\nprint(\"El archivo 'Plan_JS_Emprendimiento.docx' ha sido generado exitosamente.\")",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[1].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[1].text = 'Emprendimiento Tecnológico'\nrow_cells[2].text = 'Integración de competencias emprendedoras en proyectos web'\n# Save the document\ndocument.save('Plan_JS_Emprendimiento.docx')\nprint(\"El archivo 'Plan_JS_Emprendimiento.docx' ha sido generado exitosamente.\")",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "row_cells[2].text",
        "kind": 5,
        "importPath": "emprend",
        "description": "emprend",
        "peekOfCode": "row_cells[2].text = 'Integración de competencias emprendedoras en proyectos web'\n# Save the document\ndocument.save('Plan_JS_Emprendimiento.docx')\nprint(\"El archivo 'Plan_JS_Emprendimiento.docx' ha sido generado exitosamente.\")",
        "detail": "emprend",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "exam",
        "description": "exam",
        "peekOfCode": "x = [[1, [3, 4, [1]]]]\ny = [[[1], [2]]]\nprint(x[0][1][2][0])\nprint(y[0][1][0])\nm = [[1,[2,1,3]]]\nprint(m[0][1][2])",
        "detail": "exam",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "exam",
        "description": "exam",
        "peekOfCode": "y = [[[1], [2]]]\nprint(x[0][1][2][0])\nprint(y[0][1][0])\nm = [[1,[2,1,3]]]\nprint(m[0][1][2])",
        "detail": "exam",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "exam",
        "description": "exam",
        "peekOfCode": "m = [[1,[2,1,3]]]\nprint(m[0][1][2])",
        "detail": "exam",
        "documentation": {}
    },
    {
        "label": "SMTP_SERVER",
        "kind": 5,
        "importPath": "inas",
        "description": "inas",
        "peekOfCode": "SMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\nSENDER_EMAIL = \"inasistenciasinstitutoguatica@gmail.com\"\nSENDER_PASSWORD = \"deim efwu aavv pblf\"  # ¡No uses tu contraseña real!\n# -------------------------------\n# CONFIGURACIÓN DEL ARCHIVO EXCEL\n# -------------------------------\nEXCEL_FILE = \"inasistencias.xlsx\"\nEMAIL_COLUMN = \"Dirección de correo electrónico\"\n# Leemos todas las hojas del Excel en un diccionario: {nombre_hoja: DataFrame}",
        "detail": "inas",
        "documentation": {}
    },
    {
        "label": "SMTP_PORT",
        "kind": 5,
        "importPath": "inas",
        "description": "inas",
        "peekOfCode": "SMTP_PORT = 587\nSENDER_EMAIL = \"inasistenciasinstitutoguatica@gmail.com\"\nSENDER_PASSWORD = \"deim efwu aavv pblf\"  # ¡No uses tu contraseña real!\n# -------------------------------\n# CONFIGURACIÓN DEL ARCHIVO EXCEL\n# -------------------------------\nEXCEL_FILE = \"inasistencias.xlsx\"\nEMAIL_COLUMN = \"Dirección de correo electrónico\"\n# Leemos todas las hojas del Excel en un diccionario: {nombre_hoja: DataFrame}\nsheets_dict = pd.read_excel(EXCEL_FILE, sheet_name=None)",
        "detail": "inas",
        "documentation": {}
    },
    {
        "label": "SENDER_EMAIL",
        "kind": 5,
        "importPath": "inas",
        "description": "inas",
        "peekOfCode": "SENDER_EMAIL = \"inasistenciasinstitutoguatica@gmail.com\"\nSENDER_PASSWORD = \"deim efwu aavv pblf\"  # ¡No uses tu contraseña real!\n# -------------------------------\n# CONFIGURACIÓN DEL ARCHIVO EXCEL\n# -------------------------------\nEXCEL_FILE = \"inasistencias.xlsx\"\nEMAIL_COLUMN = \"Dirección de correo electrónico\"\n# Leemos todas las hojas del Excel en un diccionario: {nombre_hoja: DataFrame}\nsheets_dict = pd.read_excel(EXCEL_FILE, sheet_name=None)\n# Conectamos al servidor SMTP",
        "detail": "inas",
        "documentation": {}
    },
    {
        "label": "SENDER_PASSWORD",
        "kind": 5,
        "importPath": "inas",
        "description": "inas",
        "peekOfCode": "SENDER_PASSWORD = \"deim efwu aavv pblf\"  # ¡No uses tu contraseña real!\n# -------------------------------\n# CONFIGURACIÓN DEL ARCHIVO EXCEL\n# -------------------------------\nEXCEL_FILE = \"inasistencias.xlsx\"\nEMAIL_COLUMN = \"Dirección de correo electrónico\"\n# Leemos todas las hojas del Excel en un diccionario: {nombre_hoja: DataFrame}\nsheets_dict = pd.read_excel(EXCEL_FILE, sheet_name=None)\n# Conectamos al servidor SMTP\nserver = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)",
        "detail": "inas",
        "documentation": {}
    },
    {
        "label": "EXCEL_FILE",
        "kind": 5,
        "importPath": "inas",
        "description": "inas",
        "peekOfCode": "EXCEL_FILE = \"inasistencias.xlsx\"\nEMAIL_COLUMN = \"Dirección de correo electrónico\"\n# Leemos todas las hojas del Excel en un diccionario: {nombre_hoja: DataFrame}\nsheets_dict = pd.read_excel(EXCEL_FILE, sheet_name=None)\n# Conectamos al servidor SMTP\nserver = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)\nserver.starttls()\nserver.login(SENDER_EMAIL, SENDER_PASSWORD)\n# -------------------------------\n# RECORRER CADA HOJA Y ENVIAR CORREO",
        "detail": "inas",
        "documentation": {}
    },
    {
        "label": "EMAIL_COLUMN",
        "kind": 5,
        "importPath": "inas",
        "description": "inas",
        "peekOfCode": "EMAIL_COLUMN = \"Dirección de correo electrónico\"\n# Leemos todas las hojas del Excel en un diccionario: {nombre_hoja: DataFrame}\nsheets_dict = pd.read_excel(EXCEL_FILE, sheet_name=None)\n# Conectamos al servidor SMTP\nserver = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)\nserver.starttls()\nserver.login(SENDER_EMAIL, SENDER_PASSWORD)\n# -------------------------------\n# RECORRER CADA HOJA Y ENVIAR CORREO\n# -------------------------------",
        "detail": "inas",
        "documentation": {}
    },
    {
        "label": "sheets_dict",
        "kind": 5,
        "importPath": "inas",
        "description": "inas",
        "peekOfCode": "sheets_dict = pd.read_excel(EXCEL_FILE, sheet_name=None)\n# Conectamos al servidor SMTP\nserver = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)\nserver.starttls()\nserver.login(SENDER_EMAIL, SENDER_PASSWORD)\n# -------------------------------\n# RECORRER CADA HOJA Y ENVIAR CORREO\n# -------------------------------\nfor sheet_name, df in sheets_dict.items():\n    print(f\"Procesando hoja: {sheet_name}\")",
        "detail": "inas",
        "documentation": {}
    },
    {
        "label": "server",
        "kind": 5,
        "importPath": "inas",
        "description": "inas",
        "peekOfCode": "server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)\nserver.starttls()\nserver.login(SENDER_EMAIL, SENDER_PASSWORD)\n# -------------------------------\n# RECORRER CADA HOJA Y ENVIAR CORREO\n# -------------------------------\nfor sheet_name, df in sheets_dict.items():\n    print(f\"Procesando hoja: {sheet_name}\")\n    # Verificar que la columna de email exista\n    if EMAIL_COLUMN not in df.columns:",
        "detail": "inas",
        "documentation": {}
    },
    {
        "label": "SMTP_SERVER",
        "kind": 5,
        "importPath": "inas2",
        "description": "inas2",
        "peekOfCode": "SMTP_SERVER = os.getenv(\"SMTP_SERVER\", \"smtp.gmail.com\")\nSMTP_PORT = int(os.getenv(\"SMTP_PORT\", 587))\nSENDER_EMAIL = os.getenv(\"SENDER_EMAIL\")\nSENDER_PASSWORD = os.getenv(\"SENDER_PASSWORD\")\n# -------------------------------\n# CONFIGURACIÓN DEL ARCHIVO EXCEL\n# -------------------------------\nEXCEL_FILE = \"inasistencias.xlsx\"\nEMAIL_COLUMN = \"Dirección de correo electrónico\"\n# Columnas requeridas para el reporte",
        "detail": "inas2",
        "documentation": {}
    },
    {
        "label": "SMTP_PORT",
        "kind": 5,
        "importPath": "inas2",
        "description": "inas2",
        "peekOfCode": "SMTP_PORT = int(os.getenv(\"SMTP_PORT\", 587))\nSENDER_EMAIL = os.getenv(\"SENDER_EMAIL\")\nSENDER_PASSWORD = os.getenv(\"SENDER_PASSWORD\")\n# -------------------------------\n# CONFIGURACIÓN DEL ARCHIVO EXCEL\n# -------------------------------\nEXCEL_FILE = \"inasistencias.xlsx\"\nEMAIL_COLUMN = \"Dirección de correo electrónico\"\n# Columnas requeridas para el reporte\nREQUIRED_COLUMNS = [\"Estudiante\", \"Grupo\", \"Asignatura\", \"Horas de Inasistencia\"]",
        "detail": "inas2",
        "documentation": {}
    },
    {
        "label": "SENDER_EMAIL",
        "kind": 5,
        "importPath": "inas2",
        "description": "inas2",
        "peekOfCode": "SENDER_EMAIL = os.getenv(\"SENDER_EMAIL\")\nSENDER_PASSWORD = os.getenv(\"SENDER_PASSWORD\")\n# -------------------------------\n# CONFIGURACIÓN DEL ARCHIVO EXCEL\n# -------------------------------\nEXCEL_FILE = \"inasistencias.xlsx\"\nEMAIL_COLUMN = \"Dirección de correo electrónico\"\n# Columnas requeridas para el reporte\nREQUIRED_COLUMNS = [\"Estudiante\", \"Grupo\", \"Asignatura\", \"Horas de Inasistencia\"]\n# Leemos todas las hojas del Excel en un diccionario: {nombre_hoja: DataFrame}",
        "detail": "inas2",
        "documentation": {}
    },
    {
        "label": "SENDER_PASSWORD",
        "kind": 5,
        "importPath": "inas2",
        "description": "inas2",
        "peekOfCode": "SENDER_PASSWORD = os.getenv(\"SENDER_PASSWORD\")\n# -------------------------------\n# CONFIGURACIÓN DEL ARCHIVO EXCEL\n# -------------------------------\nEXCEL_FILE = \"inasistencias.xlsx\"\nEMAIL_COLUMN = \"Dirección de correo electrónico\"\n# Columnas requeridas para el reporte\nREQUIRED_COLUMNS = [\"Estudiante\", \"Grupo\", \"Asignatura\", \"Horas de Inasistencia\"]\n# Leemos todas las hojas del Excel en un diccionario: {nombre_hoja: DataFrame}\nsheets_dict = pd.read_excel(EXCEL_FILE, sheet_name=None)",
        "detail": "inas2",
        "documentation": {}
    },
    {
        "label": "EXCEL_FILE",
        "kind": 5,
        "importPath": "inas2",
        "description": "inas2",
        "peekOfCode": "EXCEL_FILE = \"inasistencias.xlsx\"\nEMAIL_COLUMN = \"Dirección de correo electrónico\"\n# Columnas requeridas para el reporte\nREQUIRED_COLUMNS = [\"Estudiante\", \"Grupo\", \"Asignatura\", \"Horas de Inasistencia\"]\n# Leemos todas las hojas del Excel en un diccionario: {nombre_hoja: DataFrame}\nsheets_dict = pd.read_excel(EXCEL_FILE, sheet_name=None)\n# Conectamos al servidor SMTP\nserver = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)\nserver.starttls()\nserver.login(SENDER_EMAIL, SENDER_PASSWORD)",
        "detail": "inas2",
        "documentation": {}
    },
    {
        "label": "EMAIL_COLUMN",
        "kind": 5,
        "importPath": "inas2",
        "description": "inas2",
        "peekOfCode": "EMAIL_COLUMN = \"Dirección de correo electrónico\"\n# Columnas requeridas para el reporte\nREQUIRED_COLUMNS = [\"Estudiante\", \"Grupo\", \"Asignatura\", \"Horas de Inasistencia\"]\n# Leemos todas las hojas del Excel en un diccionario: {nombre_hoja: DataFrame}\nsheets_dict = pd.read_excel(EXCEL_FILE, sheet_name=None)\n# Conectamos al servidor SMTP\nserver = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)\nserver.starttls()\nserver.login(SENDER_EMAIL, SENDER_PASSWORD)\n# Definir estilos CSS para la tabla (striped, encabezados centrados y columna \"Horas de Inasistencia\" centrada)",
        "detail": "inas2",
        "documentation": {}
    },
    {
        "label": "REQUIRED_COLUMNS",
        "kind": 5,
        "importPath": "inas2",
        "description": "inas2",
        "peekOfCode": "REQUIRED_COLUMNS = [\"Estudiante\", \"Grupo\", \"Asignatura\", \"Horas de Inasistencia\"]\n# Leemos todas las hojas del Excel en un diccionario: {nombre_hoja: DataFrame}\nsheets_dict = pd.read_excel(EXCEL_FILE, sheet_name=None)\n# Conectamos al servidor SMTP\nserver = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)\nserver.starttls()\nserver.login(SENDER_EMAIL, SENDER_PASSWORD)\n# Definir estilos CSS para la tabla (striped, encabezados centrados y columna \"Horas de Inasistencia\" centrada)\ncss_style = \"\"\"\n<style>",
        "detail": "inas2",
        "documentation": {}
    },
    {
        "label": "sheets_dict",
        "kind": 5,
        "importPath": "inas2",
        "description": "inas2",
        "peekOfCode": "sheets_dict = pd.read_excel(EXCEL_FILE, sheet_name=None)\n# Conectamos al servidor SMTP\nserver = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)\nserver.starttls()\nserver.login(SENDER_EMAIL, SENDER_PASSWORD)\n# Definir estilos CSS para la tabla (striped, encabezados centrados y columna \"Horas de Inasistencia\" centrada)\ncss_style = \"\"\"\n<style>\ntable {\n    width: 100%;",
        "detail": "inas2",
        "documentation": {}
    },
    {
        "label": "server",
        "kind": 5,
        "importPath": "inas2",
        "description": "inas2",
        "peekOfCode": "server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)\nserver.starttls()\nserver.login(SENDER_EMAIL, SENDER_PASSWORD)\n# Definir estilos CSS para la tabla (striped, encabezados centrados y columna \"Horas de Inasistencia\" centrada)\ncss_style = \"\"\"\n<style>\ntable {\n    width: 100%;\n    border-collapse: collapse;\n    font-family: Arial, sans-serif;",
        "detail": "inas2",
        "documentation": {}
    },
    {
        "label": "css_style",
        "kind": 5,
        "importPath": "inas2",
        "description": "inas2",
        "peekOfCode": "css_style = \"\"\"\n<style>\ntable {\n    width: 100%;\n    border-collapse: collapse;\n    font-family: Arial, sans-serif;\n    margin-bottom: 20px;\n}\nth, td {\n    border: 1px solid #dee2e6;",
        "detail": "inas2",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "jerarquia",
        "description": "jerarquia",
        "peekOfCode": "x = [\"Rectoría\", [[\"Coordinación\", [\"Docentes\", [\"Mat\", \"Esp\", \"Fis\"]]]]]\nprint(x[1])\nprint(x[1][0])\nprint(x[1][0][1])\nprint(x[1][0][1][1])\nprint(x[1][0][1][1][2])\nmundo = [[\"America\", [\"del norte\", [\"del sur\", [[\"colombia\", [\"risaralda\"]]]]]]]\nprint(mundo[0][1][1][1][0][1][0])",
        "detail": "jerarquia",
        "documentation": {}
    },
    {
        "label": "mundo",
        "kind": 5,
        "importPath": "jerarquia",
        "description": "jerarquia",
        "peekOfCode": "mundo = [[\"America\", [\"del norte\", [\"del sur\", [[\"colombia\", [\"risaralda\"]]]]]]]\nprint(mundo[0][1][1][1][0][1][0])",
        "detail": "jerarquia",
        "documentation": {}
    },
    {
        "label": "generar_laberinto",
        "kind": 2,
        "importPath": "laberinto",
        "description": "laberinto",
        "peekOfCode": "def generar_laberinto(ancho, alto):\n    \"\"\"\n    Genera un laberinto aleatorio usando backtracking recursivo.\n    ancho y alto deben ser impares.\n    Devuelve una matriz (lista de listas) donde '#' representa pared y ' ' pasillo.\n    \"\"\"\n    # Inicializamos la matriz con paredes\n    lab = [['#' for _ in range(ancho)] for _ in range(alto)]\n    # Punto de inicio: (1, 1)\n    inicio = (1, 1)",
        "detail": "laberinto",
        "documentation": {}
    },
    {
        "label": "laberinto_a_cadenas",
        "kind": 2,
        "importPath": "laberinto",
        "description": "laberinto",
        "peekOfCode": "def laberinto_a_cadenas(lab):\n    \"\"\"\n    Convierte la matriz del laberinto a una lista de cadenas (opcional).\n    \"\"\"\n    return [\"\".join(fila) for fila in lab]\n# ============================\n# CONFIGURACIÓN DEL JUEGO\n# ============================\n# Dimensiones del laberinto (usar números impares)\nCOLUMNAS = 21",
        "detail": "laberinto",
        "documentation": {}
    },
    {
        "label": "COLUMNAS",
        "kind": 5,
        "importPath": "laberinto",
        "description": "laberinto",
        "peekOfCode": "COLUMNAS = 21\nFILAS = 21\nTAM_CELDA = 25  # Tamaño de cada celda en píxeles\n# Dimensiones de la ventana\nANCHO = COLUMNAS * TAM_CELDA\nALTO = FILAS * TAM_CELDA\n# Colores (RGB)\nCOLOR_FONDO = (0, 0, 0)\nCOLOR_PARED = (100, 100, 100)\nCOLOR_JUGADOR = (0, 0, 255)",
        "detail": "laberinto",
        "documentation": {}
    },
    {
        "label": "FILAS",
        "kind": 5,
        "importPath": "laberinto",
        "description": "laberinto",
        "peekOfCode": "FILAS = 21\nTAM_CELDA = 25  # Tamaño de cada celda en píxeles\n# Dimensiones de la ventana\nANCHO = COLUMNAS * TAM_CELDA\nALTO = FILAS * TAM_CELDA\n# Colores (RGB)\nCOLOR_FONDO = (0, 0, 0)\nCOLOR_PARED = (100, 100, 100)\nCOLOR_JUGADOR = (0, 0, 255)\nCOLOR_SALIDA = (0, 255, 0)",
        "detail": "laberinto",
        "documentation": {}
    },
    {
        "label": "TAM_CELDA",
        "kind": 5,
        "importPath": "laberinto",
        "description": "laberinto",
        "peekOfCode": "TAM_CELDA = 25  # Tamaño de cada celda en píxeles\n# Dimensiones de la ventana\nANCHO = COLUMNAS * TAM_CELDA\nALTO = FILAS * TAM_CELDA\n# Colores (RGB)\nCOLOR_FONDO = (0, 0, 0)\nCOLOR_PARED = (100, 100, 100)\nCOLOR_JUGADOR = (0, 0, 255)\nCOLOR_SALIDA = (0, 255, 0)\n# Inicializar Pygame",
        "detail": "laberinto",
        "documentation": {}
    },
    {
        "label": "ANCHO",
        "kind": 5,
        "importPath": "laberinto",
        "description": "laberinto",
        "peekOfCode": "ANCHO = COLUMNAS * TAM_CELDA\nALTO = FILAS * TAM_CELDA\n# Colores (RGB)\nCOLOR_FONDO = (0, 0, 0)\nCOLOR_PARED = (100, 100, 100)\nCOLOR_JUGADOR = (0, 0, 255)\nCOLOR_SALIDA = (0, 255, 0)\n# Inicializar Pygame\npygame.init()\npantalla = pygame.display.set_mode((ANCHO, ALTO))",
        "detail": "laberinto",
        "documentation": {}
    },
    {
        "label": "ALTO",
        "kind": 5,
        "importPath": "laberinto",
        "description": "laberinto",
        "peekOfCode": "ALTO = FILAS * TAM_CELDA\n# Colores (RGB)\nCOLOR_FONDO = (0, 0, 0)\nCOLOR_PARED = (100, 100, 100)\nCOLOR_JUGADOR = (0, 0, 255)\nCOLOR_SALIDA = (0, 255, 0)\n# Inicializar Pygame\npygame.init()\npantalla = pygame.display.set_mode((ANCHO, ALTO))\npygame.display.set_caption(\"Laberinto Aleatorio\")",
        "detail": "laberinto",
        "documentation": {}
    },
    {
        "label": "COLOR_FONDO",
        "kind": 5,
        "importPath": "laberinto",
        "description": "laberinto",
        "peekOfCode": "COLOR_FONDO = (0, 0, 0)\nCOLOR_PARED = (100, 100, 100)\nCOLOR_JUGADOR = (0, 0, 255)\nCOLOR_SALIDA = (0, 255, 0)\n# Inicializar Pygame\npygame.init()\npantalla = pygame.display.set_mode((ANCHO, ALTO))\npygame.display.set_caption(\"Laberinto Aleatorio\")\n# Fuente para mensaje de victoria\nfuente = pygame.font.SysFont(\"Arial\", 40)",
        "detail": "laberinto",
        "documentation": {}
    },
    {
        "label": "COLOR_PARED",
        "kind": 5,
        "importPath": "laberinto",
        "description": "laberinto",
        "peekOfCode": "COLOR_PARED = (100, 100, 100)\nCOLOR_JUGADOR = (0, 0, 255)\nCOLOR_SALIDA = (0, 255, 0)\n# Inicializar Pygame\npygame.init()\npantalla = pygame.display.set_mode((ANCHO, ALTO))\npygame.display.set_caption(\"Laberinto Aleatorio\")\n# Fuente para mensaje de victoria\nfuente = pygame.font.SysFont(\"Arial\", 40)\n# ============================",
        "detail": "laberinto",
        "documentation": {}
    },
    {
        "label": "COLOR_JUGADOR",
        "kind": 5,
        "importPath": "laberinto",
        "description": "laberinto",
        "peekOfCode": "COLOR_JUGADOR = (0, 0, 255)\nCOLOR_SALIDA = (0, 255, 0)\n# Inicializar Pygame\npygame.init()\npantalla = pygame.display.set_mode((ANCHO, ALTO))\npygame.display.set_caption(\"Laberinto Aleatorio\")\n# Fuente para mensaje de victoria\nfuente = pygame.font.SysFont(\"Arial\", 40)\n# ============================\n# GENERAR EL LABERINTO",
        "detail": "laberinto",
        "documentation": {}
    },
    {
        "label": "COLOR_SALIDA",
        "kind": 5,
        "importPath": "laberinto",
        "description": "laberinto",
        "peekOfCode": "COLOR_SALIDA = (0, 255, 0)\n# Inicializar Pygame\npygame.init()\npantalla = pygame.display.set_mode((ANCHO, ALTO))\npygame.display.set_caption(\"Laberinto Aleatorio\")\n# Fuente para mensaje de victoria\nfuente = pygame.font.SysFont(\"Arial\", 40)\n# ============================\n# GENERAR EL LABERINTO\n# ============================",
        "detail": "laberinto",
        "documentation": {}
    },
    {
        "label": "pantalla",
        "kind": 5,
        "importPath": "laberinto",
        "description": "laberinto",
        "peekOfCode": "pantalla = pygame.display.set_mode((ANCHO, ALTO))\npygame.display.set_caption(\"Laberinto Aleatorio\")\n# Fuente para mensaje de victoria\nfuente = pygame.font.SysFont(\"Arial\", 40)\n# ============================\n# GENERAR EL LABERINTO\n# ============================\nlaberinto = generar_laberinto(COLUMNAS, FILAS)\n# Colocar posición de inicio y salida:\n# - Inicio en (1,1)",
        "detail": "laberinto",
        "documentation": {}
    },
    {
        "label": "fuente",
        "kind": 5,
        "importPath": "laberinto",
        "description": "laberinto",
        "peekOfCode": "fuente = pygame.font.SysFont(\"Arial\", 40)\n# ============================\n# GENERAR EL LABERINTO\n# ============================\nlaberinto = generar_laberinto(COLUMNAS, FILAS)\n# Colocar posición de inicio y salida:\n# - Inicio en (1,1)\n# - Salida en (COLUMNAS-2, FILAS-2)\nlaberinto[1][1] = 'P'   # Marcamos el inicio, aunque internamente lo usaremos para mover al jugador\nlaberinto[FILAS-2][COLUMNAS-2] = 'S'",
        "detail": "laberinto",
        "documentation": {}
    },
    {
        "label": "laberinto",
        "kind": 5,
        "importPath": "laberinto",
        "description": "laberinto",
        "peekOfCode": "laberinto = generar_laberinto(COLUMNAS, FILAS)\n# Colocar posición de inicio y salida:\n# - Inicio en (1,1)\n# - Salida en (COLUMNAS-2, FILAS-2)\nlaberinto[1][1] = 'P'   # Marcamos el inicio, aunque internamente lo usaremos para mover al jugador\nlaberinto[FILAS-2][COLUMNAS-2] = 'S'\n# Encontrar posición inicial del jugador\npos_jugador = [1, 1]  # [columna, fila]\n# ============================\n# BUCLE PRINCIPAL DEL JUEGO",
        "detail": "laberinto",
        "documentation": {}
    },
    {
        "label": "laberinto[1][1]",
        "kind": 5,
        "importPath": "laberinto",
        "description": "laberinto",
        "peekOfCode": "laberinto[1][1] = 'P'   # Marcamos el inicio, aunque internamente lo usaremos para mover al jugador\nlaberinto[FILAS-2][COLUMNAS-2] = 'S'\n# Encontrar posición inicial del jugador\npos_jugador = [1, 1]  # [columna, fila]\n# ============================\n# BUCLE PRINCIPAL DEL JUEGO\n# ============================\nreloj = pygame.time.Clock()\njugando = True\nganaste = False",
        "detail": "laberinto",
        "documentation": {}
    },
    {
        "label": "laberinto[FILAS-2][COLUMNAS-2]",
        "kind": 5,
        "importPath": "laberinto",
        "description": "laberinto",
        "peekOfCode": "laberinto[FILAS-2][COLUMNAS-2] = 'S'\n# Encontrar posición inicial del jugador\npos_jugador = [1, 1]  # [columna, fila]\n# ============================\n# BUCLE PRINCIPAL DEL JUEGO\n# ============================\nreloj = pygame.time.Clock()\njugando = True\nganaste = False\nwhile jugando:",
        "detail": "laberinto",
        "documentation": {}
    },
    {
        "label": "pos_jugador",
        "kind": 5,
        "importPath": "laberinto",
        "description": "laberinto",
        "peekOfCode": "pos_jugador = [1, 1]  # [columna, fila]\n# ============================\n# BUCLE PRINCIPAL DEL JUEGO\n# ============================\nreloj = pygame.time.Clock()\njugando = True\nganaste = False\nwhile jugando:\n    reloj.tick(10)  # 10 FPS\n    for evento in pygame.event.get():",
        "detail": "laberinto",
        "documentation": {}
    },
    {
        "label": "reloj",
        "kind": 5,
        "importPath": "laberinto",
        "description": "laberinto",
        "peekOfCode": "reloj = pygame.time.Clock()\njugando = True\nganaste = False\nwhile jugando:\n    reloj.tick(10)  # 10 FPS\n    for evento in pygame.event.get():\n        if evento.type == pygame.QUIT:\n            jugando = False\n        elif evento.type == pygame.KEYDOWN and not ganaste:\n            nueva_pos = pos_jugador.copy()",
        "detail": "laberinto",
        "documentation": {}
    },
    {
        "label": "jugando",
        "kind": 5,
        "importPath": "laberinto",
        "description": "laberinto",
        "peekOfCode": "jugando = True\nganaste = False\nwhile jugando:\n    reloj.tick(10)  # 10 FPS\n    for evento in pygame.event.get():\n        if evento.type == pygame.QUIT:\n            jugando = False\n        elif evento.type == pygame.KEYDOWN and not ganaste:\n            nueva_pos = pos_jugador.copy()\n            if evento.key == pygame.K_UP:",
        "detail": "laberinto",
        "documentation": {}
    },
    {
        "label": "ganaste",
        "kind": 5,
        "importPath": "laberinto",
        "description": "laberinto",
        "peekOfCode": "ganaste = False\nwhile jugando:\n    reloj.tick(10)  # 10 FPS\n    for evento in pygame.event.get():\n        if evento.type == pygame.QUIT:\n            jugando = False\n        elif evento.type == pygame.KEYDOWN and not ganaste:\n            nueva_pos = pos_jugador.copy()\n            if evento.key == pygame.K_UP:\n                nueva_pos[1] -= 1",
        "detail": "laberinto",
        "documentation": {}
    },
    {
        "label": "estructura",
        "kind": 5,
        "importPath": "listysublist",
        "description": "listysublist",
        "peekOfCode": "estructura = [\n    \"nivel0\",\n    [\n        \"nivel1\",\n        [\n            \"nivel2\",\n            [\n                \"nivel3\",\n                \"dato_final\"\n            ],",
        "detail": "listysublist",
        "documentation": {}
    },
    {
        "label": "mp_hands",
        "kind": 5,
        "importPath": "mano",
        "description": "mano",
        "peekOfCode": "mp_hands = mp.solutions.hands\nhands = mp_hands.Hands(max_num_hands=1, min_detection_confidence=0.7)\nmp_draw = mp.solutions.drawing_utils\n# Iniciar la captura de video\ncap = cv2.VideoCapture(0)\nwhile True:\n    success, frame = cap.read()\n    if not success:\n        break\n    # Convertir a RGB, ya que MediaPipe trabaja en este formato",
        "detail": "mano",
        "documentation": {}
    },
    {
        "label": "hands",
        "kind": 5,
        "importPath": "mano",
        "description": "mano",
        "peekOfCode": "hands = mp_hands.Hands(max_num_hands=1, min_detection_confidence=0.7)\nmp_draw = mp.solutions.drawing_utils\n# Iniciar la captura de video\ncap = cv2.VideoCapture(0)\nwhile True:\n    success, frame = cap.read()\n    if not success:\n        break\n    # Convertir a RGB, ya que MediaPipe trabaja en este formato\n    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)",
        "detail": "mano",
        "documentation": {}
    },
    {
        "label": "mp_draw",
        "kind": 5,
        "importPath": "mano",
        "description": "mano",
        "peekOfCode": "mp_draw = mp.solutions.drawing_utils\n# Iniciar la captura de video\ncap = cv2.VideoCapture(0)\nwhile True:\n    success, frame = cap.read()\n    if not success:\n        break\n    # Convertir a RGB, ya que MediaPipe trabaja en este formato\n    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n    result = hands.process(frame_rgb)",
        "detail": "mano",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": "mano",
        "description": "mano",
        "peekOfCode": "cap = cv2.VideoCapture(0)\nwhile True:\n    success, frame = cap.read()\n    if not success:\n        break\n    # Convertir a RGB, ya que MediaPipe trabaja en este formato\n    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n    result = hands.process(frame_rgb)\n    # Si se detecta una mano\n    if result.multi_hand_landmarks:",
        "detail": "mano",
        "documentation": {}
    },
    {
        "label": "Cell",
        "kind": 6,
        "importPath": "mazes",
        "description": "mazes",
        "peekOfCode": "class Cell:\n    def __init__(self, row, col):\n        self.row = row\n        self.col = col\n        self.walls = {'top': True, 'right': True, 'bottom': True, 'left': True}\n        self.visited = False\nclass Maze:\n    def __init__(self, rows, cols):\n        self.rows = rows\n        self.cols = cols",
        "detail": "mazes",
        "documentation": {}
    },
    {
        "label": "Maze",
        "kind": 6,
        "importPath": "mazes",
        "description": "mazes",
        "peekOfCode": "class Maze:\n    def __init__(self, rows, cols):\n        self.rows = rows\n        self.cols = cols\n        self.grid = [[Cell(row, col) for col in range(cols)] for row in range(rows)]\n        self.generate()\n    def generate(self):\n        stack = []\n        current = self.grid[0][0]\n        current.visited = True",
        "detail": "mazes",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "mazes",
        "description": "mazes",
        "peekOfCode": "class Player:\n    def __init__(self, row, col):\n        self.row = row\n        self.col = col\n        self.size = CELL_SIZE // 2\n        self.x = col * CELL_SIZE + (CELL_SIZE - self.size) // 2\n        self.y = row * CELL_SIZE + (CELL_SIZE - self.size) // 2\n    def move(self, direction, maze):\n        current_cell = maze.grid[self.row][self.col]\n        new_row, new_col = self.row, self.col",
        "detail": "mazes",
        "documentation": {}
    },
    {
        "label": "draw_exit",
        "kind": 2,
        "importPath": "mazes",
        "description": "mazes",
        "peekOfCode": "def draw_exit(surface, row, col):\n    x = col * CELL_SIZE + (CELL_SIZE - 20) // 2\n    y = row * CELL_SIZE + (CELL_SIZE - 20) // 2\n    pygame.draw.rect(surface, GREEN, (x, y, 20, 20))\ndef game():\n    current_level = 1\n    total_score = 0\n    max_levels = 10\n    while current_level <= max_levels:\n        maze = Maze(MAZE_ROWS, MAZE_COLS)",
        "detail": "mazes",
        "documentation": {}
    },
    {
        "label": "game",
        "kind": 2,
        "importPath": "mazes",
        "description": "mazes",
        "peekOfCode": "def game():\n    current_level = 1\n    total_score = 0\n    max_levels = 10\n    while current_level <= max_levels:\n        maze = Maze(MAZE_ROWS, MAZE_COLS)\n        player = Player(0, 0)\n        exit_row = MAZE_ROWS - 1\n        exit_col = MAZE_COLS - 1\n        running = True",
        "detail": "mazes",
        "documentation": {}
    },
    {
        "label": "SCREEN_WIDTH",
        "kind": 5,
        "importPath": "mazes",
        "description": "mazes",
        "peekOfCode": "SCREEN_WIDTH = 800\nSCREEN_HEIGHT = 600\nCELL_SIZE = 40\nMAZE_ROWS = SCREEN_HEIGHT // CELL_SIZE\nMAZE_COLS = SCREEN_WIDTH // CELL_SIZE\n# Colores\nBLACK = (0, 0, 0)\nWHITE = (255, 255, 255)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)",
        "detail": "mazes",
        "documentation": {}
    },
    {
        "label": "SCREEN_HEIGHT",
        "kind": 5,
        "importPath": "mazes",
        "description": "mazes",
        "peekOfCode": "SCREEN_HEIGHT = 600\nCELL_SIZE = 40\nMAZE_ROWS = SCREEN_HEIGHT // CELL_SIZE\nMAZE_COLS = SCREEN_WIDTH // CELL_SIZE\n# Colores\nBLACK = (0, 0, 0)\nWHITE = (255, 255, 255)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nBLUE = (0, 0, 255)",
        "detail": "mazes",
        "documentation": {}
    },
    {
        "label": "CELL_SIZE",
        "kind": 5,
        "importPath": "mazes",
        "description": "mazes",
        "peekOfCode": "CELL_SIZE = 40\nMAZE_ROWS = SCREEN_HEIGHT // CELL_SIZE\nMAZE_COLS = SCREEN_WIDTH // CELL_SIZE\n# Colores\nBLACK = (0, 0, 0)\nWHITE = (255, 255, 255)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nBLUE = (0, 0, 255)\n# Inicializar pantalla",
        "detail": "mazes",
        "documentation": {}
    },
    {
        "label": "MAZE_ROWS",
        "kind": 5,
        "importPath": "mazes",
        "description": "mazes",
        "peekOfCode": "MAZE_ROWS = SCREEN_HEIGHT // CELL_SIZE\nMAZE_COLS = SCREEN_WIDTH // CELL_SIZE\n# Colores\nBLACK = (0, 0, 0)\nWHITE = (255, 255, 255)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nBLUE = (0, 0, 255)\n# Inicializar pantalla\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))",
        "detail": "mazes",
        "documentation": {}
    },
    {
        "label": "MAZE_COLS",
        "kind": 5,
        "importPath": "mazes",
        "description": "mazes",
        "peekOfCode": "MAZE_COLS = SCREEN_WIDTH // CELL_SIZE\n# Colores\nBLACK = (0, 0, 0)\nWHITE = (255, 255, 255)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nBLUE = (0, 0, 255)\n# Inicializar pantalla\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption(\"Laberinto de 10 Niveles\")",
        "detail": "mazes",
        "documentation": {}
    },
    {
        "label": "BLACK",
        "kind": 5,
        "importPath": "mazes",
        "description": "mazes",
        "peekOfCode": "BLACK = (0, 0, 0)\nWHITE = (255, 255, 255)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nBLUE = (0, 0, 255)\n# Inicializar pantalla\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption(\"Laberinto de 10 Niveles\")\nclock = pygame.time.Clock()\nclass Cell:",
        "detail": "mazes",
        "documentation": {}
    },
    {
        "label": "WHITE",
        "kind": 5,
        "importPath": "mazes",
        "description": "mazes",
        "peekOfCode": "WHITE = (255, 255, 255)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nBLUE = (0, 0, 255)\n# Inicializar pantalla\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption(\"Laberinto de 10 Niveles\")\nclock = pygame.time.Clock()\nclass Cell:\n    def __init__(self, row, col):",
        "detail": "mazes",
        "documentation": {}
    },
    {
        "label": "RED",
        "kind": 5,
        "importPath": "mazes",
        "description": "mazes",
        "peekOfCode": "RED = (255, 0, 0)\nGREEN = (0, 255, 0)\nBLUE = (0, 0, 255)\n# Inicializar pantalla\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption(\"Laberinto de 10 Niveles\")\nclock = pygame.time.Clock()\nclass Cell:\n    def __init__(self, row, col):\n        self.row = row",
        "detail": "mazes",
        "documentation": {}
    },
    {
        "label": "GREEN",
        "kind": 5,
        "importPath": "mazes",
        "description": "mazes",
        "peekOfCode": "GREEN = (0, 255, 0)\nBLUE = (0, 0, 255)\n# Inicializar pantalla\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption(\"Laberinto de 10 Niveles\")\nclock = pygame.time.Clock()\nclass Cell:\n    def __init__(self, row, col):\n        self.row = row\n        self.col = col",
        "detail": "mazes",
        "documentation": {}
    },
    {
        "label": "BLUE",
        "kind": 5,
        "importPath": "mazes",
        "description": "mazes",
        "peekOfCode": "BLUE = (0, 0, 255)\n# Inicializar pantalla\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption(\"Laberinto de 10 Niveles\")\nclock = pygame.time.Clock()\nclass Cell:\n    def __init__(self, row, col):\n        self.row = row\n        self.col = col\n        self.walls = {'top': True, 'right': True, 'bottom': True, 'left': True}",
        "detail": "mazes",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "mazes",
        "description": "mazes",
        "peekOfCode": "screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption(\"Laberinto de 10 Niveles\")\nclock = pygame.time.Clock()\nclass Cell:\n    def __init__(self, row, col):\n        self.row = row\n        self.col = col\n        self.walls = {'top': True, 'right': True, 'bottom': True, 'left': True}\n        self.visited = False\nclass Maze:",
        "detail": "mazes",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "mazes",
        "description": "mazes",
        "peekOfCode": "clock = pygame.time.Clock()\nclass Cell:\n    def __init__(self, row, col):\n        self.row = row\n        self.col = col\n        self.walls = {'top': True, 'right': True, 'bottom': True, 'left': True}\n        self.visited = False\nclass Maze:\n    def __init__(self, rows, cols):\n        self.rows = rows",
        "detail": "mazes",
        "documentation": {}
    },
    {
        "label": "mp_hands",
        "kind": 5,
        "importPath": "movemouse",
        "description": "movemouse",
        "peekOfCode": "mp_hands = mp.solutions.hands\nhands = mp_hands.Hands(max_num_hands=1, min_detection_confidence=0.7)\nmp_draw = mp.solutions.drawing_utils\n# Tamaño de pantalla\nscreen_width, screen_height = pyautogui.size()\n# Captura de video\ncap = cv2.VideoCapture(0)\nwhile True:\n    ret, frame = cap.read()\n    if not ret:",
        "detail": "movemouse",
        "documentation": {}
    },
    {
        "label": "hands",
        "kind": 5,
        "importPath": "movemouse",
        "description": "movemouse",
        "peekOfCode": "hands = mp_hands.Hands(max_num_hands=1, min_detection_confidence=0.7)\nmp_draw = mp.solutions.drawing_utils\n# Tamaño de pantalla\nscreen_width, screen_height = pyautogui.size()\n# Captura de video\ncap = cv2.VideoCapture(0)\nwhile True:\n    ret, frame = cap.read()\n    if not ret:\n        break",
        "detail": "movemouse",
        "documentation": {}
    },
    {
        "label": "mp_draw",
        "kind": 5,
        "importPath": "movemouse",
        "description": "movemouse",
        "peekOfCode": "mp_draw = mp.solutions.drawing_utils\n# Tamaño de pantalla\nscreen_width, screen_height = pyautogui.size()\n# Captura de video\ncap = cv2.VideoCapture(0)\nwhile True:\n    ret, frame = cap.read()\n    if not ret:\n        break\n    # Invertir imagen como espejo",
        "detail": "movemouse",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": "movemouse",
        "description": "movemouse",
        "peekOfCode": "cap = cv2.VideoCapture(0)\nwhile True:\n    ret, frame = cap.read()\n    if not ret:\n        break\n    # Invertir imagen como espejo\n    frame = cv2.flip(frame, 1)\n    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n    result = hands.process(frame_rgb)\n    frame_height, frame_width, _ = frame.shape",
        "detail": "movemouse",
        "documentation": {}
    },
    {
        "label": "draw_text",
        "kind": 2,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "def draw_text(text, font, color, surface, x, y):\n    \"\"\"Dibuja texto centrado en (x, y).\"\"\"\n    render_text = font.render(text, True, color)\n    rect = render_text.get_rect()\n    rect.center = (x, y)\n    surface.blit(render_text, rect)\ndef mostrar_marcador(score1, score2, turno):\n    \"\"\"Dibuja el marcador de puntajes y el turno actual.\"\"\"\n    marcador_text = f\"Equipo 1: {score1}  |  Equipo 2: {score2}\"\n    turno_text = f\"Turno de: Equipo {turno}\"",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "mostrar_marcador",
        "kind": 2,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "def mostrar_marcador(score1, score2, turno):\n    \"\"\"Dibuja el marcador de puntajes y el turno actual.\"\"\"\n    marcador_text = f\"Equipo 1: {score1}  |  Equipo 2: {score2}\"\n    turno_text = f\"Turno de: Equipo {turno}\"\n    text_surface_marcador = FONT_SCORE.render(marcador_text, True, BLACK)\n    SCREEN.blit(text_surface_marcador, (20, 10))\n    text_surface_turno = FONT_SCORE.render(turno_text, True, BLACK)\n    SCREEN.blit(text_surface_turno, (WIDTH - 180, 10))\ndef mostrar_pregunta(pregunta_dict, hovered_index, turno):\n    \"\"\"",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "mostrar_pregunta",
        "kind": 2,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "def mostrar_pregunta(pregunta_dict, hovered_index, turno):\n    \"\"\"\n    Muestra la pregunta y sus opciones (enumeradas) en pantalla y retorna\n    la lista de rectángulos correspondientes a cada opción.\n    \"\"\"\n    # Dibujar imagen de fondo y aclararla\n    if background:\n        SCREEN.blit(background, (0, 0))\n        overlay = pygame.Surface((WIDTH, HEIGHT), pygame.SRCALPHA)\n        overlay.fill((255, 255, 255, 90))  # Ajusta el valor para aclarar la imagen",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "mostrar_resultado_final",
        "kind": 2,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "def mostrar_resultado_final(score1, score2, total_preguntas):\n    \"\"\"Muestra la pantalla final con los resultados.\"\"\"\n    if background:\n        SCREEN.blit(background, (0, 0))\n    else:\n        SCREEN.fill(WHITE)\n    draw_text(\"¡Fin de la Trivia!\", FONT_TITLE, PURPLE, SCREEN, WIDTH // 2, HEIGHT // 2 - 50)\n    resultado_text = f\"Equipo 1: {score1} puntos  |  Equipo 2: {score2} puntos\"\n    draw_text(resultado_text, FONT, BLACK, SCREEN, WIDTH // 2, HEIGHT // 2)\n    final_msg = \"Gracias por participar y conmemorar el Día Internacional de la Mujer.\"",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "def main():\n    global indice_pregunta, score_team1, score_team2, turno_equipo, game_over\n    clock = pygame.time.Clock()\n    hovered_index = -1\n    # Mapeo de teclas para las opciones: a->0, b->1, c->2, d->3\n    key_mapping = {\n        pygame.K_a: 0,\n        pygame.K_b: 1,\n        pygame.K_c: 2,\n        pygame.K_d: 3",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "procesar_respuesta",
        "kind": 2,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "def procesar_respuesta(current_question, respuesta):\n    \"\"\"\n    Procesa la respuesta (ya sea por mouse o teclado), reproduce el sonido\n    correspondiente, actualiza la puntuación, cambia el turno y avanza la pregunta.\n    \"\"\"\n    global indice_pregunta, score_team1, score_team2, turno_equipo, hovered_index\n    if respuesta == current_question[\"respuesta_correcta\"]:\n        if turno_equipo == 1:\n            score_team1 += 1\n        else:",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "SCREEN",
        "kind": 5,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "SCREEN = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption(\"Trivia - Día Internacional de la Mujer\")\n# -------------------------\n#  Colores\n# -------------------------\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\nPURPLE = (128, 0, 128)\nGRAY = (200, 200, 200)\nHOVER_COLOR = (150, 150, 150)   # Color al pasar el mouse",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "WHITE",
        "kind": 5,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "WHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\nPURPLE = (128, 0, 128)\nGRAY = (200, 200, 200)\nHOVER_COLOR = (150, 150, 150)   # Color al pasar el mouse\n# -------------------------\n#  Fuentes de texto\n# -------------------------\nFONT = pygame.font.SysFont(\"Arial\", 24)\nFONT_TITLE = pygame.font.SysFont(\"Arial\", 36, bold=True)",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "BLACK",
        "kind": 5,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "BLACK = (0, 0, 0)\nPURPLE = (128, 0, 128)\nGRAY = (200, 200, 200)\nHOVER_COLOR = (150, 150, 150)   # Color al pasar el mouse\n# -------------------------\n#  Fuentes de texto\n# -------------------------\nFONT = pygame.font.SysFont(\"Arial\", 24)\nFONT_TITLE = pygame.font.SysFont(\"Arial\", 36, bold=True)\nFONT_SCORE = pygame.font.SysFont(\"Arial\", 20, bold=True)",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "PURPLE",
        "kind": 5,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "PURPLE = (128, 0, 128)\nGRAY = (200, 200, 200)\nHOVER_COLOR = (150, 150, 150)   # Color al pasar el mouse\n# -------------------------\n#  Fuentes de texto\n# -------------------------\nFONT = pygame.font.SysFont(\"Arial\", 24)\nFONT_TITLE = pygame.font.SysFont(\"Arial\", 36, bold=True)\nFONT_SCORE = pygame.font.SysFont(\"Arial\", 20, bold=True)\n# -------------------------",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "GRAY",
        "kind": 5,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "GRAY = (200, 200, 200)\nHOVER_COLOR = (150, 150, 150)   # Color al pasar el mouse\n# -------------------------\n#  Fuentes de texto\n# -------------------------\nFONT = pygame.font.SysFont(\"Arial\", 24)\nFONT_TITLE = pygame.font.SysFont(\"Arial\", 36, bold=True)\nFONT_SCORE = pygame.font.SysFont(\"Arial\", 20, bold=True)\n# -------------------------\n#  Cargar sonidos",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "HOVER_COLOR",
        "kind": 5,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "HOVER_COLOR = (150, 150, 150)   # Color al pasar el mouse\n# -------------------------\n#  Fuentes de texto\n# -------------------------\nFONT = pygame.font.SysFont(\"Arial\", 24)\nFONT_TITLE = pygame.font.SysFont(\"Arial\", 36, bold=True)\nFONT_SCORE = pygame.font.SysFont(\"Arial\", 20, bold=True)\n# -------------------------\n#  Cargar sonidos\n# -------------------------",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "FONT",
        "kind": 5,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "FONT = pygame.font.SysFont(\"Arial\", 24)\nFONT_TITLE = pygame.font.SysFont(\"Arial\", 36, bold=True)\nFONT_SCORE = pygame.font.SysFont(\"Arial\", 20, bold=True)\n# -------------------------\n#  Cargar sonidos\n# -------------------------\ntry:\n    correct_sound = pygame.mixer.Sound(\"assets/correct.mp3\")\n    incorrect_sound = pygame.mixer.Sound(\"assets/incorrect.mp3\")\nexcept pygame.error:",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "FONT_TITLE",
        "kind": 5,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "FONT_TITLE = pygame.font.SysFont(\"Arial\", 36, bold=True)\nFONT_SCORE = pygame.font.SysFont(\"Arial\", 20, bold=True)\n# -------------------------\n#  Cargar sonidos\n# -------------------------\ntry:\n    correct_sound = pygame.mixer.Sound(\"assets/correct.mp3\")\n    incorrect_sound = pygame.mixer.Sound(\"assets/incorrect.mp3\")\nexcept pygame.error:\n    correct_sound = None",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "FONT_SCORE",
        "kind": 5,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "FONT_SCORE = pygame.font.SysFont(\"Arial\", 20, bold=True)\n# -------------------------\n#  Cargar sonidos\n# -------------------------\ntry:\n    correct_sound = pygame.mixer.Sound(\"assets/correct.mp3\")\n    incorrect_sound = pygame.mixer.Sound(\"assets/incorrect.mp3\")\nexcept pygame.error:\n    correct_sound = None\n    incorrect_sound = None",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "indice_pregunta",
        "kind": 5,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "indice_pregunta = 0  # Índice de la pregunta actual\nscore_team1 = 0\nscore_team2 = 0\nturno_equipo = 1  # Comienza el Equipo 1\ngame_over = False\ndef draw_text(text, font, color, surface, x, y):\n    \"\"\"Dibuja texto centrado en (x, y).\"\"\"\n    render_text = font.render(text, True, color)\n    rect = render_text.get_rect()\n    rect.center = (x, y)",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "score_team1",
        "kind": 5,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "score_team1 = 0\nscore_team2 = 0\nturno_equipo = 1  # Comienza el Equipo 1\ngame_over = False\ndef draw_text(text, font, color, surface, x, y):\n    \"\"\"Dibuja texto centrado en (x, y).\"\"\"\n    render_text = font.render(text, True, color)\n    rect = render_text.get_rect()\n    rect.center = (x, y)\n    surface.blit(render_text, rect)",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "score_team2",
        "kind": 5,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "score_team2 = 0\nturno_equipo = 1  # Comienza el Equipo 1\ngame_over = False\ndef draw_text(text, font, color, surface, x, y):\n    \"\"\"Dibuja texto centrado en (x, y).\"\"\"\n    render_text = font.render(text, True, color)\n    rect = render_text.get_rect()\n    rect.center = (x, y)\n    surface.blit(render_text, rect)\ndef mostrar_marcador(score1, score2, turno):",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "turno_equipo",
        "kind": 5,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "turno_equipo = 1  # Comienza el Equipo 1\ngame_over = False\ndef draw_text(text, font, color, surface, x, y):\n    \"\"\"Dibuja texto centrado en (x, y).\"\"\"\n    render_text = font.render(text, True, color)\n    rect = render_text.get_rect()\n    rect.center = (x, y)\n    surface.blit(render_text, rect)\ndef mostrar_marcador(score1, score2, turno):\n    \"\"\"Dibuja el marcador de puntajes y el turno actual.\"\"\"",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "game_over",
        "kind": 5,
        "importPath": "mujer",
        "description": "mujer",
        "peekOfCode": "game_over = False\ndef draw_text(text, font, color, surface, x, y):\n    \"\"\"Dibuja texto centrado en (x, y).\"\"\"\n    render_text = font.render(text, True, color)\n    rect = render_text.get_rect()\n    rect.center = (x, y)\n    surface.blit(render_text, rect)\ndef mostrar_marcador(score1, score2, turno):\n    \"\"\"Dibuja el marcador de puntajes y el turno actual.\"\"\"\n    marcador_text = f\"Equipo 1: {score1}  |  Equipo 2: {score2}\"",
        "detail": "mujer",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "screen = pygame.display.set_mode((constantes.ANCHO, constantes.ALTO))\nclock = pygame.time.Clock()\n# Cargar y escalar los sprites correctamente\nplayer_sprites = []\nfor i in range(6):  # Suponiendo que tienes 6 imágenes\n    img = pygame.image.load(\n        f\"assets/Walking/0_Fallen_Angels_Walking_00{i}.png\").convert_alpha()\n    img = pygame.transform.scale(\n        img, (constantes.JUGADOR_TAMANO, constantes.JUGADOR_TAMANO))  # Escalar correctamente\n    player_sprites.append(img)  # Guardar imagen escalada en la lista",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "clock = pygame.time.Clock()\n# Cargar y escalar los sprites correctamente\nplayer_sprites = []\nfor i in range(6):  # Suponiendo que tienes 6 imágenes\n    img = pygame.image.load(\n        f\"assets/Walking/0_Fallen_Angels_Walking_00{i}.png\").convert_alpha()\n    img = pygame.transform.scale(\n        img, (constantes.JUGADOR_TAMANO, constantes.JUGADOR_TAMANO))  # Escalar correctamente\n    player_sprites.append(img)  # Guardar imagen escalada en la lista\n# 🎯 **Centrar el jugador en la pantalla**",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "player_sprites",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "player_sprites = []\nfor i in range(6):  # Suponiendo que tienes 6 imágenes\n    img = pygame.image.load(\n        f\"assets/Walking/0_Fallen_Angels_Walking_00{i}.png\").convert_alpha()\n    img = pygame.transform.scale(\n        img, (constantes.JUGADOR_TAMANO, constantes.JUGADOR_TAMANO))  # Escalar correctamente\n    player_sprites.append(img)  # Guardar imagen escalada en la lista\n# 🎯 **Centrar el jugador en la pantalla**\nplayer_pos = pygame.Vector2(\n    (constantes.ANCHO - constantes.JUGADOR_TAMANO) // 2,",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "player_pos",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "player_pos = pygame.Vector2(\n    (constantes.ANCHO - constantes.JUGADOR_TAMANO) // 2,\n    (constantes.ALTO - constantes.JUGADOR_TAMANO) // 2\n)\nvelocidad = constantes.VELOCIDAD\nframe_index = 0\nanimation_speed = constantes.JUGADOR_SPEED\nframe_counter = 0\nmirando_izquierda = False\n# 📌 **Generar obstáculos asegurando que no aparezcan cerca del jugador**",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "velocidad",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "velocidad = constantes.VELOCIDAD\nframe_index = 0\nanimation_speed = constantes.JUGADOR_SPEED\nframe_counter = 0\nmirando_izquierda = False\n# 📌 **Generar obstáculos asegurando que no aparezcan cerca del jugador**\njugador_radio_seguro = 150  # Distancia mínima desde el jugador\nobstaculos = []\nfor _ in range(5):  # Número de obstáculos\n    while True:",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "frame_index",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "frame_index = 0\nanimation_speed = constantes.JUGADOR_SPEED\nframe_counter = 0\nmirando_izquierda = False\n# 📌 **Generar obstáculos asegurando que no aparezcan cerca del jugador**\njugador_radio_seguro = 150  # Distancia mínima desde el jugador\nobstaculos = []\nfor _ in range(5):  # Número de obstáculos\n    while True:\n        obs_x = random.randint(50, constantes.ANCHO - 50)",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "animation_speed",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "animation_speed = constantes.JUGADOR_SPEED\nframe_counter = 0\nmirando_izquierda = False\n# 📌 **Generar obstáculos asegurando que no aparezcan cerca del jugador**\njugador_radio_seguro = 150  # Distancia mínima desde el jugador\nobstaculos = []\nfor _ in range(5):  # Número de obstáculos\n    while True:\n        obs_x = random.randint(50, constantes.ANCHO - 50)\n        obs_y = random.randint(50, constantes.ALTO - 50)",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "frame_counter",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "frame_counter = 0\nmirando_izquierda = False\n# 📌 **Generar obstáculos asegurando que no aparezcan cerca del jugador**\njugador_radio_seguro = 150  # Distancia mínima desde el jugador\nobstaculos = []\nfor _ in range(5):  # Número de obstáculos\n    while True:\n        obs_x = random.randint(50, constantes.ANCHO - 50)\n        obs_y = random.randint(50, constantes.ALTO - 50)\n        # Calcular distancia al jugador",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "mirando_izquierda",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "mirando_izquierda = False\n# 📌 **Generar obstáculos asegurando que no aparezcan cerca del jugador**\njugador_radio_seguro = 150  # Distancia mínima desde el jugador\nobstaculos = []\nfor _ in range(5):  # Número de obstáculos\n    while True:\n        obs_x = random.randint(50, constantes.ANCHO - 50)\n        obs_y = random.randint(50, constantes.ALTO - 50)\n        # Calcular distancia al jugador\n        distancia = ((obs_x - player_pos.x) ** 2 + (obs_y - player_pos.y) ** 2) ** 0.5",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "jugador_radio_seguro",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "jugador_radio_seguro = 150  # Distancia mínima desde el jugador\nobstaculos = []\nfor _ in range(5):  # Número de obstáculos\n    while True:\n        obs_x = random.randint(50, constantes.ANCHO - 50)\n        obs_y = random.randint(50, constantes.ALTO - 50)\n        # Calcular distancia al jugador\n        distancia = ((obs_x - player_pos.x) ** 2 + (obs_y - player_pos.y) ** 2) ** 0.5\n        if distancia > jugador_radio_seguro:  # Si el obstáculo está suficientemente lejos\n            if random.choice([True, False]):",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "obstaculos",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "obstaculos = []\nfor _ in range(5):  # Número de obstáculos\n    while True:\n        obs_x = random.randint(50, constantes.ANCHO - 50)\n        obs_y = random.randint(50, constantes.ALTO - 50)\n        # Calcular distancia al jugador\n        distancia = ((obs_x - player_pos.x) ** 2 + (obs_y - player_pos.y) ** 2) ** 0.5\n        if distancia > jugador_radio_seguro:  # Si el obstáculo está suficientemente lejos\n            if random.choice([True, False]):\n                ancho = random.randint(50, 120)",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "obstaculo_masks",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "obstaculo_masks = [pygame.mask.Mask((obs[1].width, obs[1].height), fill=True) if obs[0] == \"rect\" else None for obs in obstaculos]\nrunning = True\nwhile running:\n    dt = clock.tick(60) / 1000.0  # Control de FPS\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n    # Lógica de movimiento\n    keys = pygame.key.get_pressed()\n    moving = False",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "nuevo1",
        "description": "nuevo1",
        "peekOfCode": "running = True\nwhile running:\n    dt = clock.tick(60) / 1000.0  # Control de FPS\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n    # Lógica de movimiento\n    keys = pygame.key.get_pressed()\n    moving = False\n    nueva_pos = player_pos.copy()",
        "detail": "nuevo1",
        "documentation": {}
    },
    {
        "label": "mp_hands",
        "kind": 5,
        "importPath": "opencvpy",
        "description": "opencvpy",
        "peekOfCode": "mp_hands = mp.solutions.hands\nhands = mp_hands.Hands(max_num_hands=2, min_detection_confidence=0.7)\nmp_draw = mp.solutions.drawing_utils\n# Puntas de los dedos: pulgar, índice, medio, anular, meñique\nfinger_tips_ids = [4, 8, 12, 16, 20]\n# Captura de video\ncap = cv2.VideoCapture(0)\nwhile True:\n    ret, frame = cap.read()\n    if not ret:",
        "detail": "opencvpy",
        "documentation": {}
    },
    {
        "label": "hands",
        "kind": 5,
        "importPath": "opencvpy",
        "description": "opencvpy",
        "peekOfCode": "hands = mp_hands.Hands(max_num_hands=2, min_detection_confidence=0.7)\nmp_draw = mp.solutions.drawing_utils\n# Puntas de los dedos: pulgar, índice, medio, anular, meñique\nfinger_tips_ids = [4, 8, 12, 16, 20]\n# Captura de video\ncap = cv2.VideoCapture(0)\nwhile True:\n    ret, frame = cap.read()\n    if not ret:\n        break",
        "detail": "opencvpy",
        "documentation": {}
    },
    {
        "label": "mp_draw",
        "kind": 5,
        "importPath": "opencvpy",
        "description": "opencvpy",
        "peekOfCode": "mp_draw = mp.solutions.drawing_utils\n# Puntas de los dedos: pulgar, índice, medio, anular, meñique\nfinger_tips_ids = [4, 8, 12, 16, 20]\n# Captura de video\ncap = cv2.VideoCapture(0)\nwhile True:\n    ret, frame = cap.read()\n    if not ret:\n        break\n    # Efecto espejo",
        "detail": "opencvpy",
        "documentation": {}
    },
    {
        "label": "finger_tips_ids",
        "kind": 5,
        "importPath": "opencvpy",
        "description": "opencvpy",
        "peekOfCode": "finger_tips_ids = [4, 8, 12, 16, 20]\n# Captura de video\ncap = cv2.VideoCapture(0)\nwhile True:\n    ret, frame = cap.read()\n    if not ret:\n        break\n    # Efecto espejo\n    frame = cv2.flip(frame, 1)\n    # Convertir a RGB",
        "detail": "opencvpy",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": "opencvpy",
        "description": "opencvpy",
        "peekOfCode": "cap = cv2.VideoCapture(0)\nwhile True:\n    ret, frame = cap.read()\n    if not ret:\n        break\n    # Efecto espejo\n    frame = cv2.flip(frame, 1)\n    # Convertir a RGB\n    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n    result = hands.process(frame_rgb)",
        "detail": "opencvpy",
        "documentation": {}
    },
    {
        "label": "ANCHO",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "ANCHO = 800\nALTO = 600\n# Crear la ventana\nventana = pygame.display.set_mode((ANCHO, ALTO))\npygame.display.set_caption(\"Evita los Obstáculos\")\n# Colores\nBLANCO = (255, 255, 255)\nNEGRO = (0, 0, 0)\nROJO = (255, 0, 0)\nVERDE = (0, 255, 0)",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "ALTO",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "ALTO = 600\n# Crear la ventana\nventana = pygame.display.set_mode((ANCHO, ALTO))\npygame.display.set_caption(\"Evita los Obstáculos\")\n# Colores\nBLANCO = (255, 255, 255)\nNEGRO = (0, 0, 0)\nROJO = (255, 0, 0)\nVERDE = (0, 255, 0)\nAZUL = (0, 0, 255)",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "ventana",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "ventana = pygame.display.set_mode((ANCHO, ALTO))\npygame.display.set_caption(\"Evita los Obstáculos\")\n# Colores\nBLANCO = (255, 255, 255)\nNEGRO = (0, 0, 0)\nROJO = (255, 0, 0)\nVERDE = (0, 255, 0)\nAZUL = (0, 0, 255)\n# Bucle principal del juego\nreloj = pygame.time.Clock()",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "BLANCO",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "BLANCO = (255, 255, 255)\nNEGRO = (0, 0, 0)\nROJO = (255, 0, 0)\nVERDE = (0, 255, 0)\nAZUL = (0, 0, 255)\n# Bucle principal del juego\nreloj = pygame.time.Clock()\n# Variables del jugador\njugador_tamano = 50\njugador_x = ANCHO // 2 - jugador_tamano // 2",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "NEGRO",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "NEGRO = (0, 0, 0)\nROJO = (255, 0, 0)\nVERDE = (0, 255, 0)\nAZUL = (0, 0, 255)\n# Bucle principal del juego\nreloj = pygame.time.Clock()\n# Variables del jugador\njugador_tamano = 50\njugador_x = ANCHO // 2 - jugador_tamano // 2\njugador_y = ALTO - jugador_tamano - 10",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "ROJO",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "ROJO = (255, 0, 0)\nVERDE = (0, 255, 0)\nAZUL = (0, 0, 255)\n# Bucle principal del juego\nreloj = pygame.time.Clock()\n# Variables del jugador\njugador_tamano = 50\njugador_x = ANCHO // 2 - jugador_tamano // 2\njugador_y = ALTO - jugador_tamano - 10\nvelocidad_jugador = 5",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "VERDE",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "VERDE = (0, 255, 0)\nAZUL = (0, 0, 255)\n# Bucle principal del juego\nreloj = pygame.time.Clock()\n# Variables del jugador\njugador_tamano = 50\njugador_x = ANCHO // 2 - jugador_tamano // 2\njugador_y = ALTO - jugador_tamano - 10\nvelocidad_jugador = 5\n# Lista de obstáculos",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "AZUL",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "AZUL = (0, 0, 255)\n# Bucle principal del juego\nreloj = pygame.time.Clock()\n# Variables del jugador\njugador_tamano = 50\njugador_x = ANCHO // 2 - jugador_tamano // 2\njugador_y = ALTO - jugador_tamano - 10\nvelocidad_jugador = 5\n# Lista de obstáculos\nobstaculos = []",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "reloj",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "reloj = pygame.time.Clock()\n# Variables del jugador\njugador_tamano = 50\njugador_x = ANCHO // 2 - jugador_tamano // 2\njugador_y = ALTO - jugador_tamano - 10\nvelocidad_jugador = 5\n# Lista de obstáculos\nobstaculos = []\nvelocidad_obstaculo = 5\nfrecuencia_obstaculos = 50  # Controla la frecuencia de aparición",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "jugador_tamano",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "jugador_tamano = 50\njugador_x = ANCHO // 2 - jugador_tamano // 2\njugador_y = ALTO - jugador_tamano - 10\nvelocidad_jugador = 5\n# Lista de obstáculos\nobstaculos = []\nvelocidad_obstaculo = 5\nfrecuencia_obstaculos = 50  # Controla la frecuencia de aparición\n# Puntuación\npuntuacion = 0",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "jugador_x",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "jugador_x = ANCHO // 2 - jugador_tamano // 2\njugador_y = ALTO - jugador_tamano - 10\nvelocidad_jugador = 5\n# Lista de obstáculos\nobstaculos = []\nvelocidad_obstaculo = 5\nfrecuencia_obstaculos = 50  # Controla la frecuencia de aparición\n# Puntuación\npuntuacion = 0\nfuente = pygame.font.SysFont(None, 36)",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "jugador_y",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "jugador_y = ALTO - jugador_tamano - 10\nvelocidad_jugador = 5\n# Lista de obstáculos\nobstaculos = []\nvelocidad_obstaculo = 5\nfrecuencia_obstaculos = 50  # Controla la frecuencia de aparición\n# Puntuación\npuntuacion = 0\nfuente = pygame.font.SysFont(None, 36)\n# Bucle principal",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "velocidad_jugador",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "velocidad_jugador = 5\n# Lista de obstáculos\nobstaculos = []\nvelocidad_obstaculo = 5\nfrecuencia_obstaculos = 50  # Controla la frecuencia de aparición\n# Puntuación\npuntuacion = 0\nfuente = pygame.font.SysFont(None, 36)\n# Bucle principal\ncorriendo = True",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "obstaculos",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "obstaculos = []\nvelocidad_obstaculo = 5\nfrecuencia_obstaculos = 50  # Controla la frecuencia de aparición\n# Puntuación\npuntuacion = 0\nfuente = pygame.font.SysFont(None, 36)\n# Bucle principal\ncorriendo = True\ncontador_frames = 0\nwhile corriendo:",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "velocidad_obstaculo",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "velocidad_obstaculo = 5\nfrecuencia_obstaculos = 50  # Controla la frecuencia de aparición\n# Puntuación\npuntuacion = 0\nfuente = pygame.font.SysFont(None, 36)\n# Bucle principal\ncorriendo = True\ncontador_frames = 0\nwhile corriendo:\n    # Manejar eventos",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "frecuencia_obstaculos",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "frecuencia_obstaculos = 50  # Controla la frecuencia de aparición\n# Puntuación\npuntuacion = 0\nfuente = pygame.font.SysFont(None, 36)\n# Bucle principal\ncorriendo = True\ncontador_frames = 0\nwhile corriendo:\n    # Manejar eventos\n    for evento in pygame.event.get():",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "puntuacion",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "puntuacion = 0\nfuente = pygame.font.SysFont(None, 36)\n# Bucle principal\ncorriendo = True\ncontador_frames = 0\nwhile corriendo:\n    # Manejar eventos\n    for evento in pygame.event.get():\n        if evento.type == pygame.QUIT:\n            corriendo = False",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "fuente",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "fuente = pygame.font.SysFont(None, 36)\n# Bucle principal\ncorriendo = True\ncontador_frames = 0\nwhile corriendo:\n    # Manejar eventos\n    for evento in pygame.event.get():\n        if evento.type == pygame.QUIT:\n            corriendo = False\n    # Obtener todas las teclas presionadas",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "corriendo",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "corriendo = True\ncontador_frames = 0\nwhile corriendo:\n    # Manejar eventos\n    for evento in pygame.event.get():\n        if evento.type == pygame.QUIT:\n            corriendo = False\n    # Obtener todas las teclas presionadas\n    teclas = pygame.key.get_pressed()\n    if teclas[pygame.K_LEFT] or teclas[pygame.K_a]:",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "contador_frames",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "contador_frames = 0\nwhile corriendo:\n    # Manejar eventos\n    for evento in pygame.event.get():\n        if evento.type == pygame.QUIT:\n            corriendo = False\n    # Obtener todas las teclas presionadas\n    teclas = pygame.key.get_pressed()\n    if teclas[pygame.K_LEFT] or teclas[pygame.K_a]:\n        jugador_x -= velocidad_jugador",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "texto_fin",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "texto_fin = fuente.render(\"¡Juego Terminado!\", True, NEGRO)\ntexto_puntuacion_final = fuente.render(f\"Puntuación Final: {puntuacion}\", True, NEGRO)\nventana.blit(texto_fin, (ANCHO // 2 - texto_fin.get_width() // 2, ALTO // 2 - 50))\nventana.blit(texto_puntuacion_final, (ANCHO // 2 - texto_puntuacion_final.get_width() // 2, ALTO // 2))\npygame.display.flip()\n# Esperar unos segundos antes de cerrar\npygame.time.wait(3000)\n# Finalizar Pygame\npygame.quit()\nsys.exit()",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "texto_puntuacion_final",
        "kind": 5,
        "importPath": "pgame",
        "description": "pgame",
        "peekOfCode": "texto_puntuacion_final = fuente.render(f\"Puntuación Final: {puntuacion}\", True, NEGRO)\nventana.blit(texto_fin, (ANCHO // 2 - texto_fin.get_width() // 2, ALTO // 2 - 50))\nventana.blit(texto_puntuacion_final, (ANCHO // 2 - texto_puntuacion_final.get_width() // 2, ALTO // 2))\npygame.display.flip()\n# Esperar unos segundos antes de cerrar\npygame.time.wait(3000)\n# Finalizar Pygame\npygame.quit()\nsys.exit()",
        "detail": "pgame",
        "documentation": {}
    },
    {
        "label": "preguntas",
        "kind": 5,
        "importPath": "preguntas",
        "description": "preguntas",
        "peekOfCode": "preguntas = [\n    {\n        \"pregunta\": \"1) ¿En qué año se reconoció en Colombia el derecho al voto femenino?\",\n        \"opciones\": [\"1930\", \"1954\", \"1961\", \"1975\"],\n        \"respuesta_correcta\": 1,\n        \"explicacion\": \"Las mujeres lograron el derecho al voto en 1954 y lo ejercieron por primera vez en 1957.\"\n    },\n    {\n        \"pregunta\": \"2) ¿Qué ley colombiana protege específicamente a las mujeres contra la violencia?\",\n        \"opciones\": [\"Ley 100 de 1993\", \"Ley 1257 de 2008\", \"Ley 30 de 1986\", \"Ley 1801 de 2016\"],",
        "detail": "preguntas",
        "documentation": {}
    },
    {
        "label": "pantalla",
        "kind": 5,
        "importPath": "pturtle",
        "description": "pturtle",
        "peekOfCode": "pantalla = turtle.Screen()\npantalla.title(\"Polígono con líneas al centro\")\ntortuga = turtle.Turtle()\ntortuga.speed(3)          # Velocidad de la tortuga (1 = lento, 10 = rápido, 0 = sin animación)\ntortuga.color(\"blue\")     # Color para dibujar el polígono\n# Parámetros del polígono\nn_lados = 12               # Cambia este valor para probar con distintos polígonos (3=triángulo, 4=cuadrado, etc.)\ndistancia = 50           # Longitud de cada lado\nangulo = 360 / n_lados    # Ángulo de giro para un polígono regular\n# Lista para guardar los vértices",
        "detail": "pturtle",
        "documentation": {}
    },
    {
        "label": "tortuga",
        "kind": 5,
        "importPath": "pturtle",
        "description": "pturtle",
        "peekOfCode": "tortuga = turtle.Turtle()\ntortuga.speed(3)          # Velocidad de la tortuga (1 = lento, 10 = rápido, 0 = sin animación)\ntortuga.color(\"blue\")     # Color para dibujar el polígono\n# Parámetros del polígono\nn_lados = 12               # Cambia este valor para probar con distintos polígonos (3=triángulo, 4=cuadrado, etc.)\ndistancia = 50           # Longitud de cada lado\nangulo = 360 / n_lados    # Ángulo de giro para un polígono regular\n# Lista para guardar los vértices\nvertices = []\n# DIBUJAR EL POLÍGONO",
        "detail": "pturtle",
        "documentation": {}
    },
    {
        "label": "n_lados",
        "kind": 5,
        "importPath": "pturtle",
        "description": "pturtle",
        "peekOfCode": "n_lados = 12               # Cambia este valor para probar con distintos polígonos (3=triángulo, 4=cuadrado, etc.)\ndistancia = 50           # Longitud de cada lado\nangulo = 360 / n_lados    # Ángulo de giro para un polígono regular\n# Lista para guardar los vértices\nvertices = []\n# DIBUJAR EL POLÍGONO\nfor _ in range(n_lados):\n    # Guardamos la posición actual (vértice)\n    vertices.append(tortuga.pos())\n    # Avanzamos y giramos para dibujar el siguiente lado",
        "detail": "pturtle",
        "documentation": {}
    },
    {
        "label": "distancia",
        "kind": 5,
        "importPath": "pturtle",
        "description": "pturtle",
        "peekOfCode": "distancia = 50           # Longitud de cada lado\nangulo = 360 / n_lados    # Ángulo de giro para un polígono regular\n# Lista para guardar los vértices\nvertices = []\n# DIBUJAR EL POLÍGONO\nfor _ in range(n_lados):\n    # Guardamos la posición actual (vértice)\n    vertices.append(tortuga.pos())\n    # Avanzamos y giramos para dibujar el siguiente lado\n    tortuga.forward(distancia)",
        "detail": "pturtle",
        "documentation": {}
    },
    {
        "label": "angulo",
        "kind": 5,
        "importPath": "pturtle",
        "description": "pturtle",
        "peekOfCode": "angulo = 360 / n_lados    # Ángulo de giro para un polígono regular\n# Lista para guardar los vértices\nvertices = []\n# DIBUJAR EL POLÍGONO\nfor _ in range(n_lados):\n    # Guardamos la posición actual (vértice)\n    vertices.append(tortuga.pos())\n    # Avanzamos y giramos para dibujar el siguiente lado\n    tortuga.forward(distancia)\n    tortuga.right(angulo)",
        "detail": "pturtle",
        "documentation": {}
    },
    {
        "label": "vertices",
        "kind": 5,
        "importPath": "pturtle",
        "description": "pturtle",
        "peekOfCode": "vertices = []\n# DIBUJAR EL POLÍGONO\nfor _ in range(n_lados):\n    # Guardamos la posición actual (vértice)\n    vertices.append(tortuga.pos())\n    # Avanzamos y giramos para dibujar el siguiente lado\n    tortuga.forward(distancia)\n    tortuga.right(angulo)\n# CAMBIAMOS DE COLOR PARA LAS LÍNEAS AL CENTRO\ntortuga.color(\"red\")",
        "detail": "pturtle",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "qrcodep",
        "description": "qrcodep",
        "peekOfCode": "url = \"https://iedeoccidente.edu.co/documentos/manual_de_convivencia_ieo.pdf\"\n# Crear el objeto QRCode\nqr = qrcode.QRCode(\n    version=1,  # Controla el tamaño del QR (1 es el más pequeño)\n    error_correction=qrcode.constants.ERROR_CORRECT_L,  # Nivel de corrección de errores\n    box_size=10,  # Tamaño de cada \"caja\" del QR\n    border=4,     # Grosor del borde (en cajas)\n)\n# Agregar la URL al objeto QR\nqr.add_data(url)",
        "detail": "qrcodep",
        "documentation": {}
    },
    {
        "label": "qr",
        "kind": 5,
        "importPath": "qrcodep",
        "description": "qrcodep",
        "peekOfCode": "qr = qrcode.QRCode(\n    version=1,  # Controla el tamaño del QR (1 es el más pequeño)\n    error_correction=qrcode.constants.ERROR_CORRECT_L,  # Nivel de corrección de errores\n    box_size=10,  # Tamaño de cada \"caja\" del QR\n    border=4,     # Grosor del borde (en cajas)\n)\n# Agregar la URL al objeto QR\nqr.add_data(url)\nqr.make(fit=True)\n# Crear la imagen del código QR",
        "detail": "qrcodep",
        "documentation": {}
    },
    {
        "label": "img",
        "kind": 5,
        "importPath": "qrcodep",
        "description": "qrcodep",
        "peekOfCode": "img = qr.make_image(fill_color=\"black\", back_color=\"white\")\n# Guardar la imagen en un archivo\nimg.save(\"manual_convivencia_qr.png\")\nprint(\"El código QR se ha generado y guardado como 'manual_convivencia_qr.png'\")",
        "detail": "qrcodep",
        "documentation": {}
    },
    {
        "label": "document",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "document = Document()\n# Configurar tamaño de página y márgenes para tamaño carta (8.5 x 11 pulgadas)\nsection = document.sections[0]\nsection.page_width = Inches(8.5)\nsection.page_height = Inches(11)\nsection.top_margin = Inches(0.5)\nsection.bottom_margin = Inches(0.5)\nsection.left_margin = Inches(0.5)\nsection.right_margin = Inches(0.5)\n# Agregar la imagen en la parte superior izquierda",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "section",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "section = document.sections[0]\nsection.page_width = Inches(8.5)\nsection.page_height = Inches(11)\nsection.top_margin = Inches(0.5)\nsection.bottom_margin = Inches(0.5)\nsection.left_margin = Inches(0.5)\nsection.right_margin = Inches(0.5)\n# Agregar la imagen en la parte superior izquierda\nimg_paragraph = document.add_paragraph()\nimg_paragraph.alignment = 0  # Alineación izquierda",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "section.page_width",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "section.page_width = Inches(8.5)\nsection.page_height = Inches(11)\nsection.top_margin = Inches(0.5)\nsection.bottom_margin = Inches(0.5)\nsection.left_margin = Inches(0.5)\nsection.right_margin = Inches(0.5)\n# Agregar la imagen en la parte superior izquierda\nimg_paragraph = document.add_paragraph()\nimg_paragraph.alignment = 0  # Alineación izquierda\nimg_run = img_paragraph.add_run()",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "section.page_height",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "section.page_height = Inches(11)\nsection.top_margin = Inches(0.5)\nsection.bottom_margin = Inches(0.5)\nsection.left_margin = Inches(0.5)\nsection.right_margin = Inches(0.5)\n# Agregar la imagen en la parte superior izquierda\nimg_paragraph = document.add_paragraph()\nimg_paragraph.alignment = 0  # Alineación izquierda\nimg_run = img_paragraph.add_run()\nimg_run.add_picture('assets/pollo.jpg', width=Inches(1))  # Ajusta el tamaño según necesites",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "section.top_margin",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "section.top_margin = Inches(0.5)\nsection.bottom_margin = Inches(0.5)\nsection.left_margin = Inches(0.5)\nsection.right_margin = Inches(0.5)\n# Agregar la imagen en la parte superior izquierda\nimg_paragraph = document.add_paragraph()\nimg_paragraph.alignment = 0  # Alineación izquierda\nimg_run = img_paragraph.add_run()\nimg_run.add_picture('assets/pollo.jpg', width=Inches(1))  # Ajusta el tamaño según necesites\n# Agregar el encabezado centrado",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "section.bottom_margin",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "section.bottom_margin = Inches(0.5)\nsection.left_margin = Inches(0.5)\nsection.right_margin = Inches(0.5)\n# Agregar la imagen en la parte superior izquierda\nimg_paragraph = document.add_paragraph()\nimg_paragraph.alignment = 0  # Alineación izquierda\nimg_run = img_paragraph.add_run()\nimg_run.add_picture('assets/pollo.jpg', width=Inches(1))  # Ajusta el tamaño según necesites\n# Agregar el encabezado centrado\nheader_paragraph = document.add_paragraph()",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "section.left_margin",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "section.left_margin = Inches(0.5)\nsection.right_margin = Inches(0.5)\n# Agregar la imagen en la parte superior izquierda\nimg_paragraph = document.add_paragraph()\nimg_paragraph.alignment = 0  # Alineación izquierda\nimg_run = img_paragraph.add_run()\nimg_run.add_picture('assets/pollo.jpg', width=Inches(1))  # Ajusta el tamaño según necesites\n# Agregar el encabezado centrado\nheader_paragraph = document.add_paragraph()\nheader_paragraph.alignment = 1  # 0=izquierda, 1=centrado, 2=derecha",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "section.right_margin",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "section.right_margin = Inches(0.5)\n# Agregar la imagen en la parte superior izquierda\nimg_paragraph = document.add_paragraph()\nimg_paragraph.alignment = 0  # Alineación izquierda\nimg_run = img_paragraph.add_run()\nimg_run.add_picture('assets/pollo.jpg', width=Inches(1))  # Ajusta el tamaño según necesites\n# Agregar el encabezado centrado\nheader_paragraph = document.add_paragraph()\nheader_paragraph.alignment = 1  # 0=izquierda, 1=centrado, 2=derecha\nheader_run = header_paragraph.add_run(",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "img_paragraph",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "img_paragraph = document.add_paragraph()\nimg_paragraph.alignment = 0  # Alineación izquierda\nimg_run = img_paragraph.add_run()\nimg_run.add_picture('assets/pollo.jpg', width=Inches(1))  # Ajusta el tamaño según necesites\n# Agregar el encabezado centrado\nheader_paragraph = document.add_paragraph()\nheader_paragraph.alignment = 1  # 0=izquierda, 1=centrado, 2=derecha\nheader_run = header_paragraph.add_run(\n    \"Los estudiantes de grado 1102 del Instituto Guática hacen una rifa con el fin de recaudar fondos para las actividades de finalización de estudios\"\n)",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "img_paragraph.alignment",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "img_paragraph.alignment = 0  # Alineación izquierda\nimg_run = img_paragraph.add_run()\nimg_run.add_picture('assets/pollo.jpg', width=Inches(1))  # Ajusta el tamaño según necesites\n# Agregar el encabezado centrado\nheader_paragraph = document.add_paragraph()\nheader_paragraph.alignment = 1  # 0=izquierda, 1=centrado, 2=derecha\nheader_run = header_paragraph.add_run(\n    \"Los estudiantes de grado 1102 del Instituto Guática hacen una rifa con el fin de recaudar fondos para las actividades de finalización de estudios\"\n)\nheader_run.bold = True",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "img_run",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "img_run = img_paragraph.add_run()\nimg_run.add_picture('assets/pollo.jpg', width=Inches(1))  # Ajusta el tamaño según necesites\n# Agregar el encabezado centrado\nheader_paragraph = document.add_paragraph()\nheader_paragraph.alignment = 1  # 0=izquierda, 1=centrado, 2=derecha\nheader_run = header_paragraph.add_run(\n    \"Los estudiantes de grado 1102 del Instituto Guática hacen una rifa con el fin de recaudar fondos para las actividades de finalización de estudios\"\n)\nheader_run.bold = True\nheader_run.font.size = Pt(14)",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "header_paragraph",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "header_paragraph = document.add_paragraph()\nheader_paragraph.alignment = 1  # 0=izquierda, 1=centrado, 2=derecha\nheader_run = header_paragraph.add_run(\n    \"Los estudiantes de grado 1102 del Instituto Guática hacen una rifa con el fin de recaudar fondos para las actividades de finalización de estudios\"\n)\nheader_run.bold = True\nheader_run.font.size = Pt(14)\n# Resto del código original...\n# Agregar información del premio centrada\nprize_paragraph = document.add_paragraph()",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "header_paragraph.alignment",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "header_paragraph.alignment = 1  # 0=izquierda, 1=centrado, 2=derecha\nheader_run = header_paragraph.add_run(\n    \"Los estudiantes de grado 1102 del Instituto Guática hacen una rifa con el fin de recaudar fondos para las actividades de finalización de estudios\"\n)\nheader_run.bold = True\nheader_run.font.size = Pt(14)\n# Resto del código original...\n# Agregar información del premio centrada\nprize_paragraph = document.add_paragraph()\nprize_paragraph.alignment = 1",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "header_run",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "header_run = header_paragraph.add_run(\n    \"Los estudiantes de grado 1102 del Instituto Guática hacen una rifa con el fin de recaudar fondos para las actividades de finalización de estudios\"\n)\nheader_run.bold = True\nheader_run.font.size = Pt(14)\n# Resto del código original...\n# Agregar información del premio centrada\nprize_paragraph = document.add_paragraph()\nprize_paragraph.alignment = 1\nprize_run = prize_paragraph.add_run(\"Premio: Combo de Pollo frito Frisby\")",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "header_run.bold",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "header_run.bold = True\nheader_run.font.size = Pt(14)\n# Resto del código original...\n# Agregar información del premio centrada\nprize_paragraph = document.add_paragraph()\nprize_paragraph.alignment = 1\nprize_run = prize_paragraph.add_run(\"Premio: Combo de Pollo frito Frisby\")\nprize_run.bold = True\nprize_run.font.size = Pt(12)\n# Agregar un párrafo en blanco para separar",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "header_run.font.size",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "header_run.font.size = Pt(14)\n# Resto del código original...\n# Agregar información del premio centrada\nprize_paragraph = document.add_paragraph()\nprize_paragraph.alignment = 1\nprize_run = prize_paragraph.add_run(\"Premio: Combo de Pollo frito Frisby\")\nprize_run.bold = True\nprize_run.font.size = Pt(12)\n# Agregar un párrafo en blanco para separar\ndocument.add_paragraph()",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "prize_paragraph",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "prize_paragraph = document.add_paragraph()\nprize_paragraph.alignment = 1\nprize_run = prize_paragraph.add_run(\"Premio: Combo de Pollo frito Frisby\")\nprize_run.bold = True\nprize_run.font.size = Pt(12)\n# Agregar un párrafo en blanco para separar\ndocument.add_paragraph()\n# ---------------------------------------------------------------------------\n# Calcular la altura de cada fila para que la tabla ocupe el espacio restante.\n# Se asume:",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "prize_paragraph.alignment",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "prize_paragraph.alignment = 1\nprize_run = prize_paragraph.add_run(\"Premio: Combo de Pollo frito Frisby\")\nprize_run.bold = True\nprize_run.font.size = Pt(12)\n# Agregar un párrafo en blanco para separar\ndocument.add_paragraph()\n# ---------------------------------------------------------------------------\n# Calcular la altura de cada fila para que la tabla ocupe el espacio restante.\n# Se asume:\n# - Página: 11\" de alto",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "prize_run",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "prize_run = prize_paragraph.add_run(\"Premio: Combo de Pollo frito Frisby\")\nprize_run.bold = True\nprize_run.font.size = Pt(12)\n# Agregar un párrafo en blanco para separar\ndocument.add_paragraph()\n# ---------------------------------------------------------------------------\n# Calcular la altura de cada fila para que la tabla ocupe el espacio restante.\n# Se asume:\n# - Página: 11\" de alto\n# - Márgenes superior e inferior: 0.5\" cada uno  --> espacio vertical total: 11 - 1 = 10\"",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "prize_run.bold",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "prize_run.bold = True\nprize_run.font.size = Pt(12)\n# Agregar un párrafo en blanco para separar\ndocument.add_paragraph()\n# ---------------------------------------------------------------------------\n# Calcular la altura de cada fila para que la tabla ocupe el espacio restante.\n# Se asume:\n# - Página: 11\" de alto\n# - Márgenes superior e inferior: 0.5\" cada uno  --> espacio vertical total: 11 - 1 = 10\"\n# - Espacio usado por los párrafos de encabezado y premio (aproximado): 1.5\"",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "prize_run.font.size",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "prize_run.font.size = Pt(12)\n# Agregar un párrafo en blanco para separar\ndocument.add_paragraph()\n# ---------------------------------------------------------------------------\n# Calcular la altura de cada fila para que la tabla ocupe el espacio restante.\n# Se asume:\n# - Página: 11\" de alto\n# - Márgenes superior e inferior: 0.5\" cada uno  --> espacio vertical total: 11 - 1 = 10\"\n# - Espacio usado por los párrafos de encabezado y premio (aproximado): 1.5\"\n# Entonces, espacio disponible para la tabla: 10 - 1.5 = 8.5\" ",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "row_height",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "row_height = Inches(8.5 / 21)\n# Crear la tabla: 21 filas y 3 columnas\ntable = document.add_table(rows=21, cols=3)\ntable.style = 'Table Grid'\n# Rellenar la primera fila (encabezados de la tabla)\nhdr_cells = table.rows[0].cells\nhdr_cells[0].text = 'N°'\nhdr_cells[1].text = 'Nombre'\nhdr_cells[2].text = 'Teléfono'\n# Configurar la altura de cada fila de la tabla de forma fija (exacta)",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "table",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "table = document.add_table(rows=21, cols=3)\ntable.style = 'Table Grid'\n# Rellenar la primera fila (encabezados de la tabla)\nhdr_cells = table.rows[0].cells\nhdr_cells[0].text = 'N°'\nhdr_cells[1].text = 'Nombre'\nhdr_cells[2].text = 'Teléfono'\n# Configurar la altura de cada fila de la tabla de forma fija (exacta)\nfor row in table.rows:\n    row.height = row_height",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "table.style",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "table.style = 'Table Grid'\n# Rellenar la primera fila (encabezados de la tabla)\nhdr_cells = table.rows[0].cells\nhdr_cells[0].text = 'N°'\nhdr_cells[1].text = 'Nombre'\nhdr_cells[2].text = 'Teléfono'\n# Configurar la altura de cada fila de la tabla de forma fija (exacta)\nfor row in table.rows:\n    row.height = row_height\n    row.height_rule = WD_ROW_HEIGHT_RULE.EXACTLY",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "hdr_cells",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "hdr_cells = table.rows[0].cells\nhdr_cells[0].text = 'N°'\nhdr_cells[1].text = 'Nombre'\nhdr_cells[2].text = 'Teléfono'\n# Configurar la altura de cada fila de la tabla de forma fija (exacta)\nfor row in table.rows:\n    row.height = row_height\n    row.height_rule = WD_ROW_HEIGHT_RULE.EXACTLY\n# Rellenar la primera columna de las filas de participantes (filas 2 a 21)\nfor i in range(1, 21):",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "hdr_cells[0].text",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "hdr_cells[0].text = 'N°'\nhdr_cells[1].text = 'Nombre'\nhdr_cells[2].text = 'Teléfono'\n# Configurar la altura de cada fila de la tabla de forma fija (exacta)\nfor row in table.rows:\n    row.height = row_height\n    row.height_rule = WD_ROW_HEIGHT_RULE.EXACTLY\n# Rellenar la primera columna de las filas de participantes (filas 2 a 21)\nfor i in range(1, 21):\n    row_cells = table.rows[i].cells",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "hdr_cells[1].text",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "hdr_cells[1].text = 'Nombre'\nhdr_cells[2].text = 'Teléfono'\n# Configurar la altura de cada fila de la tabla de forma fija (exacta)\nfor row in table.rows:\n    row.height = row_height\n    row.height_rule = WD_ROW_HEIGHT_RULE.EXACTLY\n# Rellenar la primera columna de las filas de participantes (filas 2 a 21)\nfor i in range(1, 21):\n    row_cells = table.rows[i].cells\n    row_cells[0].text = str(i)",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "hdr_cells[2].text",
        "kind": 5,
        "importPath": "rifa",
        "description": "rifa",
        "peekOfCode": "hdr_cells[2].text = 'Teléfono'\n# Configurar la altura de cada fila de la tabla de forma fija (exacta)\nfor row in table.rows:\n    row.height = row_height\n    row.height_rule = WD_ROW_HEIGHT_RULE.EXACTLY\n# Rellenar la primera columna de las filas de participantes (filas 2 a 21)\nfor i in range(1, 21):\n    row_cells = table.rows[i].cells\n    row_cells[0].text = str(i)\n    # Las celdas \"Nombre\" y \"Teléfono\" se dejan en blanco para completarlas manualmente",
        "detail": "rifa",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "seno",
        "description": "seno",
        "peekOfCode": "screen = turtle.Screen()\nscreen.bgcolor(\"black\")\nscreen.title(\"Seno\")\nw, h = 800, 600\nscreen.setup(width=w, height=h)\nseno = turtle.Turtle()\nseno.speed(\"fastest\")\nseno.pensize(2)\nseno.color(\"cyan\")\nseno.penup()",
        "detail": "seno",
        "documentation": {}
    },
    {
        "label": "seno",
        "kind": 5,
        "importPath": "seno",
        "description": "seno",
        "peekOfCode": "seno = turtle.Turtle()\nseno.speed(\"fastest\")\nseno.pensize(2)\nseno.color(\"cyan\")\nseno.penup()\nancho=(w//2)\nalto=(h//2-20)\nseno.goto(-ancho,0)\nseno.pendown()\nfor i in range(0,w,10):",
        "detail": "seno",
        "documentation": {}
    },
    {
        "label": "crear_grilla",
        "kind": 2,
        "importPath": "tkint",
        "description": "tkint",
        "peekOfCode": "def crear_grilla():\n    try:\n        filas = int(entry_filas.get())\n        columnas = int(entry_columnas.get())\n    except ValueError:\n        print(\"Por favor ingrese valores numéricos válidos.\")\n        return\n    # Oculta la sección de ingreso de filas y columnas\n    frame_config.destroy()\n    # Crea un nuevo frame para la grilla",
        "detail": "tkint",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "tkint",
        "description": "tkint",
        "peekOfCode": "root = tk.Tk()\nroot.title(\"Crear Grilla de Datos\")\n# Frame para pedir el número de filas y columnas\nframe_config = tk.Frame(root)\nframe_config.pack(padx=10, pady=10)\nlabel_filas = tk.Label(frame_config, text=\"Número de filas:\")\nlabel_filas.grid(row=0, column=0, padx=5, pady=5)\nentry_filas = tk.Entry(frame_config)\nentry_filas.grid(row=0, column=1, padx=5, pady=5)\nlabel_columnas = tk.Label(frame_config, text=\"Número de columnas:\")",
        "detail": "tkint",
        "documentation": {}
    },
    {
        "label": "frame_config",
        "kind": 5,
        "importPath": "tkint",
        "description": "tkint",
        "peekOfCode": "frame_config = tk.Frame(root)\nframe_config.pack(padx=10, pady=10)\nlabel_filas = tk.Label(frame_config, text=\"Número de filas:\")\nlabel_filas.grid(row=0, column=0, padx=5, pady=5)\nentry_filas = tk.Entry(frame_config)\nentry_filas.grid(row=0, column=1, padx=5, pady=5)\nlabel_columnas = tk.Label(frame_config, text=\"Número de columnas:\")\nlabel_columnas.grid(row=1, column=0, padx=5, pady=5)\nentry_columnas = tk.Entry(frame_config)\nentry_columnas.grid(row=1, column=1, padx=5, pady=5)",
        "detail": "tkint",
        "documentation": {}
    },
    {
        "label": "label_filas",
        "kind": 5,
        "importPath": "tkint",
        "description": "tkint",
        "peekOfCode": "label_filas = tk.Label(frame_config, text=\"Número de filas:\")\nlabel_filas.grid(row=0, column=0, padx=5, pady=5)\nentry_filas = tk.Entry(frame_config)\nentry_filas.grid(row=0, column=1, padx=5, pady=5)\nlabel_columnas = tk.Label(frame_config, text=\"Número de columnas:\")\nlabel_columnas.grid(row=1, column=0, padx=5, pady=5)\nentry_columnas = tk.Entry(frame_config)\nentry_columnas.grid(row=1, column=1, padx=5, pady=5)\nbtn_crear = tk.Button(frame_config, text=\"Crear Grilla\", command=crear_grilla)\nbtn_crear.grid(row=2, column=0, columnspan=2, pady=10)",
        "detail": "tkint",
        "documentation": {}
    },
    {
        "label": "entry_filas",
        "kind": 5,
        "importPath": "tkint",
        "description": "tkint",
        "peekOfCode": "entry_filas = tk.Entry(frame_config)\nentry_filas.grid(row=0, column=1, padx=5, pady=5)\nlabel_columnas = tk.Label(frame_config, text=\"Número de columnas:\")\nlabel_columnas.grid(row=1, column=0, padx=5, pady=5)\nentry_columnas = tk.Entry(frame_config)\nentry_columnas.grid(row=1, column=1, padx=5, pady=5)\nbtn_crear = tk.Button(frame_config, text=\"Crear Grilla\", command=crear_grilla)\nbtn_crear.grid(row=2, column=0, columnspan=2, pady=10)\nroot.mainloop()",
        "detail": "tkint",
        "documentation": {}
    },
    {
        "label": "label_columnas",
        "kind": 5,
        "importPath": "tkint",
        "description": "tkint",
        "peekOfCode": "label_columnas = tk.Label(frame_config, text=\"Número de columnas:\")\nlabel_columnas.grid(row=1, column=0, padx=5, pady=5)\nentry_columnas = tk.Entry(frame_config)\nentry_columnas.grid(row=1, column=1, padx=5, pady=5)\nbtn_crear = tk.Button(frame_config, text=\"Crear Grilla\", command=crear_grilla)\nbtn_crear.grid(row=2, column=0, columnspan=2, pady=10)\nroot.mainloop()",
        "detail": "tkint",
        "documentation": {}
    },
    {
        "label": "entry_columnas",
        "kind": 5,
        "importPath": "tkint",
        "description": "tkint",
        "peekOfCode": "entry_columnas = tk.Entry(frame_config)\nentry_columnas.grid(row=1, column=1, padx=5, pady=5)\nbtn_crear = tk.Button(frame_config, text=\"Crear Grilla\", command=crear_grilla)\nbtn_crear.grid(row=2, column=0, columnspan=2, pady=10)\nroot.mainloop()",
        "detail": "tkint",
        "documentation": {}
    },
    {
        "label": "btn_crear",
        "kind": 5,
        "importPath": "tkint",
        "description": "tkint",
        "peekOfCode": "btn_crear = tk.Button(frame_config, text=\"Crear Grilla\", command=crear_grilla)\nbtn_crear.grid(row=2, column=0, columnspan=2, pady=10)\nroot.mainloop()",
        "detail": "tkint",
        "documentation": {}
    },
    {
        "label": "ventana",
        "kind": 5,
        "importPath": "turtle_estrella",
        "description": "turtle_estrella",
        "peekOfCode": "ventana = turtle.Screen()\nventana.bgcolor(\"black\")\nventana.title(\"Dibujar una estrella personalizada\")\n# Crear el objeto tortuga\nestrella = turtle.Turtle()\nestrella.color(\"cyan\")\nestrella.pensize(2)\nestrella.speed(3)\ncolores=[\"red\", \"blue\", \"green\", \"yellow\", \"purple\", \"orange\"]\nlados = 20",
        "detail": "turtle_estrella",
        "documentation": {}
    },
    {
        "label": "estrella",
        "kind": 5,
        "importPath": "turtle_estrella",
        "description": "turtle_estrella",
        "peekOfCode": "estrella = turtle.Turtle()\nestrella.color(\"cyan\")\nestrella.pensize(2)\nestrella.speed(3)\ncolores=[\"red\", \"blue\", \"green\", \"yellow\", \"purple\", \"orange\"]\nlados = 20\ntamaño = 200\nangulo=120\nestrella.speed(0)\nfor _ in range(lados):",
        "detail": "turtle_estrella",
        "documentation": {}
    },
    {
        "label": "lados",
        "kind": 5,
        "importPath": "turtle_estrella",
        "description": "turtle_estrella",
        "peekOfCode": "lados = 20\ntamaño = 200\nangulo=120\nestrella.speed(0)\nfor _ in range(lados):\n        estrella.color(random.choice(colores))\n        estrella.forward(tamaño)\n        estrella.color(random.choice(colores))\n        estrella.circle(20)\n        estrella.right(100)",
        "detail": "turtle_estrella",
        "documentation": {}
    },
    {
        "label": "tamaño",
        "kind": 5,
        "importPath": "turtle_estrella",
        "description": "turtle_estrella",
        "peekOfCode": "tamaño = 200\nangulo=120\nestrella.speed(0)\nfor _ in range(lados):\n        estrella.color(random.choice(colores))\n        estrella.forward(tamaño)\n        estrella.color(random.choice(colores))\n        estrella.circle(20)\n        estrella.right(100)\nestrella.penup()",
        "detail": "turtle_estrella",
        "documentation": {}
    },
    {
        "label": "torre",
        "kind": 2,
        "importPath": "turtle_estructura",
        "description": "turtle_estructura",
        "peekOfCode": "def torre(x, y, altura):\n    estructura.penup()\n    estructura.goto(x, y)\n    estructura.pendown()\n    estructura.begin_fill()\n    for _ in range(2):\n        estructura.forward(40)\n        estructura.left(90)\n        estructura.forward(altura)\n        estructura.left(90)",
        "detail": "turtle_estructura",
        "documentation": {}
    },
    {
        "label": "antena",
        "kind": 2,
        "importPath": "turtle_estructura",
        "description": "turtle_estructura",
        "peekOfCode": "def antena(x, y, largo):\n    estructura.penup()\n    estructura.goto(x + 20, y)\n    estructura.pendown()\n    estructura.color(\"white\")\n    estructura.forward(largo)\n    estructura.circle(3)\n    estructura.color(\"cyan\")\n# Función para dibujar un puente\ndef puente(x1, y1, x2, y2):",
        "detail": "turtle_estructura",
        "documentation": {}
    },
    {
        "label": "puente",
        "kind": 2,
        "importPath": "turtle_estructura",
        "description": "turtle_estructura",
        "peekOfCode": "def puente(x1, y1, x2, y2):\n    estructura.penup()\n    estructura.goto(x1, y1)\n    estructura.pendown()\n    estructura.goto(x2, y2)\n# Dibujar torres principales\ntorre(-200, -150, 200)\nantena(-200, 50, 80)\ntorre(0, -150, 250)\nantena(0, 100, 100)",
        "detail": "turtle_estructura",
        "documentation": {}
    },
    {
        "label": "pantalla",
        "kind": 5,
        "importPath": "turtle_estructura",
        "description": "turtle_estructura",
        "peekOfCode": "pantalla = turtle.Screen()\npantalla.bgcolor(\"black\")\npantalla.title(\"Superestructura Futurista\")\nestructura = turtle.Turtle()\nestructura.speed(0)\nestructura.color(\"cyan\")\nestructura.pensize(2)\n# Función para dibujar una torre\ndef torre(x, y, altura):\n    estructura.penup()",
        "detail": "turtle_estructura",
        "documentation": {}
    },
    {
        "label": "estructura",
        "kind": 5,
        "importPath": "turtle_estructura",
        "description": "turtle_estructura",
        "peekOfCode": "estructura = turtle.Turtle()\nestructura.speed(0)\nestructura.color(\"cyan\")\nestructura.pensize(2)\n# Función para dibujar una torre\ndef torre(x, y, altura):\n    estructura.penup()\n    estructura.goto(x, y)\n    estructura.pendown()\n    estructura.begin_fill()",
        "detail": "turtle_estructura",
        "documentation": {}
    },
    {
        "label": "datos",
        "kind": 5,
        "importPath": "vocabulario",
        "description": "vocabulario",
        "peekOfCode": "datos = {\n    \"Inglés\": [\n        \"Variable\", \"Function\", \"Loop\", \"List\", \"Tuple\", \"Dictionary\",\n        \"String\", \"Integer\", \"Float\", \"Boolean\", \"If statement\", \"Else\",\n        \"Elif\", \"Import\", \"Module\", \"Package\", \"Class\", \"Object\",\n        \"Method\", \"Attribute\", \"Exception\", \"Try\", \"Except\", \"Finally\",\n        \"While loop\", \"For loop\", \"Break\", \"Continue\", \"Pass\", \"Lambda\",\n        \"Decorator\", \"Generator\", \"Comprehension\", \"Indentation\",\n        \"Syntax\", \"Argument\", \"Parameter\", \"Return\", \"Namespace\",\n        \"Scope\", \"Global variable\", \"Local variable\", \"Docstring\",",
        "detail": "vocabulario",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "vocabulario",
        "description": "vocabulario",
        "peekOfCode": "df = pd.DataFrame(datos)\n# Exportar a un archivo Excel\ndf.to_excel(\"Vocabulario_Python.xlsx\", index=False)\nprint(\"El archivo 'Vocabulario_Python.xlsx' ha sido creado exitosamente.\")",
        "detail": "vocabulario",
        "documentation": {}
    }
]